{"version":3,"sources":["terrain/dem2mesh/pkg/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","png2elevation","_Znwm","_ZdlPv","__assert_fail","png2mesh","init","__wbg_log_db2a6fddbe33ea55","__wbindgen_object_drop_ref","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","__wbg_error_4bb6c2a97407129a","__wbg_new_f802c5ff9d449d95","__wbg_push_4ba6b2636acd5f79","__wbg_buffer_d31feadf69cb45fc","__wbg_newwithbyteoffsetandlength_1012637c6ea0e9b5","__wbg_newwithbyteoffsetandlength_a5176866b4bc401c","__wbindgen_throw","__wbindgen_memory","_index_bg_wasm__WEBPACK_IMPORTED_MODULE_0__","cachegetUint8Memory","getUint8Memory","buffer","wasm","Uint8Array","WASM_VECTOR_LEN","passArray8ToWasm","arg","ptr","length","set","cachegetInt32Memory","getInt32Memory","Int32Array","cachegetFloat32Memory","getArrayF32FromWasm","len","Float32Array","subarray","png_bytes","memi32","v0","retptr","slice","arg0","a","b","c","heap","Array","getObject","idx","fill","undefined","push","heap_next","takeObject","ret","dropObject","size","segments","cachedTextDecoder","TextDecoder","getStringFromWasm","decode","addHeapObject","obj","passStringToWasm","cachedTextEncoder","TextEncoder","encodeInto","offset","mem","code","charCodeAt","view","written","buf","encode","arg1","console","log","Error","stack","ret0","ret1","error","arg2","Uint32Array"],"mappings":"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","file":"1.static/js/terrain.worker.43b3d8b3.js","sourcesContent":["import * as wasm from './index_bg.wasm';\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n    getUint8Memory().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory = null;\nfunction getInt32Memory() {\n    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory;\n}\n\nlet cachegetFloat32Memory = null;\nfunction getFloat32Memory() {\n    if (cachegetFloat32Memory === null || cachegetFloat32Memory.buffer !== wasm.memory.buffer) {\n        cachegetFloat32Memory = new Float32Array(wasm.memory.buffer);\n    }\n    return cachegetFloat32Memory;\n}\n\nfunction getArrayF32FromWasm(ptr, len) {\n    return getFloat32Memory().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* @param {Uint8Array} png_bytes\n* @returns {Float32Array}\n*/\nexport function png2elevation(png_bytes) {\n    const retptr = 8;\n    const ret = wasm.png2elevation(retptr, passArray8ToWasm(png_bytes), WASM_VECTOR_LEN);\n    const memi32 = getInt32Memory();\n    const v0 = getArrayF32FromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n    wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 4);\n    return v0;\n}\n\n/**\n* @param {number} arg0\n* @returns {number}\n*/\nexport function _Znwm(arg0) {\n    const ret = wasm._Znwm(arg0);\n    return ret;\n}\n\n/**\n* @param {number} arg0\n*/\nexport function _ZdlPv(arg0) {\n    wasm._ZdlPv(arg0);\n}\n\n/**\n* @param {number} a\n* @param {number} b\n* @param {number} c\n* @param {number} d\n*/\nexport function __assert_fail(a, b, c, d) {\n    wasm.__assert_fail(a, b, c, d);\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @param {Uint8Array} png_bytes\n* @param {number} size\n* @param {number} segments\n* @returns {any}\n*/\nexport function png2mesh(png_bytes, size, segments) {\n    const ret = wasm.png2mesh(passArray8ToWasm(png_bytes), WASM_VECTOR_LEN, size, segments);\n    return takeObject(ret);\n}\n\n/**\n*/\nexport function init() {\n    wasm.init();\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            arg = arg.slice(offset);\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + arg.length * 3);\n            const view = getUint8Memory().subarray(ptr + offset, ptr + size);\n            const ret = cachedTextEncoder.encodeInto(arg, view);\n\n            offset += ret.written;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            const buf = cachedTextEncoder.encode(arg.slice(offset));\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + buf.length);\n            getUint8Memory().set(buf, ptr + offset);\n            offset += buf.length;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n}\n\nexport const __wbg_log_db2a6fddbe33ea55 = function(arg0, arg1) {\n    const v0 = getStringFromWasm(arg0, arg1).slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n    console.log(v0);\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ret0 = passStringToWasm(ret);\n    const ret1 = WASM_VECTOR_LEN;\n    getInt32Memory()[arg0 / 4 + 0] = ret0;\n    getInt32Memory()[arg0 / 4 + 1] = ret1;\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    const v0 = getStringFromWasm(arg0, arg1).slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n    console.error(v0);\n};\n\nexport const __wbg_new_f802c5ff9d449d95 = function() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_push_4ba6b2636acd5f79 = function(arg0, arg1) {\n    const ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nexport const __wbg_buffer_d31feadf69cb45fc = function(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_newwithbyteoffsetandlength_1012637c6ea0e9b5 = function(arg0, arg1, arg2) {\n    const ret = new Uint32Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_newwithbyteoffsetandlength_a5176866b4bc401c = function(arg0, arg1, arg2) {\n    const ret = new Float32Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm(arg0, arg1));\n};\n\nexport const __wbindgen_memory = function() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\n"],"sourceRoot":""}