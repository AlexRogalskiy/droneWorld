{"version":3,"sources":["terrain/dem2mesh/pkg/index.js"],"names":["cachegetUint8Memory","getUint8Memory","buffer","wasm","Uint8Array","WASM_VECTOR_LEN","passArray8ToWasm","arg","ptr","length","set","cachegetInt32Memory","getInt32Memory","Int32Array","cachegetFloat32Memory","getArrayF32FromWasm","len","Float32Array","subarray","png2elevation","png_bytes","memi32","v0","retptr","slice","_Znwm","arg0","_ZdlPv","__assert_fail","a","b","c","d","heap","Array","getObject","idx","fill","undefined","push","heap_next","takeObject","ret","dropObject","png2mesh","size","segments","init","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","getStringFromWasm","decode","addHeapObject","obj","cachedTextEncoder","TextEncoder","encodeString","encodeInto","view","buf","encode","read","written","__wbg_log_db2a6fddbe33ea55","arg1","console","log","__wbindgen_object_drop_ref","__wbg_new_59cb74e423758ede","Error","__wbg_stack_558ba5917b466edd","ret0","mem","offset","code","charCodeAt","passStringToWasm","stack","ret1","__wbg_error_4bb6c2a97407129a","error","__wbg_new_e776a73b8c778dea","__wbg_push_73e26dd41717d97a","__wbg_buffer_7923acefc6f53ee3","__wbg_newwithbyteoffsetandlength_ace653cdaaf1cb78","arg2","Uint32Array","__wbg_newwithbyteoffsetandlength_e0eb8b25a6fc28dc","__wbindgen_throw","__wbindgen_memory"],"mappings":"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","file":"1.terrain.worker.380e8085.js","sourcesContent":["import * as wasm from './index_bg.wasm';\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n    getUint8Memory().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory = null;\nfunction getInt32Memory() {\n    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory;\n}\n\nlet cachegetFloat32Memory = null;\nfunction getFloat32Memory() {\n    if (cachegetFloat32Memory === null || cachegetFloat32Memory.buffer !== wasm.memory.buffer) {\n        cachegetFloat32Memory = new Float32Array(wasm.memory.buffer);\n    }\n    return cachegetFloat32Memory;\n}\n\nfunction getArrayF32FromWasm(ptr, len) {\n    return getFloat32Memory().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* @param {Uint8Array} png_bytes\n* @returns {Float32Array}\n*/\nexport function png2elevation(png_bytes) {\n    const retptr = 8;\n    const ret = wasm.png2elevation(retptr, passArray8ToWasm(png_bytes), WASM_VECTOR_LEN);\n    const memi32 = getInt32Memory();\n    const v0 = getArrayF32FromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n    wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 4);\n    return v0;\n}\n\n/**\n* @param {number} arg0\n* @returns {number}\n*/\nexport function _Znwm(arg0) {\n    const ret = wasm._Znwm(arg0);\n    return ret;\n}\n\n/**\n* @param {number} arg0\n*/\nexport function _ZdlPv(arg0) {\n    wasm._ZdlPv(arg0);\n}\n\n/**\n* @param {number} a\n* @param {number} b\n* @param {number} c\n* @param {number} d\n*/\nexport function __assert_fail(a, b, c, d) {\n    wasm.__assert_fail(a, b, c, d);\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @param {Uint8Array} png_bytes\n* @param {number} size\n* @param {number} segments\n* @returns {any}\n*/\nexport function png2mesh(png_bytes, size, segments) {\n    const ret = wasm.png2mesh(passArray8ToWasm(png_bytes), WASM_VECTOR_LEN, size, segments);\n    return takeObject(ret);\n}\n\n/**\n*/\nexport function init() {\n    wasm.init();\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm(arg) {\n\n    let len = arg.length;\n    let ptr = wasm.__wbindgen_malloc(len);\n\n    const mem = getUint8Memory();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = wasm.__wbindgen_realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nexport const __wbg_log_db2a6fddbe33ea55 = function(arg0, arg1) {\n    const v0 = getStringFromWasm(arg0, arg1).slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n    console.log(v0);\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ret0 = passStringToWasm(ret);\n    const ret1 = WASM_VECTOR_LEN;\n    getInt32Memory()[arg0 / 4 + 0] = ret0;\n    getInt32Memory()[arg0 / 4 + 1] = ret1;\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    const v0 = getStringFromWasm(arg0, arg1).slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n    console.error(v0);\n};\n\nexport const __wbg_new_e776a73b8c778dea = function() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_push_73e26dd41717d97a = function(arg0, arg1) {\n    const ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nexport const __wbg_buffer_7923acefc6f53ee3 = function(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_newwithbyteoffsetandlength_ace653cdaaf1cb78 = function(arg0, arg1, arg2) {\n    const ret = new Uint32Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_newwithbyteoffsetandlength_e0eb8b25a6fc28dc = function(arg0, arg1, arg2) {\n    const ret = new Float32Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm(arg0, arg1));\n};\n\nexport const __wbindgen_memory = function() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\n"],"sourceRoot":""}