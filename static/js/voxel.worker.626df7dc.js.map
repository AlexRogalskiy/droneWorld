{"version":3,"sources":["../webpack/bootstrap","../node_modules/simplex-noise/simplex-noise.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/three/src/core/EventDispatcher.js","../node_modules/three/src/math/Math.js","../node_modules/three/src/math/Color.js","../node_modules/three/src/math/Quaternion.js","../node_modules/three/src/math/Vector3.js","../node_modules/three/src/core/Face3.js","../node_modules/three/src/math/Matrix3.js","../node_modules/three/src/math/Box3.js","../node_modules/three/src/math/Sphere.js","../node_modules/three/src/math/Matrix4.js","../node_modules/three/src/math/Vector2.js","../node_modules/three/src/math/Euler.js","../node_modules/three/src/core/Layers.js","../node_modules/three/src/constants.js","../node_modules/three/src/core/Object3D.js","../node_modules/three/src/core/Geometry.js","../node_modules/three/src/materials/Material.js","../node_modules/three/src/materials/MeshNormalMaterial.js","../node_modules/three/src/extras/objects/ImmediateRenderObject.js","../node_modules/three/src/math/Vector4.js","../node_modules/three/src/core/BufferAttribute.js","../node_modules/three/src/core/DirectGeometry.js","../node_modules/three/src/core/BufferGeometry.js","../node_modules/three/src/utils.js","../node_modules/three/examples/jsm/objects/MarchingCubes.js","../node_modules/three/examples/jsm/modifiers/SimplifyModifier.js","voxel/constants.js","voxel/voxel.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_RESULT__","F2","Math","sqrt","G2","G3","F4","G4","SimplexNoise","randomOrSeed","random","s0","s1","s2","mash","data","toString","length","h","charCodeAt","masher","arguments","alea","this","buildPermutationTable","perm","Uint8Array","permMod12","aux","grad3","Float32Array","grad4","noise2D","xin","yin","i1","j1","n0","n1","n2","floor","j","x0","y0","x1","y1","x2","y2","ii","jj","t0","gi0","t1","gi1","t2","gi2","noise3D","zin","n3","k1","i2","j2","k2","k","z0","z1","z2","x3","y3","z3","kk","t3","gi3","noise4D","x","y","z","w","n4","l1","l2","i3","j3","k3","l3","w0","rankx","ranky","rankz","rankw","w1","w2","w3","x4","y4","z4","w4","ll","t4","gi4","_buildPermutationTable","undefined","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","_s","_i","iterator","next","done","push","err","_iterableToArrayLimit","TypeError","_nonIterableRest","EventDispatcher","assign","addEventListener","type","listener","_listeners","listeners","indexOf","hasEventListener","removeEventListener","listenerArray","index","splice","dispatchEvent","event","target","array","slice","_Math","DEG2RAD","PI","RAD2DEG","generateUUID","lut","d0","d1","d2","d3","toUpperCase","clamp","min","max","euclideanModulo","mapLinear","a1","a2","b1","b2","lerp","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","pow","ceil","log","LN2","floorPowerOfTwo","ColorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Color","g","b","set","setRGB","hue2rgb","q","SRGBToLinear","LinearToSRGB","Quaternion","_x","_y","_z","_w","Vector3","Face3","a","normal","color","materialIndex","isVector3","vertexNormals","isColor","vertexColors","Matrix3","elements","console","error","Box3","Infinity","Sphere","center","radius","Matrix4","Vector2","Euler","order","_order","DefaultOrder","Layers","mask","copy","setHex","setStyle","setScalar","scalar","hex","setHSL","style","handleAlpha","string","parseFloat","warn","exec","components","parseInt","size","charAt","clone","constructor","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","delta","getStyle","offsetHSL","hsl","add","addColors","color1","color2","addScalar","sub","multiply","multiplyScalar","alpha","lerpHSL","hslA","hslB","equals","fromArray","offset","toArray","toJSON","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","cos","dir","sqrSin","Number","EPSILON","sin","len","atan2","tDir","f","defineProperties","_onChangeCallback","isQuaternion","quaternion","setFromEuler","euler","update","isEuler","Error","c1","c2","c3","s3","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","dot","abs","normalize","angleTo","acos","rotateTowards","step","inverse","conjugate","v","lengthSq","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","setX","setY","setZ","setComponent","getComponent","addVectors","addScaledVector","subVectors","subScalar","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyMatrix3","e","applyMatrix4","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","divide","divideScalar","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","manhattanLength","setLength","lerpVectors","v1","v2","cross","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","vector","projectOnPlane","planeNormal","reflect","theta","distanceTo","distanceToSquared","dx","dy","dz","manhattanDistanceTo","setFromSpherical","setFromSphericalCoords","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","sx","setFromMatrixColumn","sy","sz","fromBufferAttribute","attribute","getX","getY","getZ","source","il","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","setFromMatrix4","applyToBufferAttribute","count","setXYZ","multiplyMatrices","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","getInverse","matrix","throwOnDegenerate","isMatrix4","t11","t12","t13","det","msg","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","rotation","cx","cy","scale","rotate","translate","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","expandByPoint","setFromCenterAndSize","halfSize","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","scope","traverse","node","geometry","isGeometry","vertices","isBufferGeometry","attributes","position","updateMatrixWorld","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","closestPoint","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","v0","f0","f1","f2","testAxis","extents","triangleNormal","satForAxes","axes","p0","p1","p2","triangle","distanceToPoint","getBoundingSphere","intersect","union","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","zero","one","compose","lookAt","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","xx","xy","xz","yy","yz","zz","wx","wy","wz","decompose","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","width","height","isVector2","rotateAround","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","toggle","disable","test","layers","FrontSide","NoColors","NormalBlending","AddEquation","SrcAlphaFactor","OneMinusSrcAlphaFactor","LessEqualDepth","TangentSpaceNormalMap","object3DId","Object3D","uuid","parent","children","DefaultUp","configurable","modelViewMatrix","normalMatrix","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","isObject3D","onBeforeRender","onAfterRender","applyMatrix","updateMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","q1","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","worldToLocal","m1","updateWorldMatrix","isCamera","isLight","remove","attach","getObjectById","id","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverseVisible","traverseAncestors","force","updateParents","updateChildren","meta","isRootObject","output","geometries","materials","textures","images","shapes","metadata","version","generator","serialize","library","element","JSON","stringify","isMesh","drawMode","isLine","isPoints","parameters","shape","material","uuids","extractFromCache","cache","values","recursive","parse","child","geometryId","Geometry","colors","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","boundingSphere","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","face","jl","computeBoundingBox","computeBoundingSphere","obj","fromBufferGeometry","indices","positions","normals","uvs","uv","uvs2","uv2","addFace","groups","group","start","computeFaceNormals","cb","ab","fl","vA","vB","vC","computeVertexNormals","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","merge","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","precision","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","sort","newUvs1","newUvs2","vertex","normalsHash","colorsHash","uvsHash","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","kl","uvsCopy","morphTarget","morphNormal","srcVertexNormal","destVertexNormal","dispose","materialId","Material","fog","lights","blending","side","flatShading","vertexTangents","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","needsUpdate","MeshNormalMaterial","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","wireframe","wireframeLinewidth","skinning","setValues","ImmediateRenderObject","render","Vector4","BufferAttribute","itemSize","normalized","dynamic","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float64BufferAttribute","Float64Array","DirectGeometry","isMaterial","onBeforeCompile","newValue","currentValue","isRoot","roughness","metalness","emissive","emissiveIntensity","specular","shininess","clearCoat","clearCoatRoughness","map","isTexture","matcap","alphaMap","lightMap","aoMap","aoMapIntensity","roughnessMap","metalnessMap","emissiveMap","specularMap","envMap","reflectivity","refractionRatio","combine","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","wireframeLinecap","wireframeLinejoin","srcPlanes","dstPlanes","isMeshNormalMaterial","isImmediateRenderObject","isVector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","getW","isBufferAttribute","onUploadCallback","setArray","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","bufferGeometryId","BufferGeometry","morphAttributes","drawRange","getIndex","setIndex","arrayMax","addAttribute","isInterleavedBufferAttribute","getAttribute","removeAttribute","addGroup","clearGroups","setDrawRange","tangent","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","morphAttributesPosition","morphAttribute","isNaN","boxMorphTargets","pA","pB","pC","normalizeNormals","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","morphArray","keys","attributeData","hasMorphAttributes","attributeArray","MarchingCubes_MarchingCubes","resolution","enableUvs","enableColors","vlist","nlist","clist","VIntX","isol","valp1","valp2","c_offset1","c_offset2","mu","nc","normal_cache","palette","VIntY","q2","yd","VIntZ","zd","compNorm","q3","field","polygonize","fx","fy","fz","renderCallback","q1y","q1z","qyz","q1yz","cubeindex","field0","field1","field2","field3","field4","field5","field6","field7","bits","edgeTable","fx2","fy2","fz2","o1","o2","o3","numtris","triTable","posnormtriv","pos","norm","positionArray","nx","ny","nz","normalArray","uvArray","colorArray","maxCount","hasPositions","hasNormals","hasUvs","hasColors","concatenate","result","init","isolation","size2","size3","halfsize","begin","end","addBall","ballx","bally","ballz","strength","subtract","sign","userDefineColor","ballColor","zs","ys","xs","min_z","max_z","min_y","max_y","min_x","y_offset","z_offset","val","max_x","ratio","contrib","addPlaneX","xdiv","cxy","dist","addPlaneY","ydiv","addPlaneZ","zdiv","cz","cyz","setCell","getCell","blur","intensity","fieldCopy","reset","smin2","generateGeometry","generateBufferGeometry","geo","posArray","normArray","SimplifyModifier","removeFromArray","computeEdgeCollapseCost","u","sideFace","edgelength","curvature","sideFaces","hasVertex","minCurvature","dotProd","computeEdgeCostAtVertex","neighbors","collapseNeighbor","collapseCost","minCost","totalCost","costCount","removeVertex","assert","pop","removeFace","v3","vs","removeIfNonNeighbor","collapse","tmpVertices","replaceVertex","minimumCostEdge","least","Triangle","computeNormal","addUniqueNeighbor","Vertex","oldv","newv","modify","nextVertex","oldVertices","oldFaces","simplifiedGeometry","simple","noise","onmessage","args","_args$data","zMax","time","n128","n64","n16","n8","noGeometry","dim","effect","MarchingCubes","fbm","density","postMessage","hasGeometry","geometry1","pos1","buffer","normals1","timeEnd","generateVoxels"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,qBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,kBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,KAIAlC,IAAAmC,EAAA,qBClFA,IAAAC,GA6BA,WACA,aAEA,IAAAC,EAAA,IAAAC,KAAAC,KAAA,MACAC,GAAA,EAAAF,KAAAC,KAAA,MAEAE,EAAA,IACAC,GAAAJ,KAAAC,KAAA,QACAI,GAAA,EAAAL,KAAAC,KAAA,OAEA,SAAAK,EAAAC,GACA,IAAAC,EAGAA,EADA,mBAAAD,EACAA,EACKA,EAqXL,WAEA,IAAAE,EAAA,EACAC,EAAA,EACAC,EAAA,EACAxC,EAAA,EACAyC,EAmCA,WACA,IAAArB,EAAA,WACA,gBAAAsB,GACAA,IAAAC,WAEA,QAAAhD,EAAA,EAAqBA,EAAA+C,EAAAE,OAAiBjD,IAAA,CAEtC,IAAAkD,EAAA,oBADAzB,GAAAsB,EAAAI,WAAAnD,IAGAkD,GADAzB,EAAAyB,IAAA,EAGAzB,GADAyB,GAAAzB,KACA,EAEAA,GAAA,YADAyB,GAAAzB,GAIA,+BAAAA,IAAA,IAnDA2B,GACAT,EAAAG,EAAA,KACAF,EAAAE,EAAA,KACAD,EAAAC,EAAA,KAEA,QAAA9C,EAAA,EAAmBA,EAAAqD,UAAAJ,OAAsBjD,KACzC2C,GAAAG,EAAAO,UAAArD,KAEA,IACA2C,GAAA,IAGAC,GAAAE,EAAAO,UAAArD,KAEA,IACA4C,GAAA,IAGAC,GAAAC,EAAAO,UAAArD,KAEA,IACA6C,GAAA,GAKA,OADAC,EAAA,KACA,WACA,IAAA5B,EAAA,QAAAyB,EAAA,uBAAAtC,EAIA,OAFAsC,EAAAC,EACAA,EAAAC,EACAA,EAAA3B,GAAAb,EAAA,EAAAa,IAzZAoC,CAAAb,GAEAP,KAAAQ,OAGAa,KAAAzB,EAAA0B,EAAAd,GACAa,KAAAE,KAAA,IAAAC,WAAA,KACAH,KAAAI,UAAA,IAAAD,WAAA,KAEA,QAAA1D,EAAA,EAAmBA,EAAA,IAASA,IAC5BuD,KAAAE,KAAAzD,GAAAuD,KAAAzB,EAAA,IAAA9B,GACAuD,KAAAI,UAAA3D,GAAAuD,KAAAE,KAAAzD,GAAA,GAqVA,SAAAwD,EAAAd,GACA,IAAA1C,EACA8B,EAAA,IAAA4B,WAAA,KAEA,IAAA1D,EAAA,EAAeA,EAAA,IAASA,IACxB8B,EAAA9B,KAGA,IAAAA,EAAA,EAAeA,EAAA,IAASA,IAAA,CACxB,IAAAc,EAAAd,KAAA0C,KAAA,IAAA1C,IACA4D,EAAA9B,EAAA9B,GACA8B,EAAA9B,GAAA8B,EAAAhB,GACAgB,EAAAhB,GAAA8C,EAGA,OAAA9B,EAhWAU,EAAAZ,UAAA,CACAiC,MAAA,IAAAC,aAAA,uFACAC,MAAA,IAAAD,aAAA,mTACAE,QAAA,SAAAC,EAAAC,GACA,IAqBAC,EAAAC,EArBAT,EAAAJ,KAAAI,UACAF,EAAAF,KAAAE,KACAI,EAAAN,KAAAM,MACAQ,EAAA,EAEAC,EAAA,EACAC,EAAA,EAEAxC,GAAAkC,EAAAC,GAAAjC,EAEAjC,EAAAkC,KAAAsC,MAAAP,EAAAlC,GACA0C,EAAAvC,KAAAsC,MAAAN,EAAAnC,GACAb,GAAAlB,EAAAyE,GAAArC,EAIAsC,EAAAT,GAHAjE,EAAAkB,GAKAyD,EAAAT,GAHAO,EAAAvD,GAQAwD,EAAAC,GACAR,EAAA,EACAC,EAAA,IAGAD,EAAA,EACAC,EAAA,GAOA,IAAAQ,EAAAF,EAAAP,EAAA/B,EAEAyC,EAAAF,EAAAP,EAAAhC,EACA0C,EAAAJ,EAAA,IAAAtC,EAEA2C,EAAAJ,EAAA,IAAAvC,EAEA4C,EAAA,IAAAhF,EACAiF,EAAA,IAAAR,EAEAS,EAAA,GAAAR,IAAAC,IAEA,GAAAO,GAAA,GACA,IAAAC,EAAA,EAAAxB,EAAAqB,EAAAvB,EAAAwB,IAEAZ,GADAa,MACAA,GAAArB,EAAAsB,GAAAT,EAAAb,EAAAsB,EAAA,GAAAR,GAGA,IAAAS,EAAA,GAAAR,IAAAC,IAEA,GAAAO,GAAA,GACA,IAAAC,EAAA,EAAA1B,EAAAqB,EAAAb,EAAAV,EAAAwB,EAAAb,IAEAE,GADAc,MACAA,GAAAvB,EAAAwB,GAAAT,EAAAf,EAAAwB,EAAA,GAAAR,GAGA,IAAAS,EAAA,GAAAR,IAAAC,IAEA,GAAAO,GAAA,GACA,IAAAC,EAAA,EAAA5B,EAAAqB,EAAA,EAAAvB,EAAAwB,EAAA,IAEAV,GADAe,MACAA,GAAAzB,EAAA0B,GAAAT,EAAAjB,EAAA0B,EAAA,GAAAR,GAKA,WAAAV,EAAAC,EAAAC,IAGAiB,QAAA,SAAAvB,EAAAC,EAAAuB,GACA,IAGApB,EAAAC,EAAAC,EAAAmB,EAmBAvB,EAAAC,EAAAuB,EAEAC,EAAAC,EAAAC,EAxBAnC,EAAAJ,KAAAI,UACAF,EAAAF,KAAAE,KACAI,EAAAN,KAAAM,MAIA9B,GAAAkC,EAAAC,EAAAuB,IAhHA,KAkHAzF,EAAAkC,KAAAsC,MAAAP,EAAAlC,GACA0C,EAAAvC,KAAAsC,MAAAN,EAAAnC,GACAgE,EAAA7D,KAAAsC,MAAAiB,EAAA1D,GACAb,GAAAlB,EAAAyE,EAAAsB,GAAA1D,EAKAqC,EAAAT,GAJAjE,EAAAkB,GAMAyD,EAAAT,GAJAO,EAAAvD,GAKA8E,EAAAP,GAJAM,EAAA7E,GAWAwD,GAAAC,EACAA,GAAAqB,GACA7B,EAAA,EACAC,EAAA,EACAuB,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GAEApB,GAAAsB,GACA7B,EAAA,EACAC,EAAA,EACAuB,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,IAGA3B,EAAA,EACAC,EAAA,EACAuB,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GAKAnB,EAAAqB,GACA7B,EAAA,EACAC,EAAA,EACAuB,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GAEApB,EAAAsB,GACA7B,EAAA,EACAC,EAAA,EACAuB,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,IAGA3B,EAAA,EACAC,EAAA,EACAuB,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GASA,IAAAlB,EAAAF,EAAAP,EAAA9B,EAEAwC,EAAAF,EAAAP,EAAA/B,EACA4D,EAAAD,EAAAL,EAAAtD,EACAyC,EAAAJ,EAAAkB,EAAA,EAAAvD,EAEA0C,EAAAJ,EAAAkB,EAAA,EAAAxD,EACA6D,EAAAF,EAAAF,EAAA,EAAAzD,EACA8D,EAAAzB,EAAA,KAEA0B,EAAAzB,EAAA,KACA0B,EAAAL,EAAA,KAEAhB,EAAA,IAAAhF,EACAiF,EAAA,IAAAR,EACA6B,EAAA,IAAAP,EAEAb,EAAA,GAAAR,IAAAC,IAAAqB,IACA,GAAAd,EAAA,EAAAb,EAAA,MAA2B,CAC3B,IAAAc,EAAA,EAAAxB,EAAAqB,EAAAvB,EAAAwB,EAAAxB,EAAA6C,KAEAjC,GADAa,MACAA,GAAArB,EAAAsB,GAAAT,EAAAb,EAAAsB,EAAA,GAAAR,EAAAd,EAAAsB,EAAA,GAAAa,GAEA,IAAAZ,EAAA,GAAAR,IAAAC,IAAAoB,IACA,GAAAb,EAAA,EAAAd,EAAA,MAA2B,CAC3B,IAAAe,EAAA,EAAA1B,EAAAqB,EAAAb,EAAAV,EAAAwB,EAAAb,EAAAX,EAAA6C,EAAAX,KAEArB,GADAc,MACAA,GAAAvB,EAAAwB,GAAAT,EAAAf,EAAAwB,EAAA,GAAAR,EAAAhB,EAAAwB,EAAA,GAAAY,GAEA,IAAAX,EAAA,GAAAR,IAAAC,IAAAmB,IACA,GAAAZ,EAAA,EAAAf,EAAA,MAA2B,CAC3B,IAAAgB,EAAA,EAAA5B,EAAAqB,EAAAY,EAAAnC,EAAAwB,EAAAY,EAAApC,EAAA6C,EAAAR,KAEAvB,GADAe,MACAA,GAAAzB,EAAA0B,GAAAT,EAAAjB,EAAA0B,EAAA,GAAAR,EAAAlB,EAAA0B,EAAA,GAAAW,GAEA,IAAAK,EAAA,GAAAJ,IAAAC,IAAAC,IACA,GAAAE,EAAA,EAAAb,EAAA,MAA2B,CAC3B,IAAAc,EAAA,EAAA7C,EAAAqB,EAAA,EAAAvB,EAAAwB,EAAA,EAAAxB,EAAA6C,EAAA,KAEAZ,GADAa,MACAA,GAAA1C,EAAA2C,GAAAL,EAAAtC,EAAA2C,EAAA,GAAAJ,EAAAvC,EAAA2C,EAAA,GAAAH,GAIA,WAAAhC,EAAAC,EAAAC,EAAAmB,IAGAe,QAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAEAxC,EAAAC,EAAAC,EAAAmB,EAAAoB,EAoCA3C,EAAAC,EAAAuB,EAAAoB,EAEAnB,EAAAC,EAAAC,EAAAkB,EAEAC,EAAAC,EAAAC,EAAAC,EA1CA3D,EAAAF,KAAAE,KACAM,EAAAR,KAAAQ,MAIAhC,GAAA2E,EAAAC,EAAAC,EAAAC,GAAAvE,EAEAtC,EAAAkC,KAAAsC,MAAAkC,EAAA3E,GACA0C,EAAAvC,KAAAsC,MAAAmC,EAAA5E,GACAgE,EAAA7D,KAAAsC,MAAAoC,EAAA7E,GACA9B,EAAAiC,KAAAsC,MAAAqC,EAAA9E,GACAb,GAAAlB,EAAAyE,EAAAsB,EAAA9F,GAAAsC,EAOAmC,EAAAgC,GALA1G,EAAAkB,GAOAyD,EAAAgC,GALAlC,EAAAvD,GAMA8E,EAAAY,GALAb,EAAA7E,GAMAmG,EAAAR,GALA5G,EAAAiB,GAWAoG,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACA/C,EAAAC,EAAA2C,IAA2BC,IAC3B7C,EAAAsB,EAAAsB,IAA2BE,IAC3B9C,EAAA2C,EAAAC,IAA2BG,IAC3B9C,EAAAqB,EAAAuB,IAA2BC,IAC3B7C,EAAA0C,EAAAE,IAA2BE,IAC3BzB,EAAAqB,EAAAG,IAA2BC,IA2B3B,IAAA7C,EAAAF,GAfAP,EAAAmD,GAAA,OAeA/E,EAEAsC,EAAAF,GAhBAP,EAAAmD,GAAA,OAgBAhF,EACA0D,EAAAD,GAhBAL,EAAA6B,GAAA,OAgBAjF,EACAmF,EAAAL,GAhBAN,EAAAU,GAAA,OAgBAlF,EACAuC,EAAAJ,GAfAkB,EAAA0B,GAAA,OAeA,EAAA/E,EAEAwC,EAAAJ,GAhBAkB,EAAA0B,GAAA,OAgBA,EAAAhF,EACA2D,EAAAF,GAhBAF,EAAA0B,GAAA,OAgBA,EAAAjF,EACAoF,EAAAN,GAhBAL,EAAAS,GAAA,OAgBA,EAAAlF,EACA4D,EAAAzB,GAfAuC,EAAAK,GAAA,OAeA,EAAA/E,EAEA6D,EAAAzB,GAhBAuC,EAAAK,GAAA,OAgBA,EAAAhF,EACA8D,EAAAL,GAhBAmB,EAAAK,GAAA,OAgBA,EAAAjF,EACAqF,EAAAP,GAhBAD,EAAAK,GAAA,OAgBA,EAAAlF,EACAsF,EAAAnD,EAAA,IAAAnC,EAEAuF,EAAAnD,EAAA,IAAApC,EACAwF,EAAA/B,EAAA,IAAAzD,EACAyF,GAAAX,EAAA,IAAA9E,EAEAyC,GAAA,IAAAhF,EACAiF,GAAA,IAAAR,EACA6B,GAAA,IAAAP,EACAkC,GAAA,IAAAhI,EAEAiF,GAAA,GAAAR,IAAAC,IAAAqB,IAAAqB,IACA,GAAAnC,GAAA,EAAAb,EAAA,MAA2B,CAC3B,IAAAc,GAAA1B,EAAAuB,GAAAvB,EAAAwB,GAAAxB,EAAA6C,GAAA7C,EAAAwE,OAAA,KAEA5D,GADAa,QACAA,IAAAnB,EAAAoB,IAAAT,EAAAX,EAAAoB,GAAA,GAAAR,EAAAZ,EAAAoB,GAAA,GAAAa,EAAAjC,EAAAoB,GAAA,GAAAkC,GAEA,IAAAjC,GAAA,GAAAR,IAAAC,IAAAoB,IAAAyB,IACA,GAAAtC,GAAA,EAAAd,EAAA,MAA2B,CAC3B,IAAAe,GAAA5B,EAAAuB,GAAAb,EAAAV,EAAAwB,GAAAb,EAAAX,EAAA6C,GAAAX,EAAAlC,EAAAwE,GAAAlB,MAAA,KAEAzC,GADAc,QACAA,IAAArB,EAAAsB,IAAAT,EAAAb,EAAAsB,GAAA,GAAAR,EAAAd,EAAAsB,GAAA,GAAAY,EAAAlC,EAAAsB,GAAA,GAAAqC,GAEA,IAAApC,GAAA,GAAAR,IAAAC,IAAAmB,IAAAyB,IACA,GAAArC,GAAA,EAAAf,EAAA,MAA2B,CAC3B,IAAAgB,GAAA9B,EAAAuB,GAAAY,EAAAnC,EAAAwB,GAAAY,EAAApC,EAAA6C,GAAAR,EAAArC,EAAAwE,GAAAjB,MAAA,KAEAzC,GADAe,QACAA,IAAAvB,EAAAwB,IAAAT,EAAAf,EAAAwB,GAAA,GAAAR,EAAAhB,EAAAwB,GAAA,GAAAW,EAAAnC,EAAAwB,GAAA,GAAAoC,GAEA,IAAApB,GAAA,GAAAJ,IAAAC,IAAAC,IAAAuB,IACA,GAAArB,GAAA,EAAAb,EAAA,MAA2B,CAC3B,IAAAc,GAAA/C,EAAAuB,GAAAiC,EAAAxD,EAAAwB,GAAAiC,EAAAzD,EAAA6C,GAAAa,EAAA1D,EAAAwE,GAAAb,MAAA,KAEA1B,GADAa,QACAA,IAAAxC,EAAAyC,IAAAL,EAAApC,EAAAyC,GAAA,GAAAJ,EAAArC,EAAAyC,GAAA,GAAAH,EAAAtC,EAAAyC,GAAA,GAAAoB,GAEA,IAAAM,GAAA,GAAAL,IAAAC,IAAAC,IAAAC,MACA,GAAAE,GAAA,EAAApB,EAAA,MAA2B,CAC3B,IAAAqB,GAAA1E,EAAAuB,GAAA,EAAAvB,EAAAwB,GAAA,EAAAxB,EAAA6C,GAAA,EAAA7C,EAAAwE,GAAA,WAEAnB,GADAoB,QACAA,IAAAnE,EAAAoE,IAAAN,EAAA9D,EAAAoE,GAAA,GAAAL,EAAA/D,EAAAoE,GAAA,GAAAJ,EAAAhE,EAAAoE,GAAA,GAAAH,IAGA,WAAA3D,EAAAC,EAAAC,EAAAmB,EAAAoB,KAsBAtE,EAAA4F,uBAAA5E,OAkEG6E,KAFgDrG,EAAA,WACnD,OAAAQ,GACGrC,KAAAL,EAAAF,EAAAE,EAAAC,QAAAD,QAAAkC,GAEiClC,EAAA0C,eAIpCzC,EAAAD,QAAA0C,EA1cA,kCC1Be,SAAA8F,EAAAC,EAAAvI,GACf,OCJe,SAAAuI,GACf,GAAAC,MAAAC,QAAAF,GAAA,OAAAA,EDGSG,CAAcH,IEJR,SAAAA,EAAAvI,GACf,IAAA2I,EAAA,GACAC,GAAA,EACAC,GAAA,EACAC,OAAAT,EAEA,IACA,QAAAU,EAAAC,EAAAT,EAAAxH,OAAAkI,cAA6CL,GAAAG,EAAAC,EAAAE,QAAAC,QAC7CR,EAAAS,KAAAL,EAAA9H,QAEAjB,GAAA2I,EAAA1F,SAAAjD,GAH4E4I,GAAA,IAKzE,MAAAS,GACHR,GAAA,EACAC,EAAAO,EACG,QACH,IACAT,GAAA,MAAAI,EAAA,QAAAA,EAAA,SACK,QACL,GAAAH,EAAA,MAAAC,GAIA,OAAAH,EFnBgCW,CAAoBf,EAAAvI,IGJrC,WACf,UAAAuJ,UAAA,wDHGgEC,8BIDhE,SAAAC,KAEA/I,OAAAgJ,OAAAD,EAAA7H,UAAA,CACA+H,iBAAA,SAAAC,EAAAC,QACAxB,IAAA9E,KAAAuG,aAAAvG,KAAAuG,WAAA,IACA,IAAAC,EAAAxG,KAAAuG,gBAEAzB,IAAA0B,EAAAH,KACAG,EAAAH,GAAA,KAGA,IAAAG,EAAAH,GAAAI,QAAAH,IACAE,EAAAH,GAAAR,KAAAS,IAGAI,iBAAA,SAAAL,EAAAC,GACA,QAAAxB,IAAA9E,KAAAuG,WAAA,SACA,IAAAC,EAAAxG,KAAAuG,WACA,YAAAzB,IAAA0B,EAAAH,KAAA,IAAAG,EAAAH,GAAAI,QAAAH,IAEAK,oBAAA,SAAAN,EAAAC,GACA,QAAAxB,IAAA9E,KAAAuG,WAAA,CACA,IACAK,EADA5G,KAAAuG,WACAF,GAEA,QAAAvB,IAAA8B,EAAA,CACA,IAAAC,EAAAD,EAAAH,QAAAH,IAEA,IAAAO,GACAD,EAAAE,OAAAD,EAAA,MAIAE,cAAA,SAAAC,GACA,QAAAlC,IAAA9E,KAAAuG,WAAA,CACA,IACAK,EADA5G,KAAAuG,WACAS,EAAAX,MAEA,QAAAvB,IAAA8B,EAAA,CACAI,EAAAC,OAAAjH,KAGA,IAFA,IAAAkH,EAAAN,EAAAO,MAAA,GAEA1K,EAAA,EAAAC,EAAAwK,EAAAxH,OAAuCjD,EAAAC,EAAOD,IAC9CyK,EAAAzK,GAAAG,KAAAoD,KAAAgH,QC1CA,IAAAI,EAAA,CACAC,QAAA1I,KAAA2I,GAAA,IACAC,QAAA,IAAA5I,KAAA2I,GACAE,aAAA,WAIA,IAFA,IAAAC,EAAA,GAEAhL,EAAA,EAAmBA,EAAA,IAASA,IAC5BgL,EAAAhL,MAAA,WAAAA,EAAAgD,SAAA,IAGA,kBACA,IAAAiI,EAAA,WAAA/I,KAAAQ,SAAA,EACAwI,EAAA,WAAAhJ,KAAAQ,SAAA,EACAyI,EAAA,WAAAjJ,KAAAQ,SAAA,EACA0I,EAAA,WAAAlJ,KAAAQ,SAAA,EAGA,OAFAsI,EAAA,IAAAC,GAAAD,EAAAC,GAAA,OAAAD,EAAAC,GAAA,QAAAD,EAAAC,GAAA,YAAAD,EAAA,IAAAE,GAAAF,EAAAE,GAAA,WAAAF,EAAAE,GAAA,UAAAF,EAAAE,GAAA,YAAAF,EAAA,GAAAG,EAAA,KAAAH,EAAAG,GAAA,WAAAH,EAAAG,GAAA,QAAAH,EAAAG,GAAA,QAAAH,EAAA,IAAAI,GAAAJ,EAAAI,GAAA,OAAAJ,EAAAI,GAAA,QAAAJ,EAAAI,GAAA,SAEAC,eAfA,GAkBAC,MAAA,SAAArK,EAAAsK,EAAAC,GACA,OAAAtJ,KAAAsJ,IAAAD,EAAArJ,KAAAqJ,IAAAC,EAAAvK,KAIAwK,gBAAA,SAAAhK,EAAArB,GACA,OAAAqB,EAAArB,QAGAsL,UAAA,SAAAhF,EAAAiF,EAAAC,EAAAC,EAAAC,GACA,OAAAD,GAAAnF,EAAAiF,IAAAG,EAAAD,IAAAD,EAAAD,IAGAI,KAAA,SAAArF,EAAAC,EAAAzF,GACA,SAAAA,GAAAwF,EAAAxF,EAAAyF,GAGAqF,WAAA,SAAAtF,EAAA6E,EAAAC,GACA,OAAA9E,GAAA6E,EAAA,EACA7E,GAAA8E,EAAA,GACA9E,KAAA6E,IAAAC,EAAAD,IACA7E,GAAA,IAAAA,IAEAuF,aAAA,SAAAvF,EAAA6E,EAAAC,GACA,OAAA9E,GAAA6E,EAAA,EACA7E,GAAA8E,EAAA,GACA9E,KAAA6E,IAAAC,EAAAD,IACA7E,QAAA,EAAAA,EAAA,SAGAwF,QAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAjK,KAAAsC,MAAAtC,KAAAQ,UAAA0J,EAAAD,EAAA,KAGAE,UAAA,SAAAF,EAAAC,GACA,OAAAD,EAAAjK,KAAAQ,UAAA0J,EAAAD,IAGAG,gBAAA,SAAAC,GACA,OAAAA,GAAA,GAAArK,KAAAQ,WAEA8J,SAAA,SAAAC,GACA,OAAAA,EAAA9B,EAAAC,SAEA8B,SAAA,SAAAC,GACA,OAAAA,EAAAhC,EAAAG,SAEA8B,aAAA,SAAA3L,GACA,YAAAA,IAAA,QAAAA,GAEA4L,eAAA,SAAA5L,GACA,OAAAiB,KAAA4K,IAAA,EAAA5K,KAAA6K,KAAA7K,KAAA8K,IAAA/L,GAAAiB,KAAA+K,OAEAC,gBAAA,SAAAjM,GACA,OAAAiB,KAAA4K,IAAA,EAAA5K,KAAAsC,MAAAtC,KAAA8K,IAAA/L,GAAAiB,KAAA+K,QC1EAE,EAAA,CACAC,UAAA,SACAC,aAAA,SACAC,KAAA,MACAC,WAAA,QACAC,MAAA,SACAC,MAAA,SACAC,OAAA,SACAC,MAAA,EACAC,eAAA,SACAC,KAAA,IACAC,WAAA,QACAC,MAAA,SACAC,UAAA,SACAC,UAAA,QACAC,WAAA,QACAC,UAAA,SACAC,MAAA,SACAC,eAAA,QACAC,SAAA,SACAC,QAAA,SACAC,KAAA,MACAC,SAAA,IACAC,SAAA,MACAC,cAAA,SACAC,SAAA,SACAC,UAAA,MACAC,SAAA,SACAC,UAAA,SACAC,YAAA,QACAC,eAAA,QACAC,WAAA,SACAC,WAAA,SACAC,QAAA,QACAC,WAAA,SACAC,aAAA,QACAC,cAAA,QACAC,cAAA,QACAC,cAAA,QACAC,cAAA,MACAC,WAAA,QACAC,SAAA,SACAC,YAAA,MACAC,QAAA,QACAC,QAAA,QACAC,WAAA,QACAC,UAAA,SACAC,YAAA,SACAC,YAAA,QACAC,QAAA,SACAC,UAAA,SACAC,WAAA,SACAC,KAAA,SACAC,UAAA,SACAC,KAAA,QACAC,MAAA,MACAC,YAAA,SACAC,KAAA,QACAC,SAAA,SACAC,QAAA,SACAC,UAAA,SACAC,OAAA,QACAC,MAAA,SACAC,MAAA,SACAC,SAAA,SACAC,cAAA,SACAC,UAAA,QACAC,aAAA,SACAC,UAAA,SACAC,WAAA,SACAC,UAAA,SACAC,qBAAA,SACAC,UAAA,SACAC,WAAA,QACAC,UAAA,SACAC,UAAA,SACAC,YAAA,SACAC,cAAA,QACAC,aAAA,QACAC,eAAA,QACAC,eAAA,QACAC,eAAA,SACAC,YAAA,SACAC,KAAA,MACAC,UAAA,QACAC,MAAA,SACAC,QAAA,SACAC,OAAA,QACAC,iBAAA,QACAC,WAAA,IACAC,aAAA,SACAC,aAAA,QACAC,eAAA,QACAC,gBAAA,QACAC,kBAAA,MACAC,gBAAA,QACAC,gBAAA,SACAC,aAAA,QACAC,UAAA,SACAC,UAAA,SACAC,SAAA,SACAC,YAAA,SACAC,KAAA,IACAC,QAAA,SACAC,MAAA,QACAC,UAAA,QACAC,OAAA,SACAC,UAAA,SACAC,OAAA,SACAC,cAAA,SACAC,UAAA,SACAC,cAAA,SACAC,cAAA,SACAC,WAAA,SACAC,UAAA,SACAC,KAAA,SACAC,KAAA,SACAC,KAAA,SACAC,WAAA,SACAC,OAAA,QACAC,cAAA,QACAC,IAAA,SACAC,UAAA,SACAC,UAAA,QACAC,YAAA,QACAC,OAAA,SACAC,WAAA,SACAC,SAAA,QACAC,SAAA,SACAC,OAAA,SACAC,OAAA,SACAC,QAAA,QACAC,UAAA,QACAC,UAAA,QACAC,UAAA,QACAC,KAAA,SACAC,YAAA,MACAC,UAAA,QACAC,IAAA,SACAC,KAAA,MACAC,QAAA,SACAC,OAAA,SACAC,UAAA,QACAC,OAAA,SACAC,MAAA,SACAC,MAAA,SACAC,WAAA,SACAC,OAAA,SACAC,YAAA,UAGA,SAAAC,EAAA1V,EAAA2V,EAAAC,GACA,YAAArO,IAAAoO,QAAApO,IAAAqO,EAEAnT,KAAAoT,IAAA7V,GAGAyC,KAAAqT,OAAA9V,EAAA2V,EAAAC,GAGA,SAAAG,EAAA/U,EAAAgV,EAAA5V,GAGA,OAFAA,EAAA,IAAAA,GAAA,GACAA,EAAA,IAAAA,GAAA,GACAA,EAAA,IAAAY,EAAA,GAAAgV,EAAAhV,GAAAZ,EACAA,EAAA,GAAA4V,EACA5V,EAAA,IAAAY,EAAA,GAAAgV,EAAAhV,IAAA,IAAAZ,GACAY,EAGA,SAAAiV,EAAA1W,GACA,OAAAA,EAAA,mBAAAA,EAAA6B,KAAA4K,IAAA,YAAAzM,EAAA,iBAGA,SAAA2W,EAAA3W,GACA,OAAAA,EAAA,eAAAA,EAAA,MAAA6B,KAAA4K,IAAAzM,EAAA,aC3KA,SAAA4W,EAAAvQ,EAAAC,EAAAC,EAAAC,GACAtD,KAAA2T,GAAAxQ,GAAA,EACAnD,KAAA4T,GAAAxQ,GAAA,EACApD,KAAA6T,GAAAxQ,GAAA,EACArD,KAAA8T,QAAAhP,IAAAxB,IAAA,ECDA,SAAAyQ,EAAA5Q,EAAAC,EAAAC,GACArD,KAAAmD,KAAA,EACAnD,KAAAoD,KAAA,EACApD,KAAAqD,KAAA,ECPA,SAAA2Q,EAAAC,EAAAd,EAAArW,EAAAoX,EAAAC,EAAAC,GACApU,KAAAiU,IACAjU,KAAAmT,IACAnT,KAAAlD,IACAkD,KAAAkU,YAAAG,UAAAH,EAAA,IAA0DH,EAC1D/T,KAAAsU,cAAArP,MAAAC,QAAAgP,KAAA,GACAlU,KAAAmU,WAAAI,QAAAJ,EAAA,IAAoDlB,EACpDjT,KAAAwU,aAAAvP,MAAAC,QAAAiP,KAAA,GACAnU,KAAAoU,mBAAAtP,IAAAsP,IAAA,ECPA,SAAAK,IACAzU,KAAA0U,SAAA,oBAEA5U,UAAAJ,OAAA,GACAiV,QAAAC,MAAA,iFCNA,SAAAC,EAAA7M,EAAAC,GACAjI,KAAAgI,SAAAlD,IAAAkD,IAAA,IAA2C+L,EAAOe,aAClD9U,KAAAiI,SAAAnD,IAAAmD,IAAA,IAA2C8L,GAAOe,eCDlD,SAAAC,EAAAC,EAAAC,GACAjV,KAAAgV,YAAAlQ,IAAAkQ,IAAA,IAAoDjB,EACpD/T,KAAAiV,YAAAnQ,IAAAmQ,IAAA,ECKA,SAAAC,IACAlV,KAAA0U,SAAA,kCAEA5U,UAAAJ,OAAA,GACAiV,QAAAC,MAAA,iFCZA,SAAAO,EAAAhS,EAAAC,GACApD,KAAAmD,KAAA,EACAnD,KAAAoD,KAAA,ECEA,SAAAgS,EAAAjS,EAAAC,EAAAC,EAAAgS,GACArV,KAAA2T,GAAAxQ,GAAA,EACAnD,KAAA4T,GAAAxQ,GAAA,EACApD,KAAA6T,GAAAxQ,GAAA,EACArD,KAAAsV,OAAAD,GAAAD,EAAAG,aCXA,SAAAC,IACAxV,KAAAyV,KAAA,EVkLAtY,OAAAgJ,OAAA8M,EAAA5U,UAAA,CACAkW,SAAA,EACAhX,EAAA,EACA2V,EAAA,EACAC,EAAA,EACAC,IAAA,SAAA1V,GASA,OARAA,KAAA6W,QACAvU,KAAA0V,KAAAhY,GACK,kBAAAA,EACLsC,KAAA2V,OAAAjY,GACK,kBAAAA,GACLsC,KAAA4V,SAAAlY,GAGAsC,MAEA6V,UAAA,SAAAC,GAIA,OAHA9V,KAAAzC,EAAAuY,EACA9V,KAAAkT,EAAA4C,EACA9V,KAAAmT,EAAA2C,EACA9V,MAEA2V,OAAA,SAAAI,GAKA,OAJAA,EAAApX,KAAAsC,MAAA8U,GACA/V,KAAAzC,GAAAwY,GAAA,YACA/V,KAAAkT,GAAA6C,GAAA,WACA/V,KAAAmT,GAAA,IAAA4C,GAAA,IACA/V,MAEAqT,OAAA,SAAA9V,EAAA2V,EAAAC,GAIA,OAHAnT,KAAAzC,IACAyC,KAAAkT,IACAlT,KAAAmT,IACAnT,MAEAgW,OAAA,SAAArW,EAAAnB,EAAA9B,GAMA,GAJAiD,EAAQyH,EAAKc,gBAAAvI,EAAA,GACbnB,EAAQ4I,EAAKW,MAAAvJ,EAAA,KACb9B,EAAQ0K,EAAKW,MAAArL,EAAA,KAEb,IAAA8B,EACAwB,KAAAzC,EAAAyC,KAAAkT,EAAAlT,KAAAmT,EAAAzW,MACK,CACL,IAAA6B,EAAA7B,GAAA,GAAAA,GAAA,EAAA8B,GAAA9B,EAAA8B,EAAA9B,EAAA8B,EACA+U,EAAA,EAAA7W,EAAA6B,EACAyB,KAAAzC,EAAA+V,EAAAC,EAAAhV,EAAAoB,EAAA,KACAK,KAAAkT,EAAAI,EAAAC,EAAAhV,EAAAoB,GACAK,KAAAmT,EAAAG,EAAAC,EAAAhV,EAAAoB,EAAA,KAGA,OAAAK,MAEA4V,SAAA,SAAAK,GACA,SAAAC,EAAAC,QACArR,IAAAqR,GAEAC,WAAAD,GAAA,GACAxB,QAAA0B,KAAA,mCAAAJ,EAAA,qBAIA,IAAApZ,EAEA,GAAAA,EAAA,kCAAAyZ,KAAAL,GAAA,CAEA,IAAA9B,EACAnX,EAAAH,EAAA,GACA0Z,EAAA1Z,EAAA,GAEA,OAAAG,GACA,UACA,WACA,GAAAmX,EAAA,gEAAAmC,KAAAC,GAMA,OAJAvW,KAAAzC,EAAAoB,KAAAqJ,IAAA,IAAAwO,SAAArC,EAAA,YACAnU,KAAAkT,EAAAvU,KAAAqJ,IAAA,IAAAwO,SAAArC,EAAA,YACAnU,KAAAmT,EAAAxU,KAAAqJ,IAAA,IAAAwO,SAAArC,EAAA,YACA+B,EAAA/B,EAAA,IACAnU,KAGA,GAAAmU,EAAA,sEAAAmC,KAAAC,GAMA,OAJAvW,KAAAzC,EAAAoB,KAAAqJ,IAAA,IAAAwO,SAAArC,EAAA,YACAnU,KAAAkT,EAAAvU,KAAAqJ,IAAA,IAAAwO,SAAArC,EAAA,YACAnU,KAAAmT,EAAAxU,KAAAqJ,IAAA,IAAAwO,SAAArC,EAAA,YACA+B,EAAA/B,EAAA,IACAnU,KAGA,MAEA,UACA,WACA,GAAAmU,EAAA,gFAAAmC,KAAAC,GAAA,CAEA,IAAA5W,EAAAyW,WAAAjC,EAAA,QACA3V,EAAAgY,SAAArC,EAAA,WACAzX,EAAA8Z,SAAArC,EAAA,WAEA,OADA+B,EAAA/B,EAAA,IACAnU,KAAAgW,OAAArW,EAAAnB,EAAA9B,UAKK,GAAAG,EAAA,qBAAAyZ,KAAAL,GAAA,CAEL,IAAAF,EACAU,GADAV,EAAAlZ,EAAA,IACA6C,OAEA,OAAA+W,EAKA,OAHAzW,KAAAzC,EAAAiZ,SAAAT,EAAAW,OAAA,GAAAX,EAAAW,OAAA,WACA1W,KAAAkT,EAAAsD,SAAAT,EAAAW,OAAA,GAAAX,EAAAW,OAAA,WACA1W,KAAAmT,EAAAqD,SAAAT,EAAAW,OAAA,GAAAX,EAAAW,OAAA,WACA1W,KACO,OAAAyW,EAKP,OAHAzW,KAAAzC,EAAAiZ,SAAAT,EAAAW,OAAA,GAAAX,EAAAW,OAAA,WACA1W,KAAAkT,EAAAsD,SAAAT,EAAAW,OAAA,GAAAX,EAAAW,OAAA,WACA1W,KAAAmT,EAAAqD,SAAAT,EAAAW,OAAA,GAAAX,EAAAW,OAAA,WACA1W,KAIAiW,KAAAvW,OAAA,SAIAoF,KAFAiR,EAAAnM,EAAAqM,IAIAjW,KAAA2V,OAAAI,GAGApB,QAAA0B,KAAA,8BAAAJ,IAIA,OAAAjW,MAEA2W,MAAA,WACA,WAAA3W,KAAA4W,YAAA5W,KAAAzC,EAAAyC,KAAAkT,EAAAlT,KAAAmT,IAEAuC,KAAA,SAAAvB,GAIA,OAHAnU,KAAAzC,EAAA4W,EAAA5W,EACAyC,KAAAkT,EAAAiB,EAAAjB,EACAlT,KAAAmT,EAAAgB,EAAAhB,EACAnT,MAEA6W,kBAAA,SAAA1C,EAAA2C,GAKA,YAJAhS,IAAAgS,MAAA,GACA9W,KAAAzC,EAAAoB,KAAA4K,IAAA4K,EAAA5W,EAAAuZ,GACA9W,KAAAkT,EAAAvU,KAAA4K,IAAA4K,EAAAjB,EAAA4D,GACA9W,KAAAmT,EAAAxU,KAAA4K,IAAA4K,EAAAhB,EAAA2D,GACA9W,MAEA+W,kBAAA,SAAA5C,EAAA2C,QACAhS,IAAAgS,MAAA,GACA,IAAAE,EAAAF,EAAA,IAAAA,EAAA,EAIA,OAHA9W,KAAAzC,EAAAoB,KAAA4K,IAAA4K,EAAA5W,EAAAyZ,GACAhX,KAAAkT,EAAAvU,KAAA4K,IAAA4K,EAAAjB,EAAA8D,GACAhX,KAAAmT,EAAAxU,KAAA4K,IAAA4K,EAAAhB,EAAA6D,GACAhX,MAEAiX,qBAAA,SAAAH,GAEA,OADA9W,KAAA6W,kBAAA7W,KAAA8W,GACA9W,MAEAkX,qBAAA,SAAAJ,GAEA,OADA9W,KAAA+W,kBAAA/W,KAAA8W,GACA9W,MAEAmX,iBAAA,SAAAhD,GAIA,OAHAnU,KAAAzC,EAAAiW,EAAAW,EAAA5W,GACAyC,KAAAkT,EAAAM,EAAAW,EAAAjB,GACAlT,KAAAmT,EAAAK,EAAAW,EAAAhB,GACAnT,MAEAoX,iBAAA,SAAAjD,GAIA,OAHAnU,KAAAzC,EAAAkW,EAAAU,EAAA5W,GACAyC,KAAAkT,EAAAO,EAAAU,EAAAjB,GACAlT,KAAAmT,EAAAM,EAAAU,EAAAhB,GACAnT,MAEAqX,oBAAA,WAEA,OADArX,KAAAmX,iBAAAnX,MACAA,MAEAsX,oBAAA,WAEA,OADAtX,KAAAoX,iBAAApX,MACAA,MAEAuX,OAAA,WACA,WAAAvX,KAAAzC,GAAA,OAAAyC,KAAAkT,GAAA,MAAAlT,KAAAmT,GAAA,GAEAqE,aAAA,WACA,gBAAAxX,KAAAuX,SAAA9X,SAAA,KAAA0H,OAAA,IAEAsQ,OAAA,SAAAxQ,QAEAnC,IAAAmC,IACA0N,QAAA0B,KAAA,iDACApP,EAAA,CACAtH,EAAA,EACAnB,EAAA,EACA9B,EAAA,IAIA,IAKAgb,EAAAC,EALApa,EAAAyC,KAAAzC,EACA2V,EAAAlT,KAAAkT,EACAC,EAAAnT,KAAAmT,EACAlL,EAAAtJ,KAAAsJ,IAAA1K,EAAA2V,EAAAC,GACAnL,EAAArJ,KAAAqJ,IAAAzK,EAAA2V,EAAAC,GAEAyE,GAAA5P,EAAAC,GAAA,EAEA,GAAAD,IAAAC,EACAyP,EAAA,EACAC,EAAA,MACK,CACL,IAAAE,EAAA5P,EAAAD,EAGA,OAFA2P,EAAAC,GAAA,GAAAC,GAAA5P,EAAAD,GAAA6P,GAAA,EAAA5P,EAAAD,GAEAC,GACA,KAAA1K,EACAma,GAAAxE,EAAAC,GAAA0E,GAAA3E,EAAAC,EAAA,KACA,MAEA,KAAAD,EACAwE,GAAAvE,EAAA5V,GAAAsa,EAAA,EACA,MAEA,KAAA1E,EACAuE,GAAAna,EAAA2V,GAAA2E,EAAA,EAIAH,GAAA,EAMA,OAHAzQ,EAAAtH,EAAA+X,EACAzQ,EAAAzI,EAAAmZ,EACA1Q,EAAAvK,EAAAkb,EACA3Q,GAEA6Q,SAAA,WACA,kBAAA9X,KAAAzC,EAAA,YAAAyC,KAAAkT,EAAA,YAAAlT,KAAAmT,EAAA,QAEA4E,UAAA,WACA,IAAAC,EAAA,GACA,gBAAArY,EAAAnB,EAAA9B,GAMA,OALAsD,KAAAyX,OAAAO,GACAA,EAAArY,KACAqY,EAAAxZ,KACAwZ,EAAAtb,KACAsD,KAAAgW,OAAAgC,EAAArY,EAAAqY,EAAAxZ,EAAAwZ,EAAAtb,GACAsD,MARA,GAWAiY,IAAA,SAAA9D,GAIA,OAHAnU,KAAAzC,GAAA4W,EAAA5W,EACAyC,KAAAkT,GAAAiB,EAAAjB,EACAlT,KAAAmT,GAAAgB,EAAAhB,EACAnT,MAEAkY,UAAA,SAAAC,EAAAC,GAIA,OAHApY,KAAAzC,EAAA4a,EAAA5a,EAAA6a,EAAA7a,EACAyC,KAAAkT,EAAAiF,EAAAjF,EAAAkF,EAAAlF,EACAlT,KAAAmT,EAAAgF,EAAAhF,EAAAiF,EAAAjF,EACAnT,MAEAqY,UAAA,SAAA7Z,GAIA,OAHAwB,KAAAzC,GAAAiB,EACAwB,KAAAkT,GAAA1U,EACAwB,KAAAmT,GAAA3U,EACAwB,MAEAsY,IAAA,SAAAnE,GAIA,OAHAnU,KAAAzC,EAAAoB,KAAAsJ,IAAA,EAAAjI,KAAAzC,EAAA4W,EAAA5W,GACAyC,KAAAkT,EAAAvU,KAAAsJ,IAAA,EAAAjI,KAAAkT,EAAAiB,EAAAjB,GACAlT,KAAAmT,EAAAxU,KAAAsJ,IAAA,EAAAjI,KAAAmT,EAAAgB,EAAAhB,GACAnT,MAEAuY,SAAA,SAAApE,GAIA,OAHAnU,KAAAzC,GAAA4W,EAAA5W,EACAyC,KAAAkT,GAAAiB,EAAAjB,EACAlT,KAAAmT,GAAAgB,EAAAhB,EACAnT,MAEAwY,eAAA,SAAAha,GAIA,OAHAwB,KAAAzC,GAAAiB,EACAwB,KAAAkT,GAAA1U,EACAwB,KAAAmT,GAAA3U,EACAwB,MAEAwI,KAAA,SAAA2L,EAAAsE,GAIA,OAHAzY,KAAAzC,IAAA4W,EAAA5W,EAAAyC,KAAAzC,GAAAkb,EACAzY,KAAAkT,IAAAiB,EAAAjB,EAAAlT,KAAAkT,GAAAuF,EACAzY,KAAAmT,IAAAgB,EAAAhB,EAAAnT,KAAAmT,GAAAsF,EACAzY,MAEA0Y,QAAA,WACA,IAAAC,EAAA,CACAhZ,EAAA,EACAnB,EAAA,EACA9B,EAAA,GAEAkc,EAAA,CACAjZ,EAAA,EACAnB,EAAA,EACA9B,EAAA,GAEA,gBAAAyX,EAAAsE,GACAzY,KAAAyX,OAAAkB,GACAxE,EAAAsD,OAAAmB,GAEA,IAAAjZ,EAAcyH,EAAKoB,KAAAmQ,EAAAhZ,EAAAiZ,EAAAjZ,EAAA8Y,GAEnBja,EAAc4I,EAAKoB,KAAAmQ,EAAAna,EAAAoa,EAAApa,EAAAia,GAEnB/b,EAAc0K,EAAKoB,KAAAmQ,EAAAjc,EAAAkc,EAAAlc,EAAA+b,GAGnB,OADAzY,KAAAgW,OAAArW,EAAAnB,EAAA9B,GACAsD,MAtBA,GAyBA6Y,OAAA,SAAA/b,GACA,OAAAA,EAAAS,IAAAyC,KAAAzC,GAAAT,EAAAoW,IAAAlT,KAAAkT,GAAApW,EAAAqW,IAAAnT,KAAAmT,GAEA2F,UAAA,SAAA5R,EAAA6R,GAKA,YAJAjU,IAAAiU,MAAA,GACA/Y,KAAAzC,EAAA2J,EAAA6R,GACA/Y,KAAAkT,EAAAhM,EAAA6R,EAAA,GACA/Y,KAAAmT,EAAAjM,EAAA6R,EAAA,GACA/Y,MAEAgZ,QAAA,SAAA9R,EAAA6R,GAMA,YALAjU,IAAAoC,MAAA,SACApC,IAAAiU,MAAA,GACA7R,EAAA6R,GAAA/Y,KAAAzC,EACA2J,EAAA6R,EAAA,GAAA/Y,KAAAkT,EACAhM,EAAA6R,EAAA,GAAA/Y,KAAAmT,EACAjM,GAEA+R,OAAA,WACA,OAAAjZ,KAAAuX,YClgBApa,OAAAgJ,OAAAuN,EAAA,CACAwF,MAAA,SAAAC,EAAAC,EAAAC,EAAA1b,GACA,OAAA0b,EAAA3D,KAAAyD,GAAAD,MAAAE,EAAAzb,IAEA2b,UAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAjc,GAEA,IAAAwD,EAAAsY,EAAAC,EAAA,GACAtY,EAAAqY,EAAAC,EAAA,GACAjX,EAAAgX,EAAAC,EAAA,GACA5V,EAAA2V,EAAAC,EAAA,GACArY,EAAAsY,EAAAC,EAAA,GACAtY,EAAAqY,EAAAC,EAAA,GACAlX,EAAAiX,EAAAC,EAAA,GACAzV,EAAAwV,EAAAC,EAAA,GAEA,GAAA9V,IAAAK,GAAAhD,IAAAE,GAAAD,IAAAE,GAAAmB,IAAAC,EAAA,CACA,IAAAlE,EAAA,EAAAb,EACAkc,EAAA1Y,EAAAE,EAAAD,EAAAE,EAAAmB,EAAAC,EAAAoB,EAAAK,EACA2V,EAAAD,GAAA,OACAE,EAAA,EAAAF,IAEA,GAAAE,EAAAC,OAAAC,QAAA,CACA,IAAAC,EAAAvb,KAAAC,KAAAmb,GACAI,EAAAxb,KAAAyb,MAAAF,EAAAL,EAAAC,GACAtb,EAAAG,KAAAub,IAAA1b,EAAA2b,GAAAD,EACAvc,EAAAgB,KAAAub,IAAAvc,EAAAwc,GAAAD,EAGA,IAAAG,EAAA1c,EAAAmc,EAMA,GALA3Y,IAAA3C,EAAA6C,EAAAgZ,EACAjZ,IAAA5C,EAAA8C,EAAA+Y,EACA5X,IAAAjE,EAAAkE,EAAA2X,EACAvW,IAAAtF,EAAA2F,EAAAkW,EAEA7b,IAAA,EAAAb,EAAA,CACA,IAAA2c,EAAA,EAAA3b,KAAAC,KAAAuC,IAAAC,IAAAqB,IAAAqB,KACA3C,GAAAmZ,EACAlZ,GAAAkZ,EACA7X,GAAA6X,EACAxW,GAAAwW,GAIAf,EAAAC,GAAArY,EACAoY,EAAAC,EAAA,GAAApY,EACAmY,EAAAC,EAAA,GAAA/W,EACA8W,EAAAC,EAAA,GAAA1V,KAGA3G,OAAAod,iBAAA7G,EAAArV,UAAA,CACA8E,EAAA,CACA7F,IAAA,WACA,OAAA0C,KAAA2T,IAEAP,IAAA,SAAA1V,GACAsC,KAAA2T,GAAAjW,EAEAsC,KAAAwa,sBAGApX,EAAA,CACA9F,IAAA,WACA,OAAA0C,KAAA4T,IAEAR,IAAA,SAAA1V,GACAsC,KAAA4T,GAAAlW,EAEAsC,KAAAwa,sBAGAnX,EAAA,CACA/F,IAAA,WACA,OAAA0C,KAAA6T,IAEAT,IAAA,SAAA1V,GACAsC,KAAA6T,GAAAnW,EAEAsC,KAAAwa,sBAGAlX,EAAA,CACAhG,IAAA,WACA,OAAA0C,KAAA8T,IAEAV,IAAA,SAAA1V,GACAsC,KAAA8T,GAAApW,EAEAsC,KAAAwa,wBAIArd,OAAAgJ,OAAAuN,EAAArV,UAAA,CACAoc,cAAA,EACArH,IAAA,SAAAjQ,EAAAC,EAAAC,EAAAC,GAQA,OAPAtD,KAAA2T,GAAAxQ,EACAnD,KAAA4T,GAAAxQ,EACApD,KAAA6T,GAAAxQ,EACArD,KAAA8T,GAAAxQ,EAEAtD,KAAAwa,oBAEAxa,MAEA2W,MAAA,WACA,WAAA3W,KAAA4W,YAAA5W,KAAA2T,GAAA3T,KAAA4T,GAAA5T,KAAA6T,GAAA7T,KAAA8T,KAEA4B,KAAA,SAAAgF,GAQA,OAPA1a,KAAA2T,GAAA+G,EAAAvX,EACAnD,KAAA4T,GAAA8G,EAAAtX,EACApD,KAAA6T,GAAA6G,EAAArX,EACArD,KAAA8T,GAAA4G,EAAApX,EAEAtD,KAAAwa,oBAEAxa,MAEA2a,aAAA,SAAAC,EAAAC,GACA,IAAAD,MAAAE,QACA,UAAAC,MAAA,oGAGA,IAAA5X,EAAAyX,EAAAjH,GACAvQ,EAAAwX,EAAAhH,GACAvQ,EAAAuX,EAAA/G,GACAwB,EAAAuF,EAAAvF,MAIAwE,EAAAlb,KAAAkb,IACAK,EAAAvb,KAAAub,IACAc,EAAAnB,EAAA1W,EAAA,GACA8X,EAAApB,EAAAzW,EAAA,GACA8X,EAAArB,EAAAxW,EAAA,GACAhE,EAAA6a,EAAA/W,EAAA,GACA7D,EAAA4a,EAAA9W,EAAA,GACA+X,EAAAjB,EAAA7W,EAAA,GAmCA,MAjCA,QAAAgS,GACArV,KAAA2T,GAAAtU,EAAA4b,EAAAC,EAAAF,EAAA1b,EAAA6b,EACAnb,KAAA4T,GAAAoH,EAAA1b,EAAA4b,EAAA7b,EAAA4b,EAAAE,EACAnb,KAAA6T,GAAAmH,EAAAC,EAAAE,EAAA9b,EAAAC,EAAA4b,EACAlb,KAAA8T,GAAAkH,EAAAC,EAAAC,EAAA7b,EAAAC,EAAA6b,GACK,QAAA9F,GACLrV,KAAA2T,GAAAtU,EAAA4b,EAAAC,EAAAF,EAAA1b,EAAA6b,EACAnb,KAAA4T,GAAAoH,EAAA1b,EAAA4b,EAAA7b,EAAA4b,EAAAE,EACAnb,KAAA6T,GAAAmH,EAAAC,EAAAE,EAAA9b,EAAAC,EAAA4b,EACAlb,KAAA8T,GAAAkH,EAAAC,EAAAC,EAAA7b,EAAAC,EAAA6b,GACK,QAAA9F,GACLrV,KAAA2T,GAAAtU,EAAA4b,EAAAC,EAAAF,EAAA1b,EAAA6b,EACAnb,KAAA4T,GAAAoH,EAAA1b,EAAA4b,EAAA7b,EAAA4b,EAAAE,EACAnb,KAAA6T,GAAAmH,EAAAC,EAAAE,EAAA9b,EAAAC,EAAA4b,EACAlb,KAAA8T,GAAAkH,EAAAC,EAAAC,EAAA7b,EAAAC,EAAA6b,GACK,QAAA9F,GACLrV,KAAA2T,GAAAtU,EAAA4b,EAAAC,EAAAF,EAAA1b,EAAA6b,EACAnb,KAAA4T,GAAAoH,EAAA1b,EAAA4b,EAAA7b,EAAA4b,EAAAE,EACAnb,KAAA6T,GAAAmH,EAAAC,EAAAE,EAAA9b,EAAAC,EAAA4b,EACAlb,KAAA8T,GAAAkH,EAAAC,EAAAC,EAAA7b,EAAAC,EAAA6b,GACK,QAAA9F,GACLrV,KAAA2T,GAAAtU,EAAA4b,EAAAC,EAAAF,EAAA1b,EAAA6b,EACAnb,KAAA4T,GAAAoH,EAAA1b,EAAA4b,EAAA7b,EAAA4b,EAAAE,EACAnb,KAAA6T,GAAAmH,EAAAC,EAAAE,EAAA9b,EAAAC,EAAA4b,EACAlb,KAAA8T,GAAAkH,EAAAC,EAAAC,EAAA7b,EAAAC,EAAA6b,GACK,QAAA9F,IACLrV,KAAA2T,GAAAtU,EAAA4b,EAAAC,EAAAF,EAAA1b,EAAA6b,EACAnb,KAAA4T,GAAAoH,EAAA1b,EAAA4b,EAAA7b,EAAA4b,EAAAE,EACAnb,KAAA6T,GAAAmH,EAAAC,EAAAE,EAAA9b,EAAAC,EAAA4b,EACAlb,KAAA8T,GAAAkH,EAAAC,EAAAC,EAAA7b,EAAAC,EAAA6b,IAGA,IAAAN,GAAA7a,KAAAwa,oBACAxa,MAEAob,iBAAA,SAAAC,EAAAC,GAGA,IAAAC,EAAAD,EAAA,EACA9c,EAAAG,KAAAub,IAAAqB,GAQA,OAPAvb,KAAA2T,GAAA0H,EAAAlY,EAAA3E,EACAwB,KAAA4T,GAAAyH,EAAAjY,EAAA5E,EACAwB,KAAA6T,GAAAwH,EAAAhY,EAAA7E,EACAwB,KAAA8T,GAAAnV,KAAAkb,IAAA0B,GAEAvb,KAAAwa,oBAEAxa,MAEAwb,sBAAA,SAAA3e,GAGA,IAWA2B,EAXAid,EAAA5e,EAAA6X,SACAgH,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GACAM,EAAAN,EAAA,GACAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GACAS,EAAAT,EAAA,IACAU,EAAAT,EAAAI,EAAAI,EA+BA,OA5BAC,EAAA,GACA3d,EAAA,GAAAG,KAAAC,KAAAud,EAAA,GACAnc,KAAA8T,GAAA,IAAAtV,EACAwB,KAAA2T,IAAAsI,EAAAF,GAAAvd,EACAwB,KAAA4T,IAAAgI,EAAAI,GAAAxd,EACAwB,KAAA6T,IAAAgI,EAAAF,GAAAnd,GACKkd,EAAAI,GAAAJ,EAAAQ,GACL1d,EAAA,EAAAG,KAAAC,KAAA,EAAA8c,EAAAI,EAAAI,GACAlc,KAAA8T,IAAAmI,EAAAF,GAAAvd,EACAwB,KAAA2T,GAAA,IAAAnV,EACAwB,KAAA4T,IAAA+H,EAAAE,GAAArd,EACAwB,KAAA6T,IAAA+H,EAAAI,GAAAxd,GACKsd,EAAAI,GACL1d,EAAA,EAAAG,KAAAC,KAAA,EAAAkd,EAAAJ,EAAAQ,GACAlc,KAAA8T,IAAA8H,EAAAI,GAAAxd,EACAwB,KAAA2T,IAAAgI,EAAAE,GAAArd,EACAwB,KAAA4T,GAAA,IAAApV,EACAwB,KAAA6T,IAAAkI,EAAAE,GAAAzd,IAEAA,EAAA,EAAAG,KAAAC,KAAA,EAAAsd,EAAAR,EAAAI,GACA9b,KAAA8T,IAAA+H,EAAAF,GAAAnd,EACAwB,KAAA2T,IAAAiI,EAAAI,GAAAxd,EACAwB,KAAA4T,IAAAmI,EAAAE,GAAAzd,EACAwB,KAAA6T,GAAA,IAAArV,GAGAwB,KAAAwa,oBAEAxa,MAEAoc,mBAAA,SAAAC,EAAAC,GAEA,IACA/e,EAAA8e,EAAAE,IAAAD,GAAA,EAwBA,OAtBA/e,EAHA,MAIAA,EAAA,EAEAoB,KAAA6d,IAAAH,EAAAlZ,GAAAxE,KAAA6d,IAAAH,EAAAhZ,IACArD,KAAA2T,IAAA0I,EAAAjZ,EACApD,KAAA4T,GAAAyI,EAAAlZ,EACAnD,KAAA6T,GAAA,EACA7T,KAAA8T,GAAAvW,IAEAyC,KAAA2T,GAAA,EACA3T,KAAA4T,IAAAyI,EAAAhZ,EACArD,KAAA6T,GAAAwI,EAAAjZ,EACApD,KAAA8T,GAAAvW,KAIAyC,KAAA2T,GAAA0I,EAAAjZ,EAAAkZ,EAAAjZ,EAAAgZ,EAAAhZ,EAAAiZ,EAAAlZ,EACApD,KAAA4T,GAAAyI,EAAAhZ,EAAAiZ,EAAAnZ,EAAAkZ,EAAAlZ,EAAAmZ,EAAAjZ,EACArD,KAAA6T,GAAAwI,EAAAlZ,EAAAmZ,EAAAlZ,EAAAiZ,EAAAjZ,EAAAkZ,EAAAnZ,EACAnD,KAAA8T,GAAAvW,GAGAyC,KAAAyc,aAEAC,QAAA,SAAAnJ,GACA,SAAA5U,KAAAge,KAAAhe,KAAA6d,IAAkCpV,EAAKW,MAAA/H,KAAAuc,IAAAhJ,IAAA,QAEvCqJ,cAAA,SAAArJ,EAAAsJ,GACA,IAAAvB,EAAAtb,KAAA0c,QAAAnJ,GACA,OAAA+H,EAAA,OAAAtb,KACA,IAAArC,EAAAgB,KAAAqJ,IAAA,EAAA6U,EAAAvB,GAEA,OADAtb,KAAAkZ,MAAA3F,EAAA5V,GACAqC,MAEA8c,QAAA,WAEA,OAAA9c,KAAA+c,aAEAA,UAAA,WAOA,OANA/c,KAAA2T,KAAA,EACA3T,KAAA4T,KAAA,EACA5T,KAAA6T,KAAA,EAEA7T,KAAAwa,oBAEAxa,MAEAuc,IAAA,SAAAS,GACA,OAAAhd,KAAA2T,GAAAqJ,EAAArJ,GAAA3T,KAAA4T,GAAAoJ,EAAApJ,GAAA5T,KAAA6T,GAAAmJ,EAAAnJ,GAAA7T,KAAA8T,GAAAkJ,EAAAlJ,IAEAmJ,SAAA,WACA,OAAAjd,KAAA2T,GAAA3T,KAAA2T,GAAA3T,KAAA4T,GAAA5T,KAAA4T,GAAA5T,KAAA6T,GAAA7T,KAAA6T,GAAA7T,KAAA8T,GAAA9T,KAAA8T,IAEApU,OAAA,WACA,OAAAf,KAAAC,KAAAoB,KAAA2T,GAAA3T,KAAA2T,GAAA3T,KAAA4T,GAAA5T,KAAA4T,GAAA5T,KAAA6T,GAAA7T,KAAA6T,GAAA7T,KAAA8T,GAAA9T,KAAA8T,KAEA2I,UAAA,WACA,IAAA/f,EAAAsD,KAAAN,SAiBA,OAfA,IAAAhD,GACAsD,KAAA2T,GAAA,EACA3T,KAAA4T,GAAA,EACA5T,KAAA6T,GAAA,EACA7T,KAAA8T,GAAA,IAEApX,EAAA,EAAAA,EACAsD,KAAA2T,GAAA3T,KAAA2T,GAAAjX,EACAsD,KAAA4T,GAAA5T,KAAA4T,GAAAlX,EACAsD,KAAA6T,GAAA7T,KAAA6T,GAAAnX,EACAsD,KAAA8T,GAAA9T,KAAA8T,GAAApX,GAGAsD,KAAAwa,oBAEAxa,MAEAuY,SAAA,SAAAhF,EAAAhV,GACA,YAAAuG,IAAAvG,GACAoW,QAAA0B,KAAA,0GACArW,KAAAkd,oBAAA3J,EAAAhV,IAGAyB,KAAAkd,oBAAAld,KAAAuT,IAEA4J,YAAA,SAAA5J,GACA,OAAAvT,KAAAkd,oBAAA3J,EAAAvT,OAEAkd,oBAAA,SAAAjJ,EAAAd,GAEA,IAAAiK,EAAAnJ,EAAAN,GACA0J,EAAApJ,EAAAL,GACA0J,EAAArJ,EAAAJ,GACA0J,EAAAtJ,EAAAH,GACA0J,EAAArK,EAAAQ,GACA8J,EAAAtK,EAAAS,GACA8J,EAAAvK,EAAAU,GACA8J,EAAAxK,EAAAW,GAQA,OAPA9T,KAAA2T,GAAAyJ,EAAAO,EAAAJ,EAAAC,EAAAH,EAAAK,EAAAJ,EAAAG,EACAzd,KAAA4T,GAAAyJ,EAAAM,EAAAJ,EAAAE,EAAAH,EAAAE,EAAAJ,EAAAM,EACA1d,KAAA6T,GAAAyJ,EAAAK,EAAAJ,EAAAG,EAAAN,EAAAK,EAAAJ,EAAAG,EACAxd,KAAA8T,GAAAyJ,EAAAI,EAAAP,EAAAI,EAAAH,EAAAI,EAAAH,EAAAI,EAEA1d,KAAAwa,oBAEAxa,MAEAkZ,MAAA,SAAAE,EAAAzb,GACA,OAAAA,EAAA,OAAAqC,KACA,OAAArC,EAAA,OAAAqC,KAAA0V,KAAA0D,GACA,IAAAjW,EAAAnD,KAAA2T,GACAvQ,EAAApD,KAAA4T,GACAvQ,EAAArD,KAAA6T,GACAvQ,EAAAtD,KAAA8T,GAEA8J,EAAAta,EAAA8V,EAAAtF,GAAA3Q,EAAAiW,EAAAzF,GAAAvQ,EAAAgW,EAAAxF,GAAAvQ,EAAA+V,EAAAvF,GAYA,GAVA+J,EAAA,GACA5d,KAAA8T,IAAAsF,EAAAtF,GACA9T,KAAA2T,IAAAyF,EAAAzF,GACA3T,KAAA4T,IAAAwF,EAAAxF,GACA5T,KAAA6T,IAAAuF,EAAAvF,GACA+J,MAEA5d,KAAA0V,KAAA0D,GAGAwE,GAAA,EAKA,OAJA5d,KAAA8T,GAAAxQ,EACAtD,KAAA2T,GAAAxQ,EACAnD,KAAA4T,GAAAxQ,EACApD,KAAA6T,GAAAxQ,EACArD,KAGA,IAAA6d,EAAA,EAAAD,IAEA,GAAAC,GAAA7D,OAAAC,QAAA,CACA,IAAAzb,EAAA,EAAAb,EASA,OARAqC,KAAA8T,GAAAtV,EAAA8E,EAAA3F,EAAAqC,KAAA8T,GACA9T,KAAA2T,GAAAnV,EAAA2E,EAAAxF,EAAAqC,KAAA2T,GACA3T,KAAA4T,GAAApV,EAAA4E,EAAAzF,EAAAqC,KAAA4T,GACA5T,KAAA6T,GAAArV,EAAA6E,EAAA1F,EAAAqC,KAAA6T,GACA7T,KAAAyc,YAEAzc,KAAAwa,oBAEAxa,KAGA,IAAA8d,EAAAnf,KAAAC,KAAAif,GACAE,EAAApf,KAAAyb,MAAA0D,EAAAF,GACAI,EAAArf,KAAAub,KAAA,EAAAvc,GAAAogB,GAAAD,EACAG,EAAAtf,KAAAub,IAAAvc,EAAAogB,GAAAD,EAQA,OAPA9d,KAAA8T,GAAAxQ,EAAA0a,EAAAhe,KAAA8T,GAAAmK,EACAje,KAAA2T,GAAAxQ,EAAA6a,EAAAhe,KAAA2T,GAAAsK,EACAje,KAAA4T,GAAAxQ,EAAA4a,EAAAhe,KAAA4T,GAAAqK,EACAje,KAAA6T,GAAAxQ,EAAA2a,EAAAhe,KAAA6T,GAAAoK,EAEAje,KAAAwa,oBAEAxa,MAEA6Y,OAAA,SAAA6B,GACA,OAAAA,EAAA/G,KAAA3T,KAAA2T,IAAA+G,EAAA9G,KAAA5T,KAAA4T,IAAA8G,EAAA7G,KAAA7T,KAAA6T,IAAA6G,EAAA5G,KAAA9T,KAAA8T,IAEAgF,UAAA,SAAA5R,EAAA6R,GASA,YARAjU,IAAAiU,MAAA,GACA/Y,KAAA2T,GAAAzM,EAAA6R,GACA/Y,KAAA4T,GAAA1M,EAAA6R,EAAA,GACA/Y,KAAA6T,GAAA3M,EAAA6R,EAAA,GACA/Y,KAAA8T,GAAA5M,EAAA6R,EAAA,GAEA/Y,KAAAwa,oBAEAxa,MAEAgZ,QAAA,SAAA9R,EAAA6R,GAOA,YANAjU,IAAAoC,MAAA,SACApC,IAAAiU,MAAA,GACA7R,EAAA6R,GAAA/Y,KAAA2T,GACAzM,EAAA6R,EAAA,GAAA/Y,KAAA4T,GACA1M,EAAA6R,EAAA,GAAA/Y,KAAA6T,GACA3M,EAAA6R,EAAA,GAAA/Y,KAAA8T,GACA5M,GAEAgX,UAAA,SAAAC,GAEA,OADAne,KAAAwa,kBAAA2D,EACAne,MAEAwa,kBAAA,eCxaArd,OAAAgJ,OAAA4N,EAAA1V,UAAA,CACAgW,WAAA,EACAjB,IAAA,SAAAjQ,EAAAC,EAAAC,GAIA,OAHArD,KAAAmD,IACAnD,KAAAoD,IACApD,KAAAqD,IACArD,MAEA6V,UAAA,SAAAC,GAIA,OAHA9V,KAAAmD,EAAA2S,EACA9V,KAAAoD,EAAA0S,EACA9V,KAAAqD,EAAAyS,EACA9V,MAEAoe,KAAA,SAAAjb,GAEA,OADAnD,KAAAmD,IACAnD,MAEAqe,KAAA,SAAAjb,GAEA,OADApD,KAAAoD,IACApD,MAEAse,KAAA,SAAAjb,GAEA,OADArD,KAAAqD,IACArD,MAEAue,aAAA,SAAA1X,EAAAnJ,GACA,OAAAmJ,GACA,OACA7G,KAAAmD,EAAAzF,EACA,MAEA,OACAsC,KAAAoD,EAAA1F,EACA,MAEA,OACAsC,KAAAqD,EAAA3F,EACA,MAEA,QACA,UAAAqd,MAAA,0BAAAlU,GAGA,OAAA7G,MAEAwe,aAAA,SAAA3X,GACA,OAAAA,GACA,OACA,OAAA7G,KAAAmD,EAEA,OACA,OAAAnD,KAAAoD,EAEA,OACA,OAAApD,KAAAqD,EAEA,QACA,UAAA0X,MAAA,0BAAAlU,KAGA8P,MAAA,WACA,WAAA3W,KAAA4W,YAAA5W,KAAAmD,EAAAnD,KAAAoD,EAAApD,KAAAqD,IAEAqS,KAAA,SAAAsH,GAIA,OAHAhd,KAAAmD,EAAA6Z,EAAA7Z,EACAnD,KAAAoD,EAAA4Z,EAAA5Z,EACApD,KAAAqD,EAAA2Z,EAAA3Z,EACArD,MAEAiY,IAAA,SAAA+E,EAAA1Z,GACA,YAAAwB,IAAAxB,GACAqR,QAAA0B,KAAA,yFACArW,KAAAye,WAAAzB,EAAA1Z,KAGAtD,KAAAmD,GAAA6Z,EAAA7Z,EACAnD,KAAAoD,GAAA4Z,EAAA5Z,EACApD,KAAAqD,GAAA2Z,EAAA3Z,EACArD,OAEAqY,UAAA,SAAA7Z,GAIA,OAHAwB,KAAAmD,GAAA3E,EACAwB,KAAAoD,GAAA5E,EACAwB,KAAAqD,GAAA7E,EACAwB,MAEAye,WAAA,SAAAxK,EAAAd,GAIA,OAHAnT,KAAAmD,EAAA8Q,EAAA9Q,EAAAgQ,EAAAhQ,EACAnD,KAAAoD,EAAA6Q,EAAA7Q,EAAA+P,EAAA/P,EACApD,KAAAqD,EAAA4Q,EAAA5Q,EAAA8P,EAAA9P,EACArD,MAEA0e,gBAAA,SAAA1B,EAAAxe,GAIA,OAHAwB,KAAAmD,GAAA6Z,EAAA7Z,EAAA3E,EACAwB,KAAAoD,GAAA4Z,EAAA5Z,EAAA5E,EACAwB,KAAAqD,GAAA2Z,EAAA3Z,EAAA7E,EACAwB,MAEAsY,IAAA,SAAA0E,EAAA1Z,GACA,YAAAwB,IAAAxB,GACAqR,QAAA0B,KAAA,yFACArW,KAAA2e,WAAA3B,EAAA1Z,KAGAtD,KAAAmD,GAAA6Z,EAAA7Z,EACAnD,KAAAoD,GAAA4Z,EAAA5Z,EACApD,KAAAqD,GAAA2Z,EAAA3Z,EACArD,OAEA4e,UAAA,SAAApgB,GAIA,OAHAwB,KAAAmD,GAAA3E,EACAwB,KAAAoD,GAAA5E,EACAwB,KAAAqD,GAAA7E,EACAwB,MAEA2e,WAAA,SAAA1K,EAAAd,GAIA,OAHAnT,KAAAmD,EAAA8Q,EAAA9Q,EAAAgQ,EAAAhQ,EACAnD,KAAAoD,EAAA6Q,EAAA7Q,EAAA+P,EAAA/P,EACApD,KAAAqD,EAAA4Q,EAAA5Q,EAAA8P,EAAA9P,EACArD,MAEAuY,SAAA,SAAAyE,EAAA1Z,GACA,YAAAwB,IAAAxB,GACAqR,QAAA0B,KAAA,mGACArW,KAAA6e,gBAAA7B,EAAA1Z,KAGAtD,KAAAmD,GAAA6Z,EAAA7Z,EACAnD,KAAAoD,GAAA4Z,EAAA5Z,EACApD,KAAAqD,GAAA2Z,EAAA3Z,EACArD,OAEAwY,eAAA,SAAA1C,GAIA,OAHA9V,KAAAmD,GAAA2S,EACA9V,KAAAoD,GAAA0S,EACA9V,KAAAqD,GAAAyS,EACA9V,MAEA6e,gBAAA,SAAA5K,EAAAd,GAIA,OAHAnT,KAAAmD,EAAA8Q,EAAA9Q,EAAAgQ,EAAAhQ,EACAnD,KAAAoD,EAAA6Q,EAAA7Q,EAAA+P,EAAA/P,EACApD,KAAAqD,EAAA4Q,EAAA5Q,EAAA8P,EAAA9P,EACArD,MAEA8e,WAAA,WACA,IAAApE,EAAA,IAAyBhH,EACzB,gBAAAkH,GAKA,OAJAA,KAAAE,SACAnG,QAAAC,MAAA,+FAGA5U,KAAA+e,gBAAArE,EAAAC,aAAAC,KAPA,GAUAoE,eAAA,WACA,IAAAtE,EAAA,IAAyBhH,EACzB,gBAAA2H,EAAAC,GACA,OAAAtb,KAAA+e,gBAAArE,EAAAU,iBAAAC,EAAAC,KAHA,GAMA2D,aAAA,SAAApiB,GACA,IAAAsG,EAAAnD,KAAAmD,EACAC,EAAApD,KAAAoD,EACAC,EAAArD,KAAAqD,EACA6b,EAAAriB,EAAA6X,SAIA,OAHA1U,KAAAmD,EAAA+b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,GAAA7b,EACArD,KAAAoD,EAAA8b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,GAAA7b,EACArD,KAAAqD,EAAA6b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,GAAA7b,EACArD,MAEAmf,aAAA,SAAAtiB,GACA,IAAAsG,EAAAnD,KAAAmD,EACAC,EAAApD,KAAAoD,EACAC,EAAArD,KAAAqD,EACA6b,EAAAriB,EAAA6X,SACApR,EAAA,GAAA4b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,IAAA7b,EAAA6b,EAAA,KAIA,OAHAlf,KAAAmD,GAAA+b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,GAAA7b,EAAA6b,EAAA,KAAA5b,EACAtD,KAAAoD,GAAA8b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,GAAA7b,EAAA6b,EAAA,KAAA5b,EACAtD,KAAAqD,GAAA6b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,IAAA7b,EAAA6b,EAAA,KAAA5b,EACAtD,MAEA+e,gBAAA,SAAAxL,GACA,IAAApQ,EAAAnD,KAAAmD,EACAC,EAAApD,KAAAoD,EACAC,EAAArD,KAAAqD,EACA+b,EAAA7L,EAAApQ,EACAkc,EAAA9L,EAAAnQ,EACAkc,EAAA/L,EAAAlQ,EACAkc,EAAAhM,EAAAjQ,EAEAkc,EAAAD,EAAApc,EAAAkc,EAAAhc,EAAAic,EAAAlc,EACAqc,EAAAF,EAAAnc,EAAAkc,EAAAnc,EAAAic,EAAA/b,EACAqc,EAAAH,EAAAlc,EAAA+b,EAAAhc,EAAAic,EAAAlc,EACAwc,GAAAP,EAAAjc,EAAAkc,EAAAjc,EAAAkc,EAAAjc,EAKA,OAHArD,KAAAmD,EAAAqc,EAAAD,EAAAI,GAAAP,EAAAK,GAAAH,EAAAI,GAAAL,EACArf,KAAAoD,EAAAqc,EAAAF,EAAAI,GAAAN,EAAAK,GAAAN,EAAAI,GAAAF,EACAtf,KAAAqD,EAAAqc,EAAAH,EAAAI,GAAAL,EAAAE,GAAAH,EAAAI,GAAAL,EACApf,MAEA4f,QAAA,SAAAC,GACA,OAAA7f,KAAAmf,aAAAU,EAAAC,oBAAAX,aAAAU,EAAAE,mBAEAC,UAAA,SAAAH,GACA,OAAA7f,KAAAmf,aAAAU,EAAAI,yBAAAd,aAAAU,EAAAK,cAEAC,mBAAA,SAAAtjB,GAGA,IAAAsG,EAAAnD,KAAAmD,EACAC,EAAApD,KAAAoD,EACAC,EAAArD,KAAAqD,EACA6b,EAAAriB,EAAA6X,SAIA,OAHA1U,KAAAmD,EAAA+b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,GAAA7b,EACArD,KAAAoD,EAAA8b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,GAAA7b,EACArD,KAAAqD,EAAA6b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,IAAA7b,EACArD,KAAAyc,aAEA2D,OAAA,SAAApD,GAIA,OAHAhd,KAAAmD,GAAA6Z,EAAA7Z,EACAnD,KAAAoD,GAAA4Z,EAAA5Z,EACApD,KAAAqD,GAAA2Z,EAAA3Z,EACArD,MAEAqgB,aAAA,SAAAvK,GACA,OAAA9V,KAAAwY,eAAA,EAAA1C,IAEA9N,IAAA,SAAAgV,GAIA,OAHAhd,KAAAmD,EAAAxE,KAAAqJ,IAAAhI,KAAAmD,EAAA6Z,EAAA7Z,GACAnD,KAAAoD,EAAAzE,KAAAqJ,IAAAhI,KAAAoD,EAAA4Z,EAAA5Z,GACApD,KAAAqD,EAAA1E,KAAAqJ,IAAAhI,KAAAqD,EAAA2Z,EAAA3Z,GACArD,MAEAiI,IAAA,SAAA+U,GAIA,OAHAhd,KAAAmD,EAAAxE,KAAAsJ,IAAAjI,KAAAmD,EAAA6Z,EAAA7Z,GACAnD,KAAAoD,EAAAzE,KAAAsJ,IAAAjI,KAAAoD,EAAA4Z,EAAA5Z,GACApD,KAAAqD,EAAA1E,KAAAsJ,IAAAjI,KAAAqD,EAAA2Z,EAAA3Z,GACArD,MAEA+H,MAAA,SAAAC,EAAAC,GAKA,OAHAjI,KAAAmD,EAAAxE,KAAAsJ,IAAAD,EAAA7E,EAAAxE,KAAAqJ,IAAAC,EAAA9E,EAAAnD,KAAAmD,IACAnD,KAAAoD,EAAAzE,KAAAsJ,IAAAD,EAAA5E,EAAAzE,KAAAqJ,IAAAC,EAAA7E,EAAApD,KAAAoD,IACApD,KAAAqD,EAAA1E,KAAAsJ,IAAAD,EAAA3E,EAAA1E,KAAAqJ,IAAAC,EAAA5E,EAAArD,KAAAqD,IACArD,MAEAsgB,YAAA,SAAAC,EAAAC,GAIA,OAHAxgB,KAAAmD,EAAAxE,KAAAsJ,IAAAsY,EAAA5hB,KAAAqJ,IAAAwY,EAAAxgB,KAAAmD,IACAnD,KAAAoD,EAAAzE,KAAAsJ,IAAAsY,EAAA5hB,KAAAqJ,IAAAwY,EAAAxgB,KAAAoD,IACApD,KAAAqD,EAAA1E,KAAAsJ,IAAAsY,EAAA5hB,KAAAqJ,IAAAwY,EAAAxgB,KAAAqD,IACArD,MAEAygB,YAAA,SAAAzY,EAAAC,GACA,IAAAvI,EAAAM,KAAAN,SACA,OAAAM,KAAAqgB,aAAA3gB,GAAA,GAAA8Y,eAAA7Z,KAAAsJ,IAAAD,EAAArJ,KAAAqJ,IAAAC,EAAAvI,MAEAuB,MAAA,WAIA,OAHAjB,KAAAmD,EAAAxE,KAAAsC,MAAAjB,KAAAmD,GACAnD,KAAAoD,EAAAzE,KAAAsC,MAAAjB,KAAAoD,GACApD,KAAAqD,EAAA1E,KAAAsC,MAAAjB,KAAAqD,GACArD,MAEAwJ,KAAA,WAIA,OAHAxJ,KAAAmD,EAAAxE,KAAA6K,KAAAxJ,KAAAmD,GACAnD,KAAAoD,EAAAzE,KAAA6K,KAAAxJ,KAAAoD,GACApD,KAAAqD,EAAA1E,KAAA6K,KAAAxJ,KAAAqD,GACArD,MAEA0gB,MAAA,WAIA,OAHA1gB,KAAAmD,EAAAxE,KAAA+hB,MAAA1gB,KAAAmD,GACAnD,KAAAoD,EAAAzE,KAAA+hB,MAAA1gB,KAAAoD,GACApD,KAAAqD,EAAA1E,KAAA+hB,MAAA1gB,KAAAqD,GACArD,MAEA2gB,YAAA,WAIA,OAHA3gB,KAAAmD,EAAAnD,KAAAmD,EAAA,EAAAxE,KAAA6K,KAAAxJ,KAAAmD,GAAAxE,KAAAsC,MAAAjB,KAAAmD,GACAnD,KAAAoD,EAAApD,KAAAoD,EAAA,EAAAzE,KAAA6K,KAAAxJ,KAAAoD,GAAAzE,KAAAsC,MAAAjB,KAAAoD,GACApD,KAAAqD,EAAArD,KAAAqD,EAAA,EAAA1E,KAAA6K,KAAAxJ,KAAAqD,GAAA1E,KAAAsC,MAAAjB,KAAAqD,GACArD,MAEA4gB,OAAA,WAIA,OAHA5gB,KAAAmD,GAAAnD,KAAAmD,EACAnD,KAAAoD,GAAApD,KAAAoD,EACApD,KAAAqD,GAAArD,KAAAqD,EACArD,MAEAuc,IAAA,SAAAS,GACA,OAAAhd,KAAAmD,EAAA6Z,EAAA7Z,EAAAnD,KAAAoD,EAAA4Z,EAAA5Z,EAAApD,KAAAqD,EAAA2Z,EAAA3Z,GAGA4Z,SAAA,WACA,OAAAjd,KAAAmD,EAAAnD,KAAAmD,EAAAnD,KAAAoD,EAAApD,KAAAoD,EAAApD,KAAAqD,EAAArD,KAAAqD,GAEA3D,OAAA,WACA,OAAAf,KAAAC,KAAAoB,KAAAmD,EAAAnD,KAAAmD,EAAAnD,KAAAoD,EAAApD,KAAAoD,EAAApD,KAAAqD,EAAArD,KAAAqD,IAEAwd,gBAAA,WACA,OAAAliB,KAAA6d,IAAAxc,KAAAmD,GAAAxE,KAAA6d,IAAAxc,KAAAoD,GAAAzE,KAAA6d,IAAAxc,KAAAqD,IAEAoZ,UAAA,WACA,OAAAzc,KAAAqgB,aAAArgB,KAAAN,UAAA,IAEAohB,UAAA,SAAAphB,GACA,OAAAM,KAAAyc,YAAAjE,eAAA9Y,IAEA8I,KAAA,SAAAwU,EAAAvE,GAIA,OAHAzY,KAAAmD,IAAA6Z,EAAA7Z,EAAAnD,KAAAmD,GAAAsV,EACAzY,KAAAoD,IAAA4Z,EAAA5Z,EAAApD,KAAAoD,GAAAqV,EACAzY,KAAAqD,IAAA2Z,EAAA3Z,EAAArD,KAAAqD,GAAAoV,EACAzY,MAEA+gB,YAAA,SAAAC,EAAAC,EAAAxI,GACA,OAAAzY,KAAA2e,WAAAsC,EAAAD,GAAAxI,eAAAC,GAAAR,IAAA+I,IAEAE,MAAA,SAAAlE,EAAA1Z,GACA,YAAAwB,IAAAxB,GACAqR,QAAA0B,KAAA,6FACArW,KAAAmhB,aAAAnE,EAAA1Z,IAGAtD,KAAAmhB,aAAAnhB,KAAAgd,IAEAmE,aAAA,SAAAlN,EAAAd,GACA,IAAAiO,EAAAnN,EAAA9Q,EACAke,EAAApN,EAAA7Q,EACAke,EAAArN,EAAA5Q,EACAke,EAAApO,EAAAhQ,EACAqe,EAAArO,EAAA/P,EACAqe,EAAAtO,EAAA9P,EAIA,OAHArD,KAAAmD,EAAAke,EAAAI,EAAAH,EAAAE,EACAxhB,KAAAoD,EAAAke,EAAAC,EAAAH,EAAAK,EACAzhB,KAAAqD,EAAA+d,EAAAI,EAAAH,EAAAE,EACAvhB,MAEA0hB,gBAAA,SAAAC,GACA,IAAA7L,EAAA6L,EAAApF,IAAAvc,MAAA2hB,EAAA1E,WACA,OAAAjd,KAAA0V,KAAAiM,GAAAnJ,eAAA1C,IAEA8L,eAAA,WACA,IAAAZ,EAAA,IAAAjN,EACA,gBAAA8N,GAEA,OADAb,EAAAtL,KAAA1V,MAAA0hB,gBAAAG,GACA7hB,KAAAsY,IAAA0I,IAJA,GAOAc,QAAA,WAGA,IAAAd,EAAA,IAAAjN,EACA,gBAAAG,GACA,OAAAlU,KAAAsY,IAAA0I,EAAAtL,KAAAxB,GAAAsE,eAAA,EAAAxY,KAAAuc,IAAArI,MALA,GAQAwI,QAAA,SAAAM,GACA,IAAA+E,EAAA/hB,KAAAuc,IAAAS,GAAAre,KAAAC,KAAAoB,KAAAid,WAAAD,EAAAC,YAEA,OAAAte,KAAAge,KAAqBvV,EAAKW,MAAAga,GAAA,OAE1BC,WAAA,SAAAhF,GACA,OAAAre,KAAAC,KAAAoB,KAAAiiB,kBAAAjF,KAEAiF,kBAAA,SAAAjF,GACA,IAAAkF,EAAAliB,KAAAmD,EAAA6Z,EAAA7Z,EACAgf,EAAAniB,KAAAoD,EAAA4Z,EAAA5Z,EACAgf,EAAApiB,KAAAqD,EAAA2Z,EAAA3Z,EACA,OAAA6e,IAAAC,IAAAC,KAEAC,oBAAA,SAAArF,GACA,OAAAre,KAAA6d,IAAAxc,KAAAmD,EAAA6Z,EAAA7Z,GAAAxE,KAAA6d,IAAAxc,KAAAoD,EAAA4Z,EAAA5Z,GAAAzE,KAAA6d,IAAAxc,KAAAqD,EAAA2Z,EAAA3Z,IAEAif,iBAAA,SAAA9jB,GACA,OAAAwB,KAAAuiB,uBAAA/jB,EAAAyW,OAAAzW,EAAAgkB,IAAAhkB,EAAAujB,QAEAQ,uBAAA,SAAAtN,EAAAuN,EAAAT,GACA,IAAAU,EAAA9jB,KAAAub,IAAAsI,GAAAvN,EAIA,OAHAjV,KAAAmD,EAAAsf,EAAA9jB,KAAAub,IAAA6H,GACA/hB,KAAAoD,EAAAzE,KAAAkb,IAAA2I,GAAAvN,EACAjV,KAAAqD,EAAAof,EAAA9jB,KAAAkb,IAAAkI,GACA/hB,MAEA0iB,mBAAA,SAAA5lB,GACA,OAAAkD,KAAA2iB,yBAAA7lB,EAAAmY,OAAAnY,EAAAilB,MAAAjlB,EAAAsG,IAEAuf,yBAAA,SAAA1N,EAAA8M,EAAA3e,GAIA,OAHApD,KAAAmD,EAAA8R,EAAAtW,KAAAub,IAAA6H,GACA/hB,KAAAoD,IACApD,KAAAqD,EAAA4R,EAAAtW,KAAAkb,IAAAkI,GACA/hB,MAEA4iB,sBAAA,SAAA/lB,GACA,IAAAqiB,EAAAriB,EAAA6X,SAIA,OAHA1U,KAAAmD,EAAA+b,EAAA,IACAlf,KAAAoD,EAAA8b,EAAA,IACAlf,KAAAqD,EAAA6b,EAAA,IACAlf,MAEA6iB,mBAAA,SAAAhmB,GACA,IAAAimB,EAAA9iB,KAAA+iB,oBAAAlmB,EAAA,GAAA6C,SACAsjB,EAAAhjB,KAAA+iB,oBAAAlmB,EAAA,GAAA6C,SACAujB,EAAAjjB,KAAA+iB,oBAAAlmB,EAAA,GAAA6C,SAIA,OAHAM,KAAAmD,EAAA2f,EACA9iB,KAAAoD,EAAA4f,EACAhjB,KAAAqD,EAAA4f,EACAjjB,MAEA+iB,oBAAA,SAAAlmB,EAAAgK,GACA,OAAA7G,KAAA8Y,UAAAjc,EAAA6X,SAAA,EAAA7N,IAEAgS,OAAA,SAAAmE,GACA,OAAAA,EAAA7Z,IAAAnD,KAAAmD,GAAA6Z,EAAA5Z,IAAApD,KAAAoD,GAAA4Z,EAAA3Z,IAAArD,KAAAqD,GAEAyV,UAAA,SAAA5R,EAAA6R,GAKA,YAJAjU,IAAAiU,MAAA,GACA/Y,KAAAmD,EAAA+D,EAAA6R,GACA/Y,KAAAoD,EAAA8D,EAAA6R,EAAA,GACA/Y,KAAAqD,EAAA6D,EAAA6R,EAAA,GACA/Y,MAEAgZ,QAAA,SAAA9R,EAAA6R,GAMA,YALAjU,IAAAoC,MAAA,SACApC,IAAAiU,MAAA,GACA7R,EAAA6R,GAAA/Y,KAAAmD,EACA+D,EAAA6R,EAAA,GAAA/Y,KAAAoD,EACA8D,EAAA6R,EAAA,GAAA/Y,KAAAqD,EACA6D,GAEAgc,oBAAA,SAAAC,EAAAtc,EAAAkS,GAQA,YAPAjU,IAAAiU,GACApE,QAAA0B,KAAA,uEAGArW,KAAAmD,EAAAggB,EAAAC,KAAAvc,GACA7G,KAAAoD,EAAA+f,EAAAE,KAAAxc,GACA7G,KAAAqD,EAAA8f,EAAAG,KAAAzc,GACA7G,QClbA7C,OAAAgJ,OAAA6N,EAAA3V,UAAA,CACAsY,MAAA,WACA,WAAA3W,KAAA4W,aAAAlB,KAAA1V,OAEA0V,KAAA,SAAA6N,GACAvjB,KAAAiU,EAAAsP,EAAAtP,EACAjU,KAAAmT,EAAAoQ,EAAApQ,EACAnT,KAAAlD,EAAAymB,EAAAzmB,EACAkD,KAAAkU,OAAAwB,KAAA6N,EAAArP,QACAlU,KAAAmU,MAAAuB,KAAA6N,EAAApP,OACAnU,KAAAoU,cAAAmP,EAAAnP,cAEA,QAAA3X,EAAA,EAAA+mB,EAAAD,EAAAjP,cAAA5U,OAAqDjD,EAAA+mB,EAAQ/mB,IAC7DuD,KAAAsU,cAAA7X,GAAA8mB,EAAAjP,cAAA7X,GAAAka,QAGA,IAAAla,EAAA,EAAA+mB,EAAAD,EAAA/O,aAAA9U,OAAoDjD,EAAA+mB,EAAQ/mB,IAC5DuD,KAAAwU,aAAA/X,GAAA8mB,EAAA/O,aAAA/X,GAAAka,QAGA,OAAA3W,QCtBA7C,OAAAgJ,OAAAsO,EAAApW,UAAA,CACAolB,WAAA,EACArQ,IAAA,SAAAsQ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAzI,EAAAzb,KAAA0U,SAUA,OATA+G,EAAA,GAAAiI,EACAjI,EAAA,GAAAoI,EACApI,EAAA,GAAAuI,EACAvI,EAAA,GAAAkI,EACAlI,EAAA,GAAAqI,EACArI,EAAA,GAAAwI,EACAxI,EAAA,GAAAmI,EACAnI,EAAA,GAAAsI,EACAtI,EAAA,GAAAyI,EACAlkB,MAEAmkB,SAAA,WAEA,OADAnkB,KAAAoT,IAAA,mBACApT,MAEA2W,MAAA,WACA,WAAA3W,KAAA4W,aAAAkC,UAAA9Y,KAAA0U,WAEAgB,KAAA,SAAA7Y,GACA,IAAA4e,EAAAzb,KAAA0U,SACA0P,EAAAvnB,EAAA6X,SAUA,OATA+G,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACApkB,MAEAqkB,eAAA,SAAAxnB,GACA,IAAAunB,EAAAvnB,EAAA6X,SAEA,OADA1U,KAAAoT,IAAAgR,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACApkB,MAEAskB,uBAAA,WACA,IAAAtD,EAAA,IAAiBjN,EACjB,gBAAAoP,GACA,QAAA1mB,EAAA,EAAAC,EAAAymB,EAAAoB,MAA0C9nB,EAAAC,EAAOD,IACjDukB,EAAA7d,EAAAggB,EAAAC,KAAA3mB,GACAukB,EAAA5d,EAAA+f,EAAAE,KAAA5mB,GACAukB,EAAA3d,EAAA8f,EAAAG,KAAA7mB,GACAukB,EAAA/B,aAAAjf,MACAmjB,EAAAqB,OAAA/nB,EAAAukB,EAAA7d,EAAA6d,EAAA5d,EAAA4d,EAAA3d,GAGA,OAAA8f,GAXA,GAcA5K,SAAA,SAAA1b,GACA,OAAAmD,KAAAykB,iBAAAzkB,KAAAnD,IAEAsgB,YAAA,SAAAtgB,GACA,OAAAmD,KAAAykB,iBAAA5nB,EAAAmD,OAEAykB,iBAAA,SAAAxQ,EAAAd,GACA,IAAAuR,EAAAzQ,EAAAS,SACAiQ,EAAAxR,EAAAuB,SACA+G,EAAAzb,KAAA0U,SACAkQ,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GACAM,EAAAN,EAAA,GACAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GACAS,EAAAT,EAAA,GACAU,EAAAV,EAAA,GACAW,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GACAa,EAAAb,EAAA,GACAc,EAAAd,EAAA,GACAe,EAAAf,EAAA,GACAgB,EAAAhB,EAAA,GACAiB,EAAAjB,EAAA,GACAkB,EAAAlB,EAAA,GAUA,OATAlJ,EAAA,GAAAmJ,EAAAS,EAAAR,EAAAW,EAAAV,EAAAa,EACAlK,EAAA,GAAAmJ,EAAAU,EAAAT,EAAAY,EAAAX,EAAAc,EACAnK,EAAA,GAAAmJ,EAAAW,EAAAV,EAAAa,EAAAZ,EAAAe,EACApK,EAAA,GAAAsJ,EAAAM,EAAAL,EAAAQ,EAAAP,EAAAU,EACAlK,EAAA,GAAAsJ,EAAAO,EAAAN,EAAAS,EAAAR,EAAAW,EACAnK,EAAA,GAAAsJ,EAAAQ,EAAAP,EAAAU,EAAAT,EAAAY,EACApK,EAAA,GAAAyJ,EAAAG,EAAAF,EAAAK,EAAAJ,EAAAO,EACAlK,EAAA,GAAAyJ,EAAAI,EAAAH,EAAAM,EAAAL,EAAAQ,EACAnK,EAAA,GAAAyJ,EAAAK,EAAAJ,EAAAO,EAAAN,EAAAS,EACA7lB,MAEAwY,eAAA,SAAAha,GACA,IAAAid,EAAAzb,KAAA0U,SAUA,OATA+G,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAwB,MAEA8lB,YAAA,WACA,IAAArK,EAAAzb,KAAA0U,SACAT,EAAAwH,EAAA,GACAtI,EAAAsI,EAAA,GACA3e,EAAA2e,EAAA,GACA1e,EAAA0e,EAAA,GACAyD,EAAAzD,EAAA,GACAnB,EAAAmB,EAAA,GACAvI,EAAAuI,EAAA,GACA9b,EAAA8b,EAAA,GACAhf,EAAAgf,EAAA,GACA,OAAAxH,EAAAiL,EAAAziB,EAAAwX,EAAAqG,EAAA3a,EAAAwT,EAAApW,EAAAN,EAAA0W,EAAAmH,EAAApH,EAAApW,EAAAC,EAAA4C,EAAA7C,EAAAoiB,EAAAhM,GAEA6S,WAAA,SAAAC,EAAAC,GACAD,KAAAE,WACAvR,QAAAC,MAAA,oEAGA,IAAAwP,EAAA4B,EAAAtR,SACA+G,EAAAzb,KAAA0U,SACAgP,EAAAU,EAAA,GACAP,EAAAO,EAAA,GACAJ,EAAAI,EAAA,GACAT,EAAAS,EAAA,GACAN,EAAAM,EAAA,GACAH,EAAAG,EAAA,GACAR,EAAAQ,EAAA,GACAL,EAAAK,EAAA,GACAF,EAAAE,EAAA,GACA+B,EAAAjC,EAAAJ,EAAAG,EAAAF,EACAqC,EAAAnC,EAAAL,EAAAM,EAAAP,EACA0C,EAAAtC,EAAAJ,EAAAG,EAAAF,EACA0C,EAAA5C,EAAAyC,EAAAtC,EAAAuC,EAAApC,EAAAqC,EAEA,OAAAC,EAAA,CACA,IAAAC,EAAA,qEAEA,QAAAN,EACA,UAAAlL,MAAAwL,GAKA,OAHA5R,QAAA0B,KAAAkQ,GAGAvmB,KAAAmkB,WAGA,IAAAqC,EAAA,EAAAF,EAUA,OATA7K,EAAA,GAAA0K,EAAAK,EACA/K,EAAA,IAAAuI,EAAAD,EAAAG,EAAAL,GAAA2C,EACA/K,EAAA,IAAAwI,EAAAJ,EAAAG,EAAAF,GAAA0C,EACA/K,EAAA,GAAA2K,EAAAI,EACA/K,EAAA,IAAAyI,EAAAR,EAAAM,EAAAJ,GAAA4C,EACA/K,EAAA,IAAAuI,EAAAL,EAAAM,EAAAP,GAAA8C,EACA/K,EAAA,GAAA4K,EAAAG,EACA/K,EAAA,IAAAoI,EAAAD,EAAAG,EAAAL,GAAA8C,EACA/K,EAAA,IAAAqI,EAAAJ,EAAAG,EAAAF,GAAA6C,EACAxmB,MAEAymB,UAAA,WACA,IAAAC,EACA7pB,EAAAmD,KAAA0U,SAUA,OATAgS,EAAA7pB,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAA6pB,EACAA,EAAA7pB,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAA6pB,EACAA,EAAA7pB,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAA6pB,EACA1mB,MAEA2mB,gBAAA,SAAAC,GACA,OAAA5mB,KAAAqkB,eAAAuC,GAAAb,WAAA/lB,MAAAymB,aAEAI,mBAAA,SAAAtpB,GACA,IAAAV,EAAAmD,KAAA0U,SAUA,OATAnX,EAAA,GAAAV,EAAA,GACAU,EAAA,GAAAV,EAAA,GACAU,EAAA,GAAAV,EAAA,GACAU,EAAA,GAAAV,EAAA,GACAU,EAAA,GAAAV,EAAA,GACAU,EAAA,GAAAV,EAAA,GACAU,EAAA,GAAAV,EAAA,GACAU,EAAA,GAAAV,EAAA,GACAU,EAAA,GAAAV,EAAA,GACAmD,MAEA8mB,eAAA,SAAAC,EAAAC,EAAAlE,EAAAE,EAAAiE,EAAAC,EAAAC,GACA,IAAArqB,EAAA6B,KAAAkb,IAAAoN,GACAzoB,EAAAG,KAAAub,IAAA+M,GACAjnB,KAAAoT,IAAA0P,EAAAhmB,EAAAgmB,EAAAtkB,GAAAskB,GAAAhmB,EAAAoqB,EAAA1oB,EAAA2oB,GAAAD,EAAAH,GAAA/D,EAAAxkB,EAAAwkB,EAAAlmB,GAAAkmB,IAAAxkB,EAAA0oB,EAAApqB,EAAAqqB,KAAAH,EAAA,QAEAI,MAAA,SAAAtE,EAAAE,GACA,IAAAvH,EAAAzb,KAAA0U,SAOA,OANA+G,EAAA,IAAAqH,EACArH,EAAA,IAAAqH,EACArH,EAAA,IAAAqH,EACArH,EAAA,IAAAuH,EACAvH,EAAA,IAAAuH,EACAvH,EAAA,IAAAuH,EACAhjB,MAEAqnB,OAAA,SAAAtF,GACA,IAAAjlB,EAAA6B,KAAAkb,IAAAkI,GACAvjB,EAAAG,KAAAub,IAAA6H,GACAtG,EAAAzb,KAAA0U,SACAkQ,EAAAnJ,EAAA,GACAoJ,EAAApJ,EAAA,GACAqJ,EAAArJ,EAAA,GACAsJ,EAAAtJ,EAAA,GACAuJ,EAAAvJ,EAAA,GACAwJ,EAAAxJ,EAAA,GAOA,OANAA,EAAA,GAAA3e,EAAA8nB,EAAApmB,EAAAumB,EACAtJ,EAAA,GAAA3e,EAAA+nB,EAAArmB,EAAAwmB,EACAvJ,EAAA,GAAA3e,EAAAgoB,EAAAtmB,EAAAymB,EACAxJ,EAAA,IAAAjd,EAAAomB,EAAA9nB,EAAAioB,EACAtJ,EAAA,IAAAjd,EAAAqmB,EAAA/nB,EAAAkoB,EACAvJ,EAAA,IAAAjd,EAAAsmB,EAAAhoB,EAAAmoB,EACAjlB,MAEAsnB,UAAA,SAAAP,EAAAC,GACA,IAAAvL,EAAAzb,KAAA0U,SAOA,OANA+G,EAAA,IAAAsL,EAAAtL,EAAA,GACAA,EAAA,IAAAsL,EAAAtL,EAAA,GACAA,EAAA,IAAAsL,EAAAtL,EAAA,GACAA,EAAA,IAAAuL,EAAAvL,EAAA,GACAA,EAAA,IAAAuL,EAAAvL,EAAA,GACAA,EAAA,IAAAuL,EAAAvL,EAAA,GACAzb,MAEA6Y,OAAA,SAAAmN,GAIA,IAHA,IAAAvK,EAAAzb,KAAA0U,SACA0P,EAAA4B,EAAAtR,SAEAjY,EAAA,EAAmBA,EAAA,EAAOA,IAC1B,GAAAgf,EAAAhf,KAAA2nB,EAAA3nB,GAAA,SAGA,UAEAqc,UAAA,SAAA5R,EAAA6R,QACAjU,IAAAiU,MAAA,GAEA,QAAAtc,EAAA,EAAmBA,EAAA,EAAOA,IAC1BuD,KAAA0U,SAAAjY,GAAAyK,EAAAzK,EAAAsc,GAGA,OAAA/Y,MAEAgZ,QAAA,SAAA9R,EAAA6R,QACAjU,IAAAoC,MAAA,SACApC,IAAAiU,MAAA,GACA,IAAA0C,EAAAzb,KAAA0U,SAUA,OATAxN,EAAA6R,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,KCnRA/J,OAAAgJ,OAAA0O,EAAAxW,UAAA,CACAkpB,QAAA,EACAnU,IAAA,SAAApL,EAAAC,GAGA,OAFAjI,KAAAgI,IAAA0N,KAAA1N,GACAhI,KAAAiI,IAAAyN,KAAAzN,GACAjI,MAEAwnB,aAAA,SAAAtgB,GAQA,IAPA,IAAAugB,EAAA3S,IACA4S,EAAA5S,IACA6S,EAAA7S,IACA8S,GAAA9S,IACA+S,GAAA/S,IACAgT,GAAAhT,IAEArY,EAAA,EAAAC,EAAAwK,EAAAxH,OAAqCjD,EAAAC,EAAOD,GAAA,GAC5C,IAAA0G,EAAA+D,EAAAzK,GACA2G,EAAA8D,EAAAzK,EAAA,GACA4G,EAAA6D,EAAAzK,EAAA,GACA0G,EAAAskB,MAAAtkB,GACAC,EAAAskB,MAAAtkB,GACAC,EAAAskB,MAAAtkB,GACAF,EAAAykB,MAAAzkB,GACAC,EAAAykB,MAAAzkB,GACAC,EAAAykB,MAAAzkB,GAKA,OAFArD,KAAAgI,IAAAoL,IAAAqU,EAAAC,EAAAC,GACA3nB,KAAAiI,IAAAmL,IAAAwU,EAAAC,EAAAC,GACA9nB,MAEA+nB,uBAAA,SAAA5E,GAQA,IAPA,IAAAsE,EAAA3S,IACA4S,EAAA5S,IACA6S,EAAA7S,IACA8S,GAAA9S,IACA+S,GAAA/S,IACAgT,GAAAhT,IAEArY,EAAA,EAAAC,EAAAymB,EAAAoB,MAAwC9nB,EAAAC,EAAOD,IAAA,CAC/C,IAAA0G,EAAAggB,EAAAC,KAAA3mB,GACA2G,EAAA+f,EAAAE,KAAA5mB,GACA4G,EAAA8f,EAAAG,KAAA7mB,GACA0G,EAAAskB,MAAAtkB,GACAC,EAAAskB,MAAAtkB,GACAC,EAAAskB,MAAAtkB,GACAF,EAAAykB,MAAAzkB,GACAC,EAAAykB,MAAAzkB,GACAC,EAAAykB,MAAAzkB,GAKA,OAFArD,KAAAgI,IAAAoL,IAAAqU,EAAAC,EAAAC,GACA3nB,KAAAiI,IAAAmL,IAAAwU,EAAAC,EAAAC,GACA9nB,MAEAgoB,cAAA,SAAAC,GACAjoB,KAAAkoB,YAEA,QAAAzrB,EAAA,EAAA+mB,EAAAyE,EAAAvoB,OAAuCjD,EAAA+mB,EAAQ/mB,IAC/CuD,KAAAmoB,cAAAF,EAAAxrB,IAGA,OAAAuD,MAEAooB,qBAAA,WACA,IAAApH,EAAA,IAAiBjN,EACjB,gBAAAiB,EAAAyB,GACA,IAAA4R,EAAArH,EAAAtL,KAAAe,GAAA+B,eAAA,IAGA,OAFAxY,KAAAgI,IAAA0N,KAAAV,GAAAsD,IAAA+P,GACAroB,KAAAiI,IAAAyN,KAAAV,GAAAiD,IAAAoQ,GACAroB,MANA,GASAsoB,cAAA,SAAAnqB,GAEA,OADA6B,KAAAkoB,YACAloB,KAAAuoB,eAAApqB,IAEAwY,MAAA,WACA,WAAA3W,KAAA4W,aAAAlB,KAAA1V,OAEA0V,KAAA,SAAA8S,GAGA,OAFAxoB,KAAAgI,IAAA0N,KAAA8S,EAAAxgB,KACAhI,KAAAiI,IAAAyN,KAAA8S,EAAAvgB,KACAjI,MAEAkoB,UAAA,WAGA,OAFAloB,KAAAgI,IAAA7E,EAAAnD,KAAAgI,IAAA5E,EAAApD,KAAAgI,IAAA3E,EAAAyR,IACA9U,KAAAiI,IAAA9E,EAAAnD,KAAAiI,IAAA7E,EAAApD,KAAAiI,IAAA5E,GAAAyR,IACA9U,MAEAyoB,QAAA,WAEA,OAAAzoB,KAAAiI,IAAA9E,EAAAnD,KAAAgI,IAAA7E,GAAAnD,KAAAiI,IAAA7E,EAAApD,KAAAgI,IAAA5E,GAAApD,KAAAiI,IAAA5E,EAAArD,KAAAgI,IAAA3E,GAEAqlB,UAAA,SAAAzhB,GAMA,YALAnC,IAAAmC,IACA0N,QAAA0B,KAAA,mDACApP,EAAA,IAAmB8M,GAGnB/T,KAAAyoB,UAAAxhB,EAAAmM,IAAA,OAAAnM,EAAAwX,WAAAze,KAAAgI,IAAAhI,KAAAiI,KAAAuQ,eAAA,KAEAmQ,QAAA,SAAA1hB,GAMA,YALAnC,IAAAmC,IACA0N,QAAA0B,KAAA,iDACApP,EAAA,IAAmB8M,GAGnB/T,KAAAyoB,UAAAxhB,EAAAmM,IAAA,OAAAnM,EAAA0X,WAAA3e,KAAAiI,IAAAjI,KAAAgI,MAEAmgB,cAAA,SAAAS,GAGA,OAFA5oB,KAAAgI,QAAA4gB,GACA5oB,KAAAiI,QAAA2gB,GACA5oB,MAEA6oB,eAAA,SAAAlH,GAGA,OAFA3hB,KAAAgI,IAAAsQ,IAAAqJ,GACA3hB,KAAAiI,IAAAgQ,IAAA0J,GACA3hB,MAEA8oB,eAAA,SAAAhT,GAGA,OAFA9V,KAAAgI,IAAAqQ,WAAAvC,GACA9V,KAAAiI,IAAAoQ,UAAAvC,GACA9V,MAEAuoB,eAAA,WAGA,IAAAQ,EAAAtsB,EAAAC,EACAskB,EAAA,IAAiBjN,EAEjB,SAAAiV,EAAAC,GACA,IAAAC,EAAAD,EAAAC,SAEA,QAAApkB,IAAAokB,EACA,GAAAA,EAAAC,WAAA,CACA,IAAAC,EAAAF,EAAAE,SAEA,IAAA3sB,EAAA,EAAAC,EAAA0sB,EAAA1pB,OAA0CjD,EAAAC,EAAOD,IACjDukB,EAAAtL,KAAA0T,EAAA3sB,IACAukB,EAAA7B,aAAA8J,EAAA/I,aACA6I,EAAAZ,cAAAnH,QAES,GAAAkI,EAAAG,iBAAA,CACT,IAAAlG,EAAA+F,EAAAI,WAAAC,SAEA,QAAAzkB,IAAAqe,EACA,IAAA1mB,EAAA,EAAAC,EAAAymB,EAAAoB,MAA4C9nB,EAAAC,EAAOD,IACnDukB,EAAAkC,oBAAAC,EAAA1mB,GAAA0iB,aAAA8J,EAAA/I,aACA6I,EAAAZ,cAAAnH,IAOA,gBAAA7iB,GAIA,OAHA4qB,EAAA/oB,KACA7B,EAAAqrB,mBAAA,GACArrB,EAAA6qB,YACAhpB,MAnCA,GAsCAypB,cAAA,SAAAb,GACA,QAAAA,EAAAzlB,EAAAnD,KAAAgI,IAAA7E,GAAAylB,EAAAzlB,EAAAnD,KAAAiI,IAAA9E,GAAAylB,EAAAxlB,EAAApD,KAAAgI,IAAA5E,GAAAwlB,EAAAxlB,EAAApD,KAAAiI,IAAA7E,GAAAwlB,EAAAvlB,EAAArD,KAAAgI,IAAA3E,GAAAulB,EAAAvlB,EAAArD,KAAAiI,IAAA5E,IAEAqmB,YAAA,SAAAlB,GACA,OAAAxoB,KAAAgI,IAAA7E,GAAAqlB,EAAAxgB,IAAA7E,GAAAqlB,EAAAvgB,IAAA9E,GAAAnD,KAAAiI,IAAA9E,GAAAnD,KAAAgI,IAAA5E,GAAAolB,EAAAxgB,IAAA5E,GAAAolB,EAAAvgB,IAAA7E,GAAApD,KAAAiI,IAAA7E,GAAApD,KAAAgI,IAAA3E,GAAAmlB,EAAAxgB,IAAA3E,GAAAmlB,EAAAvgB,IAAA5E,GAAArD,KAAAiI,IAAA5E,GAEAsmB,aAAA,SAAAf,EAAA3hB,GAQA,YALAnC,IAAAmC,IACA0N,QAAA0B,KAAA,sDACApP,EAAA,IAAmB8M,GAGnB9M,EAAAmM,KAAAwV,EAAAzlB,EAAAnD,KAAAgI,IAAA7E,IAAAnD,KAAAiI,IAAA9E,EAAAnD,KAAAgI,IAAA7E,IAAAylB,EAAAxlB,EAAApD,KAAAgI,IAAA5E,IAAApD,KAAAiI,IAAA7E,EAAApD,KAAAgI,IAAA5E,IAAAwlB,EAAAvlB,EAAArD,KAAAgI,IAAA3E,IAAArD,KAAAiI,IAAA5E,EAAArD,KAAAgI,IAAA3E,KAEAumB,cAAA,SAAApB,GAEA,QAAAA,EAAAvgB,IAAA9E,EAAAnD,KAAAgI,IAAA7E,GAAAqlB,EAAAxgB,IAAA7E,EAAAnD,KAAAiI,IAAA9E,GAAAqlB,EAAAvgB,IAAA7E,EAAApD,KAAAgI,IAAA5E,GAAAolB,EAAAxgB,IAAA5E,EAAApD,KAAAiI,IAAA7E,GAAAolB,EAAAvgB,IAAA5E,EAAArD,KAAAgI,IAAA3E,GAAAmlB,EAAAxgB,IAAA3E,EAAArD,KAAAiI,IAAA5E,IAEAwmB,iBAAA,WACA,IAAAC,EAAA,IAA2B/V,EAC3B,gBAAAgW,GAIA,OAFA/pB,KAAAgqB,WAAAD,EAAA/U,OAAA8U,GAEAA,EAAA7H,kBAAA8H,EAAA/U,SAAA+U,EAAA9U,OAAA8U,EAAA9U,QANA,GASAgV,gBAAA,SAAAC,GAGA,IAAAliB,EAAAC,EA0BA,OAxBAiiB,EAAAhW,OAAA/Q,EAAA,GACA6E,EAAAkiB,EAAAhW,OAAA/Q,EAAAnD,KAAAgI,IAAA7E,EACA8E,EAAAiiB,EAAAhW,OAAA/Q,EAAAnD,KAAAiI,IAAA9E,IAEA6E,EAAAkiB,EAAAhW,OAAA/Q,EAAAnD,KAAAiI,IAAA9E,EACA8E,EAAAiiB,EAAAhW,OAAA/Q,EAAAnD,KAAAgI,IAAA7E,GAGA+mB,EAAAhW,OAAA9Q,EAAA,GACA4E,GAAAkiB,EAAAhW,OAAA9Q,EAAApD,KAAAgI,IAAA5E,EACA6E,GAAAiiB,EAAAhW,OAAA9Q,EAAApD,KAAAiI,IAAA7E,IAEA4E,GAAAkiB,EAAAhW,OAAA9Q,EAAApD,KAAAiI,IAAA7E,EACA6E,GAAAiiB,EAAAhW,OAAA9Q,EAAApD,KAAAgI,IAAA5E,GAGA8mB,EAAAhW,OAAA7Q,EAAA,GACA2E,GAAAkiB,EAAAhW,OAAA7Q,EAAArD,KAAAgI,IAAA3E,EACA4E,GAAAiiB,EAAAhW,OAAA7Q,EAAArD,KAAAiI,IAAA5E,IAEA2E,GAAAkiB,EAAAhW,OAAA7Q,EAAArD,KAAAiI,IAAA5E,EACA4E,GAAAiiB,EAAAhW,OAAA7Q,EAAArD,KAAAgI,IAAA3E,GAGA2E,IAAAkiB,EAAAC,UAAAliB,IAAAiiB,EAAAC,UAEAC,mBAAA,WAEA,IAAAC,EAAA,IAAiBtW,EACjBiN,EAAA,IAAiBjN,EACjBkN,EAAA,IAAiBlN,EAEjBuW,EAAA,IAAiBvW,EACjBwW,EAAA,IAAiBxW,EACjByW,EAAA,IAAiBzW,EACjB0W,EAAA,IAAuB1W,EACvBiB,EAAA,IAAqBjB,EACrB2W,EAAA,IAAsB3W,EACtB4W,EAAA,IAA6B5W,EAE7B,SAAA6W,EAAAC,GACA,IAAApuB,EAAAyE,EAEA,IAAAzE,EAAA,EAAAyE,EAAA2pB,EAAAnrB,OAAA,EAAsCjD,GAAAyE,EAAQzE,GAAA,GAC9CguB,EAAA3R,UAAA+R,EAAApuB,GAEA,IAAAc,EAAAmtB,EAAAvnB,EAAAxE,KAAA6d,IAAAiO,EAAAtnB,GAAAunB,EAAAtnB,EAAAzE,KAAA6d,IAAAiO,EAAArnB,GAAAsnB,EAAArnB,EAAA1E,KAAA6d,IAAAiO,EAAApnB,GAEAynB,EAAAT,EAAA9N,IAAAkO,GACAM,EAAA/J,EAAAzE,IAAAkO,GACAO,EAAA/J,EAAA1E,IAAAkO,GAEA,GAAA9rB,KAAAsJ,KAAAtJ,KAAAsJ,IAAA6iB,EAAAC,EAAAC,GAAArsB,KAAAqJ,IAAA8iB,EAAAC,EAAAC,IAAAztB,EAGA,SAIA,SAGA,gBAAA0tB,GACA,GAAAjrB,KAAAyoB,UACA,SAIAzoB,KAAA0oB,UAAA1T,GACA0V,EAAA/L,WAAA3e,KAAAiI,IAAA+M,GAEAqV,EAAA1L,WAAAsM,EAAAhX,EAAAe,GACAgM,EAAArC,WAAAsM,EAAA9X,EAAA6B,GACAiM,EAAAtC,WAAAsM,EAAAnuB,EAAAkY,GAEAsV,EAAA3L,WAAAqC,EAAAqJ,GACAE,EAAA5L,WAAAsC,EAAAD,GACAwJ,EAAA7L,WAAA0L,EAAApJ,GAIA,IAAA4J,EAAA,IAAAP,EAAAjnB,EAAAinB,EAAAlnB,EAAA,GAAAmnB,EAAAlnB,EAAAknB,EAAAnnB,EAAA,GAAAonB,EAAAnnB,EAAAmnB,EAAApnB,EAAAknB,EAAAjnB,EAAA,GAAAinB,EAAAnnB,EAAAonB,EAAAlnB,EAAA,GAAAknB,EAAApnB,EAAAqnB,EAAAnnB,EAAA,GAAAmnB,EAAArnB,GAAAmnB,EAAAlnB,EAAAknB,EAAAnnB,EAAA,GAAAonB,EAAAnnB,EAAAmnB,EAAApnB,EAAA,GAAAqnB,EAAApnB,EAAAonB,EAAArnB,EAAA,GAEA,QAAAynB,EAAAC,OAOAD,EAFAC,EAAA,uBAQAF,EAAAxJ,aAAAmJ,EAAAC,GAEAK,EADAC,EAAA,CAAAF,EAAAxnB,EAAAwnB,EAAAvnB,EAAAunB,EAAAtnB,OAvEA,GA2EA2mB,WAAA,SAAApB,EAAA3hB,GAMA,YALAnC,IAAAmC,IACA0N,QAAA0B,KAAA,oDACApP,EAAA,IAAmB8M,GAGnB9M,EAAAyO,KAAAkT,GAAA7gB,MAAA/H,KAAAgI,IAAAhI,KAAAiI,MAEAijB,gBAAA,WACA,IAAAlK,EAAA,IAAiBjN,EACjB,gBAAA6U,GAEA,OADA5H,EAAAtL,KAAAkT,GAAA7gB,MAAA/H,KAAAgI,IAAAhI,KAAAiI,KACAqQ,IAAAsQ,GAAAlpB,UAJA,GAOAyrB,kBAAA,WACA,IAAAnK,EAAA,IAAiBjN,EACjB,gBAAA9M,GAOA,YANAnC,IAAAmC,GACA0N,QAAAC,MAAA,2DAGA5U,KAAA0oB,UAAAzhB,EAAA+N,QACA/N,EAAAgO,OAAA,GAAAjV,KAAA2oB,QAAA3H,GAAAthB,SACAuH,GATA,GAYAmkB,UAAA,SAAA5C,GAKA,OAJAxoB,KAAAgI,IAAAC,IAAAugB,EAAAxgB,KACAhI,KAAAiI,IAAAD,IAAAwgB,EAAAvgB,KAEAjI,KAAAyoB,WAAAzoB,KAAAkoB,YACAloB,MAEAqrB,MAAA,SAAA7C,GAGA,OAFAxoB,KAAAgI,QAAAwgB,EAAAxgB,KACAhI,KAAAiI,QAAAugB,EAAAvgB,KACAjI,MAEAmf,aAAA,WACA,IAAA8I,EAAA,KAAsBlU,EAAO,IAAQA,EAAO,IAAQA,EAAO,IAAQA,EAAO,IAAQA,EAAO,IAAQA,EAAO,IAAQA,EAAO,IAAQA,GAC/H,gBAAAiS,GAEA,OAAAhmB,KAAAyoB,UAAAzoB,MAEAioB,EAAA,GAAA7U,IAAApT,KAAAgI,IAAA7E,EAAAnD,KAAAgI,IAAA5E,EAAApD,KAAAgI,IAAA3E,GAAA8b,aAAA6G,GAEAiC,EAAA,GAAA7U,IAAApT,KAAAgI,IAAA7E,EAAAnD,KAAAgI,IAAA5E,EAAApD,KAAAiI,IAAA5E,GAAA8b,aAAA6G,GAEAiC,EAAA,GAAA7U,IAAApT,KAAAgI,IAAA7E,EAAAnD,KAAAiI,IAAA7E,EAAApD,KAAAgI,IAAA3E,GAAA8b,aAAA6G,GAEAiC,EAAA,GAAA7U,IAAApT,KAAAgI,IAAA7E,EAAAnD,KAAAiI,IAAA7E,EAAApD,KAAAiI,IAAA5E,GAAA8b,aAAA6G,GAEAiC,EAAA,GAAA7U,IAAApT,KAAAiI,IAAA9E,EAAAnD,KAAAgI,IAAA5E,EAAApD,KAAAgI,IAAA3E,GAAA8b,aAAA6G,GAEAiC,EAAA,GAAA7U,IAAApT,KAAAiI,IAAA9E,EAAAnD,KAAAgI,IAAA5E,EAAApD,KAAAiI,IAAA5E,GAAA8b,aAAA6G,GAEAiC,EAAA,GAAA7U,IAAApT,KAAAiI,IAAA9E,EAAAnD,KAAAiI,IAAA7E,EAAApD,KAAAgI,IAAA3E,GAAA8b,aAAA6G,GAEAiC,EAAA,GAAA7U,IAAApT,KAAAiI,IAAA9E,EAAAnD,KAAAiI,IAAA7E,EAAApD,KAAAiI,IAAA5E,GAAA8b,aAAA6G,GAEAhmB,KAAAgoB,cAAAC,GACAjoB,OAvBA,GA0BAsnB,UAAA,SAAAvO,GAGA,OAFA/Y,KAAAgI,IAAAiQ,IAAAc,GACA/Y,KAAAiI,IAAAgQ,IAAAc,GACA/Y,MAEA6Y,OAAA,SAAA2P,GACA,OAAAA,EAAAxgB,IAAA6Q,OAAA7Y,KAAAgI,MAAAwgB,EAAAvgB,IAAA4Q,OAAA7Y,KAAAiI,QChXA9K,OAAAgJ,OAAA4O,EAAA1W,UAAA,CACA+U,IAAA,SAAA4B,EAAAC,GAGA,OAFAjV,KAAAgV,OAAAU,KAAAV,GACAhV,KAAAiV,SACAjV,MAEAgoB,cAAA,WACA,IAAAQ,EAAA,IAAkB3T,EAClB,gBAAAoT,EAAAqD,GACA,IAAAtW,EAAAhV,KAAAgV,YAEAlQ,IAAAwmB,EACAtW,EAAAU,KAAA4V,GAEA9C,EAAAR,cAAAC,GAAAS,UAAA1T,GAKA,IAFA,IAAAuW,EAAA,EAEA9uB,EAAA,EAAA+mB,EAAAyE,EAAAvoB,OAAyCjD,EAAA+mB,EAAQ/mB,IACjD8uB,EAAA5sB,KAAAsJ,IAAAsjB,EAAAvW,EAAAiN,kBAAAgG,EAAAxrB,KAIA,OADAuD,KAAAiV,OAAAtW,KAAAC,KAAA2sB,GACAvrB,MAlBA,GAqBA2W,MAAA,WACA,WAAA3W,KAAA4W,aAAAlB,KAAA1V,OAEA0V,KAAA,SAAAqU,GAGA,OAFA/pB,KAAAgV,OAAAU,KAAAqU,EAAA/U,QACAhV,KAAAiV,OAAA8U,EAAA9U,OACAjV,MAEAwrB,MAAA,WACA,OAAAxrB,KAAAiV,QAAA,GAEAwU,cAAA,SAAAb,GACA,OAAAA,EAAA3G,kBAAAjiB,KAAAgV,SAAAhV,KAAAiV,OAAAjV,KAAAiV,QAEAiW,gBAAA,SAAAtC,GACA,OAAAA,EAAA5G,WAAAhiB,KAAAgV,QAAAhV,KAAAiV,QAEA4U,iBAAA,SAAAE,GACA,IAAA0B,EAAAzrB,KAAAiV,OAAA8U,EAAA9U,OACA,OAAA8U,EAAA/U,OAAAiN,kBAAAjiB,KAAAgV,SAAAyW,KAEA7B,cAAA,SAAApB,GACA,OAAAA,EAAAqB,iBAAA7pB,OAEAiqB,gBAAA,SAAAC,GACA,OAAAvrB,KAAA6d,IAAA0N,EAAAgB,gBAAAlrB,KAAAgV,UAAAhV,KAAAiV,QAEA+U,WAAA,SAAApB,EAAA3hB,GACA,IAAAykB,EAAA1rB,KAAAgV,OAAAiN,kBAAA2G,GAcA,YAZA9jB,IAAAmC,IACA0N,QAAA0B,KAAA,sDACApP,EAAA,IAAmB8M,GAGnB9M,EAAAyO,KAAAkT,GAEA8C,EAAA1rB,KAAAiV,OAAAjV,KAAAiV,SACAhO,EAAAqR,IAAAtY,KAAAgV,QAAAyH,YACAxV,EAAAuR,eAAAxY,KAAAiV,QAAAgD,IAAAjY,KAAAgV,SAGA/N,GAEA0kB,eAAA,SAAA1kB,GAQA,YAPAnC,IAAAmC,IACA0N,QAAA0B,KAAA,0DACApP,EAAA,IAAmB4N,GAGnB5N,EAAAmM,IAAApT,KAAAgV,OAAAhV,KAAAgV,QACA/N,EAAA6hB,eAAA9oB,KAAAiV,QACAhO,GAEAkY,aAAA,SAAA6G,GAGA,OAFAhmB,KAAAgV,OAAAmK,aAAA6G,GACAhmB,KAAAiV,OAAAjV,KAAAiV,OAAA+Q,EAAA4F,oBACA5rB,MAEAsnB,UAAA,SAAAvO,GAEA,OADA/Y,KAAAgV,OAAAiD,IAAAc,GACA/Y,MAEA6Y,OAAA,SAAAkR,GACA,OAAAA,EAAA/U,OAAA6D,OAAA7Y,KAAAgV,SAAA+U,EAAA9U,SAAAjV,KAAAiV,UCjFA9X,OAAAgJ,OAAA+O,EAAA7W,UAAA,CACA6nB,WAAA,EACA9S,IAAA,SAAAsQ,EAAAC,EAAAC,EAAAiI,EAAAhI,EAAAC,EAAAC,EAAA+H,EAAA9H,EAAAC,EAAAC,EAAA6H,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA1Q,EAAAzb,KAAA0U,SAiBA,OAhBA+G,EAAA,GAAAiI,EACAjI,EAAA,GAAAkI,EACAlI,EAAA,GAAAmI,EACAnI,EAAA,IAAAoQ,EACApQ,EAAA,GAAAoI,EACApI,EAAA,GAAAqI,EACArI,EAAA,GAAAsI,EACAtI,EAAA,IAAAqQ,EACArQ,EAAA,GAAAuI,EACAvI,EAAA,GAAAwI,EACAxI,EAAA,IAAAyI,EACAzI,EAAA,IAAAsQ,EACAtQ,EAAA,GAAAuQ,EACAvQ,EAAA,GAAAwQ,EACAxQ,EAAA,IAAAyQ,EACAzQ,EAAA,IAAA0Q,EACAnsB,MAEAmkB,SAAA,WAEA,OADAnkB,KAAAoT,IAAA,iCACApT,MAEA2W,MAAA,WACA,WAAAzB,GAAA4D,UAAA9Y,KAAA0U,WAEAgB,KAAA,SAAA7Y,GACA,IAAA4e,EAAAzb,KAAA0U,SACA0P,EAAAvnB,EAAA6X,SAiBA,OAhBA+G,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,GAAA2I,EAAA,GACA3I,EAAA,IAAA2I,EAAA,IACA3I,EAAA,IAAA2I,EAAA,IACA3I,EAAA,IAAA2I,EAAA,IACA3I,EAAA,IAAA2I,EAAA,IACA3I,EAAA,IAAA2I,EAAA,IACA3I,EAAA,IAAA2I,EAAA,IACApkB,MAEAosB,aAAA,SAAAvvB,GACA,IAAA4e,EAAAzb,KAAA0U,SACA0P,EAAAvnB,EAAA6X,SAIA,OAHA+G,EAAA,IAAA2I,EAAA,IACA3I,EAAA,IAAA2I,EAAA,IACA3I,EAAA,IAAA2I,EAAA,IACApkB,MAEAqsB,aAAA,SAAAC,EAAAC,EAAAC,GAIA,OAHAF,EAAAvJ,oBAAA/iB,KAAA,GACAusB,EAAAxJ,oBAAA/iB,KAAA,GACAwsB,EAAAzJ,oBAAA/iB,KAAA,GACAA,MAEAysB,UAAA,SAAAH,EAAAC,EAAAC,GAEA,OADAxsB,KAAAoT,IAAAkZ,EAAAnpB,EAAAopB,EAAAppB,EAAAqpB,EAAArpB,EAAA,EAAAmpB,EAAAlpB,EAAAmpB,EAAAnpB,EAAAopB,EAAAppB,EAAA,EAAAkpB,EAAAjpB,EAAAkpB,EAAAlpB,EAAAmpB,EAAAnpB,EAAA,WACArD,MAEA0sB,gBAAA,WACA,IAAA1L,EAAA,IAAiBjN,EACjB,gBAAAlX,GAEA,IAAA4e,EAAAzb,KAAA0U,SACA0P,EAAAvnB,EAAA6X,SACAiY,EAAA,EAAA3L,EAAA+B,oBAAAlmB,EAAA,GAAA6C,SACAktB,EAAA,EAAA5L,EAAA+B,oBAAAlmB,EAAA,GAAA6C,SACAmtB,EAAA,EAAA7L,EAAA+B,oBAAAlmB,EAAA,GAAA6C,SAiBA,OAhBA+b,EAAA,GAAA2I,EAAA,GAAAuI,EACAlR,EAAA,GAAA2I,EAAA,GAAAuI,EACAlR,EAAA,GAAA2I,EAAA,GAAAuI,EACAlR,EAAA,KACAA,EAAA,GAAA2I,EAAA,GAAAwI,EACAnR,EAAA,GAAA2I,EAAA,GAAAwI,EACAnR,EAAA,GAAA2I,EAAA,GAAAwI,EACAnR,EAAA,KACAA,EAAA,GAAA2I,EAAA,GAAAyI,EACApR,EAAA,GAAA2I,EAAA,GAAAyI,EACApR,EAAA,IAAA2I,EAAA,IAAAyI,EACApR,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAzb,MAzBA,GA4BA8sB,sBAAA,SAAAlS,GACAA,KAAAE,SACAnG,QAAAC,MAAA,yGAGA,IAAA6G,EAAAzb,KAAA0U,SACAvR,EAAAyX,EAAAzX,EACAC,EAAAwX,EAAAxX,EACAC,EAAAuX,EAAAvX,EACA4Q,EAAAtV,KAAAkb,IAAA1W,GACAgQ,EAAAxU,KAAAub,IAAA/W,GACArG,EAAA6B,KAAAkb,IAAAzW,GACArG,EAAA4B,KAAAub,IAAA9W,GACA8b,EAAAvgB,KAAAkb,IAAAxW,GACAiX,EAAA3b,KAAAub,IAAA7W,GAEA,WAAAuX,EAAAvF,MAAA,CACA,IAAAqP,EAAAzQ,EAAAiL,EACA6N,EAAA9Y,EAAAqG,EACAqK,EAAAxR,EAAA+L,EACA8N,EAAA7Z,EAAAmH,EACAmB,EAAA,GAAA3e,EAAAoiB,EACAzD,EAAA,IAAA3e,EAAAwd,EACAmB,EAAA,GAAA1e,EACA0e,EAAA,GAAAsR,EAAApI,EAAA5nB,EACA0e,EAAA,GAAAiJ,EAAAsI,EAAAjwB,EACA0e,EAAA,IAAAtI,EAAArW,EACA2e,EAAA,GAAAuR,EAAAtI,EAAA3nB,EACA0e,EAAA,GAAAkJ,EAAAoI,EAAAhwB,EACA0e,EAAA,IAAAxH,EAAAnX,OACK,WAAA8d,EAAAvF,MAAA,CACL,IAAA4X,EAAAnwB,EAAAoiB,EACAgO,EAAApwB,EAAAwd,EACA6S,EAAApwB,EAAAmiB,EACAkO,EAAArwB,EAAAud,EACAmB,EAAA,GAAAwR,EAAAG,EAAAja,EACAsI,EAAA,GAAA0R,EAAAha,EAAA+Z,EACAzR,EAAA,GAAAxH,EAAAlX,EACA0e,EAAA,GAAAxH,EAAAqG,EACAmB,EAAA,GAAAxH,EAAAiL,EACAzD,EAAA,IAAAtI,EACAsI,EAAA,GAAAyR,EAAA/Z,EAAAga,EACA1R,EAAA,GAAA2R,EAAAH,EAAA9Z,EACAsI,EAAA,IAAAxH,EAAAnX,OACK,WAAA8d,EAAAvF,MAAA,CACL4X,EAAAnwB,EAAAoiB,EACAgO,EAAApwB,EAAAwd,EACA6S,EAAApwB,EAAAmiB,EACAkO,EAAArwB,EAAAud,EACAmB,EAAA,GAAAwR,EAAAG,EAAAja,EACAsI,EAAA,IAAAxH,EAAAqG,EACAmB,EAAA,GAAA0R,EAAAD,EAAA/Z,EACAsI,EAAA,GAAAyR,EAAAC,EAAAha,EACAsI,EAAA,GAAAxH,EAAAiL,EACAzD,EAAA,GAAA2R,EAAAH,EAAA9Z,EACAsI,EAAA,IAAAxH,EAAAlX,EACA0e,EAAA,GAAAtI,EACAsI,EAAA,IAAAxH,EAAAnX,OACK,WAAA8d,EAAAvF,MAAA,CACLqP,EAAAzQ,EAAAiL,EACA6N,EAAA9Y,EAAAqG,EACAqK,EAAAxR,EAAA+L,EACA8N,EAAA7Z,EAAAmH,EACAmB,EAAA,GAAA3e,EAAAoiB,EACAzD,EAAA,GAAAkJ,EAAA5nB,EAAAgwB,EACAtR,EAAA,GAAAiJ,EAAA3nB,EAAAiwB,EACAvR,EAAA,GAAA3e,EAAAwd,EACAmB,EAAA,GAAAuR,EAAAjwB,EAAA2nB,EACAjJ,EAAA,GAAAsR,EAAAhwB,EAAA4nB,EACAlJ,EAAA,IAAA1e,EACA0e,EAAA,GAAAtI,EAAArW,EACA2e,EAAA,IAAAxH,EAAAnX,OACK,WAAA8d,EAAAvF,MAAA,CACL,IAAAgY,EAAApZ,EAAAnX,EACAwwB,EAAArZ,EAAAlX,EACAwwB,EAAApa,EAAArW,EACA0wB,EAAAra,EAAApW,EACA0e,EAAA,GAAA3e,EAAAoiB,EACAzD,EAAA,GAAA+R,EAAAH,EAAA/S,EACAmB,EAAA,GAAA8R,EAAAjT,EAAAgT,EACA7R,EAAA,GAAAnB,EACAmB,EAAA,GAAAxH,EAAAiL,EACAzD,EAAA,IAAAtI,EAAA+L,EACAzD,EAAA,IAAA1e,EAAAmiB,EACAzD,EAAA,GAAA6R,EAAAhT,EAAAiT,EACA9R,EAAA,IAAA4R,EAAAG,EAAAlT,OACK,WAAAM,EAAAvF,MAAA,CACLgY,EAAApZ,EAAAnX,EACAwwB,EAAArZ,EAAAlX,EACAwwB,EAAApa,EAAArW,EACA0wB,EAAAra,EAAApW,EACA0e,EAAA,GAAA3e,EAAAoiB,EACAzD,EAAA,IAAAnB,EACAmB,EAAA,GAAA1e,EAAAmiB,EACAzD,EAAA,GAAA4R,EAAA/S,EAAAkT,EACA/R,EAAA,GAAAxH,EAAAiL,EACAzD,EAAA,GAAA6R,EAAAhT,EAAAiT,EACA9R,EAAA,GAAA8R,EAAAjT,EAAAgT,EACA7R,EAAA,GAAAtI,EAAA+L,EACAzD,EAAA,IAAA+R,EAAAlT,EAAA+S,EAYA,OARA5R,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAzb,MAEAytB,2BAAA,WACA,IAAAC,EAAA,IAAmB3Z,EAAO,OAC1B4Z,EAAA,IAAkB5Z,EAAO,OACzB,gBAAAR,GACA,OAAAvT,KAAA4tB,QAAAF,EAAAna,EAAAoa,IAJA,GAOAE,OAAA,WACA,IAAA1qB,EAAA,IAAgB4Q,EAChB3Q,EAAA,IAAgB2Q,EAChB1Q,EAAA,IAAgB0Q,EAChB,gBAAA+Z,EAAA7mB,EAAA8mB,GACA,IAAAtS,EAAAzb,KAAA0U,SAkCA,OAjCArR,EAAAsb,WAAAmP,EAAA7mB,GAEA,IAAA5D,EAAA4Z,aAEA5Z,IAAA,GAGAA,EAAAoZ,YACAtZ,EAAAge,aAAA4M,EAAA1qB,GAEA,IAAAF,EAAA8Z,aAEA,IAAAte,KAAA6d,IAAAuR,EAAA1qB,GACAA,EAAAF,GAAA,KAEAE,KAAA,KAGAA,EAAAoZ,YACAtZ,EAAAge,aAAA4M,EAAA1qB,IAGAF,EAAAsZ,YACArZ,EAAA+d,aAAA9d,EAAAF,GACAsY,EAAA,GAAAtY,IACAsY,EAAA,GAAArY,EAAAD,EACAsY,EAAA,GAAApY,EAAAF,EACAsY,EAAA,GAAAtY,EAAAC,EACAqY,EAAA,GAAArY,IACAqY,EAAA,GAAApY,EAAAD,EACAqY,EAAA,GAAAtY,EAAAE,EACAoY,EAAA,GAAArY,EAAAC,EACAoY,EAAA,IAAApY,IACArD,MAvCA,GA0CAuY,SAAA,SAAA1b,EAAAqB,GACA,YAAA4G,IAAA5G,GACAyW,QAAA0B,KAAA,oGACArW,KAAAykB,iBAAA5nB,EAAAqB,IAGA8B,KAAAykB,iBAAAzkB,KAAAnD,IAEAsgB,YAAA,SAAAtgB,GACA,OAAAmD,KAAAykB,iBAAA5nB,EAAAmD,OAEAykB,iBAAA,SAAAxQ,EAAAd,GACA,IAAAuR,EAAAzQ,EAAAS,SACAiQ,EAAAxR,EAAAuB,SACA+G,EAAAzb,KAAA0U,SACAkQ,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAsJ,EAAAtJ,EAAA,IACAK,EAAAL,EAAA,GACAM,EAAAN,EAAA,GACAO,EAAAP,EAAA,GACAuJ,EAAAvJ,EAAA,IACAQ,EAAAR,EAAA,GACAS,EAAAT,EAAA,GACAU,EAAAV,EAAA,IACAwJ,EAAAxJ,EAAA,IACAyJ,EAAAzJ,EAAA,GACA0J,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,IACA4J,EAAA5J,EAAA,IACAW,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GACA4J,EAAA5J,EAAA,IACAa,EAAAb,EAAA,GACAc,EAAAd,EAAA,GACAe,EAAAf,EAAA,GACA6J,EAAA7J,EAAA,IACAgB,EAAAhB,EAAA,GACAiB,EAAAjB,EAAA,GACAkB,EAAAlB,EAAA,IACA8J,EAAA9J,EAAA,IACA+J,EAAA/J,EAAA,GACAgK,EAAAhK,EAAA,GACAiK,EAAAjK,EAAA,IACAkK,EAAAlK,EAAA,IAiBA,OAhBAlJ,EAAA,GAAAmJ,EAAAS,EAAAR,EAAAW,EAAAV,EAAAa,EAAAqI,EAAAU,EACAjT,EAAA,GAAAmJ,EAAAU,EAAAT,EAAAY,EAAAX,EAAAc,EAAAoI,EAAAW,EACAlT,EAAA,GAAAmJ,EAAAW,EAAAV,EAAAa,EAAAZ,EAAAe,EAAAmI,EAAAY,EACAnT,EAAA,IAAAmJ,EAAA2J,EAAA1J,EAAA2J,EAAA1J,EAAA2J,EAAAT,EAAAa,EACApT,EAAA,GAAAsJ,EAAAM,EAAAL,EAAAQ,EAAAP,EAAAU,EAAAsI,EAAAS,EACAjT,EAAA,GAAAsJ,EAAAO,EAAAN,EAAAS,EAAAR,EAAAW,EAAAqI,EAAAU,EACAlT,EAAA,GAAAsJ,EAAAQ,EAAAP,EAAAU,EAAAT,EAAAY,EAAAoI,EAAAW,EACAnT,EAAA,IAAAsJ,EAAAwJ,EAAAvJ,EAAAwJ,EAAAvJ,EAAAwJ,EAAAR,EAAAY,EACApT,EAAA,GAAAyJ,EAAAG,EAAAF,EAAAK,EAAAJ,EAAAO,EAAAuI,EAAAQ,EACAjT,EAAA,GAAAyJ,EAAAI,EAAAH,EAAAM,EAAAL,EAAAQ,EAAAsI,EAAAS,EACAlT,EAAA,IAAAyJ,EAAAK,EAAAJ,EAAAO,EAAAN,EAAAS,EAAAqI,EAAAU,EACAnT,EAAA,IAAAyJ,EAAAqJ,EAAApJ,EAAAqJ,EAAApJ,EAAAqJ,EAAAP,EAAAW,EACApT,EAAA,GAAA0S,EAAA9I,EAAA+I,EAAA5I,EAAA6I,EAAA1I,EAAA2I,EAAAI,EACAjT,EAAA,GAAA0S,EAAA7I,EAAA8I,EAAA3I,EAAA4I,EAAAzI,EAAA0I,EAAAK,EACAlT,EAAA,IAAA0S,EAAA5I,EAAA6I,EAAA1I,EAAA2I,EAAAxI,EAAAyI,EAAAM,EACAnT,EAAA,IAAA0S,EAAAI,EAAAH,EAAAI,EAAAH,EAAAI,EAAAH,EAAAO,EACA7uB,MAEAwY,eAAA,SAAAha,GACA,IAAAid,EAAAzb,KAAA0U,SAiBA,OAhBA+G,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,KAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,KAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,KAAAjd,EACAid,EAAA,KAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,IAAAjd,EACAid,EAAA,KAAAjd,EACAid,EAAA,KAAAjd,EACAwB,MAEAskB,uBAAA,WACA,IAAAtD,EAAA,IAAiBjN,EACjB,gBAAAoP,GACA,QAAA1mB,EAAA,EAAAC,EAAAymB,EAAAoB,MAA0C9nB,EAAAC,EAAOD,IACjDukB,EAAA7d,EAAAggB,EAAAC,KAAA3mB,GACAukB,EAAA5d,EAAA+f,EAAAE,KAAA5mB,GACAukB,EAAA3d,EAAA8f,EAAAG,KAAA7mB,GACAukB,EAAA7B,aAAAnf,MACAmjB,EAAAqB,OAAA/nB,EAAAukB,EAAA7d,EAAA6d,EAAA5d,EAAA4d,EAAA3d,GAGA,OAAA8f,GAXA,GAcA2C,YAAA,WACA,IAAArK,EAAAzb,KAAA0U,SACAgP,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GACAmI,EAAAnI,EAAA,GACAoQ,EAAApQ,EAAA,IACAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GACAsI,EAAAtI,EAAA,GACAqQ,EAAArQ,EAAA,IACAuI,EAAAvI,EAAA,GACAwI,EAAAxI,EAAA,GACAyI,EAAAzI,EAAA,IACAsQ,EAAAtQ,EAAA,IAOA,OANAA,EAAA,KAMAoQ,EAAA9H,EAAAE,EAAAL,EAAAkI,EAAA7H,EAAA4H,EAAA/H,EAAAI,EAAAP,EAAAmI,EAAA5H,EAAAN,EAAAE,EAAAiI,EAAApI,EAAAI,EAAAgI,GALAtQ,EAAA,KAKAiI,EAAAK,EAAAgI,EAAArI,EAAAoI,EAAA5H,EAAA2H,EAAAhI,EAAAK,EAAAN,EAAAC,EAAAkI,EAAAnI,EAAAkI,EAAA9H,EAAA6H,EAAA9H,EAAAC,GAJAvI,EAAA,MAIAiI,EAAAoI,EAAA7H,EAAAP,EAAAI,EAAAiI,EAAAF,EAAAhI,EAAAI,EAAAN,EAAAE,EAAAkI,EAAAF,EAAA/H,EAAAE,EAAAL,EAAAmI,EAAA9H,GAHAvI,EAAA,MAGAmI,EAAAE,EAAAE,EAAAN,EAAAK,EAAAE,EAAAP,EAAAI,EAAAI,EAAAN,EAAAC,EAAAI,EAAAN,EAAAE,EAAAK,EAAAP,EAAAI,EAAAC,IAEAyC,UAAA,WACA,IACAC,EADAjL,EAAAzb,KAAA0U,SAoBA,OAlBAgS,EAAAjL,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAiL,EACAA,EAAAjL,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAiL,EACAA,EAAAjL,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAiL,EACAA,EAAAjL,EAAA,GACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAiL,EACAA,EAAAjL,EAAA,GACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAiL,EACAA,EAAAjL,EAAA,IACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAAiL,EACA1mB,MAEA8uB,YAAA,SAAA3rB,EAAAC,EAAAC,GACA,IAAAoY,EAAAzb,KAAA0U,SAYA,OAVAvR,EAAAkR,WACAoH,EAAA,IAAAtY,IACAsY,EAAA,IAAAtY,EAAAC,EACAqY,EAAA,IAAAtY,EAAAE,IAEAoY,EAAA,IAAAtY,EACAsY,EAAA,IAAArY,EACAqY,EAAA,IAAApY,GAGArD,MAEA+lB,WAAA,SAAAlpB,EAAAopB,GAEA,IAAAxK,EAAAzb,KAAA0U,SACA0P,EAAAvnB,EAAA6X,SACAgP,EAAAU,EAAA,GACAP,EAAAO,EAAA,GACAJ,EAAAI,EAAA,GACA4H,EAAA5H,EAAA,GACAT,EAAAS,EAAA,GACAN,EAAAM,EAAA,GACAH,EAAAG,EAAA,GACA6H,EAAA7H,EAAA,GACAR,EAAAQ,EAAA,GACAL,EAAAK,EAAA,GACAF,EAAAE,EAAA,IACA8H,EAAA9H,EAAA,IACAyH,EAAAzH,EAAA,IACA0H,EAAA1H,EAAA,IACA2H,EAAA3H,EAAA,IACA+H,EAAA/H,EAAA,IACA+B,EAAApC,EAAAgI,EAAAE,EAAAH,EAAA5H,EAAA+H,EAAAH,EAAA7H,EAAAiI,EAAApI,EAAAiI,EAAAG,EAAAnI,EAAAE,EAAAkI,EAAArI,EAAAI,EAAAiI,EACA/F,EAAAyF,EAAA3H,EAAA+H,EAAArI,EAAAmI,EAAAE,EAAAJ,EAAA5H,EAAAiI,EAAAvI,EAAAoI,EAAAG,EAAAtI,EAAAK,EAAAkI,EAAAxI,EAAAO,EAAAiI,EACA9F,EAAAzC,EAAAkI,EAAAG,EAAAJ,EAAA9H,EAAAkI,EAAAJ,EAAA/H,EAAAoI,EAAAvI,EAAAmI,EAAAI,EAAAtI,EAAAE,EAAAqI,EAAAxI,EAAAI,EAAAoI,EACA4C,EAAAlD,EAAA9H,EAAAE,EAAAL,EAAAkI,EAAA7H,EAAA4H,EAAA/H,EAAAI,EAAAP,EAAAmI,EAAA5H,EAAAN,EAAAE,EAAAiI,EAAApI,EAAAI,EAAAgI,EACAzF,EAAA5C,EAAAyC,EAAAtC,EAAAuC,EAAApC,EAAAqC,EAAA2F,EAAA+C,EAEA,OAAAzI,EAAA,CACA,IAAAC,EAAA,qEAEA,QAAAN,EACA,UAAAlL,MAAAwL,GAKA,OAHA5R,QAAA0B,KAAAkQ,GAGAvmB,KAAAmkB,WAGA,IAAAqC,EAAA,EAAAF,EAiBA,OAhBA7K,EAAA,GAAA0K,EAAAK,EACA/K,EAAA,IAAAqQ,EAAA5H,EAAA8H,EAAAjI,EAAAgI,EAAAC,EAAAF,EAAA9H,EAAAkI,EAAArI,EAAAkI,EAAAG,EAAAnI,EAAAC,EAAAmI,EAAAtI,EAAAK,EAAAiI,GAAA3F,EACA/K,EAAA,IAAAqI,EAAAiI,EAAAC,EAAAF,EAAA7H,EAAA+H,EAAAF,EAAA9H,EAAAiI,EAAApI,EAAAkI,EAAAE,EAAAnI,EAAAE,EAAAmI,EAAAtI,EAAAI,EAAAkI,GAAA3F,EACA/K,EAAA,IAAAsI,EAAAE,EAAA+H,EAAAlI,EAAAI,EAAA8H,EAAAjI,EAAAC,EAAAiI,EAAApI,EAAAK,EAAA+H,EAAAnI,EAAAE,EAAAkI,EAAArI,EAAAI,EAAAiI,GAAA1F,EACA/K,EAAA,GAAA2K,EAAAI,EACA/K,EAAA,IAAAmI,EAAAmI,EAAAC,EAAAH,EAAA3H,EAAA8H,EAAAH,EAAA7H,EAAAkI,EAAAxI,EAAAqI,EAAAG,EAAAtI,EAAAI,EAAAmI,EAAAzI,EAAAQ,EAAAiI,GAAA3F,EACA/K,EAAA,IAAAoQ,EAAA5H,EAAA+H,EAAArI,EAAAoI,EAAAC,EAAAH,EAAA7H,EAAAiI,EAAAvI,EAAAqI,EAAAE,EAAAtI,EAAAK,EAAAmI,EAAAzI,EAAAO,EAAAkI,GAAA3F,EACA/K,EAAA,IAAAkI,EAAAO,EAAA8H,EAAApI,EAAAK,EAAA+H,EAAApI,EAAAI,EAAAiI,EAAAvI,EAAAQ,EAAA+H,EAAAtI,EAAAK,EAAAkI,EAAAxI,EAAAO,EAAAiI,GAAA1F,EACA/K,EAAA,GAAA4K,EAAAG,EACA/K,EAAA,IAAAoQ,EAAA9H,EAAAiI,EAAApI,EAAAkI,EAAAE,EAAAH,EAAAhI,EAAAqI,EAAAxI,EAAAoI,EAAAI,EAAAtI,EAAAC,EAAAsI,EAAAzI,EAAAK,EAAAoI,GAAA3F,EACA/K,EAAA,KAAAkI,EAAAmI,EAAAE,EAAAH,EAAA/H,EAAAkI,EAAAH,EAAAhI,EAAAoI,EAAAvI,EAAAoI,EAAAG,EAAAtI,EAAAE,EAAAsI,EAAAzI,EAAAI,EAAAqI,GAAA3F,EACA/K,EAAA,KAAAmI,EAAAE,EAAAkI,EAAArI,EAAAI,EAAAiI,EAAApI,EAAAC,EAAAoI,EAAAvI,EAAAK,EAAAkI,EAAAtI,EAAAE,EAAAqI,EAAAxI,EAAAI,EAAAoI,GAAA1F,EACA/K,EAAA,IAAAsT,EAAAvI,EACA/K,EAAA,KAAAmI,EAAAkI,EAAA9H,EAAA6H,EAAA9H,EAAAC,EAAA6H,EAAAhI,EAAAK,EAAAR,EAAAoI,EAAA5H,EAAAN,EAAAC,EAAAkI,EAAArI,EAAAK,EAAAgI,GAAAvF,EACA/K,EAAA,KAAAoQ,EAAA/H,EAAAE,EAAAL,EAAAmI,EAAA9H,EAAA6H,EAAAhI,EAAAI,EAAAP,EAAAoI,EAAA7H,EAAAN,EAAAE,EAAAkI,EAAArI,EAAAI,EAAAiI,GAAAvF,EACA/K,EAAA,KAAAkI,EAAAI,EAAAC,EAAAJ,EAAAE,EAAAE,EAAAJ,EAAAC,EAAAI,EAAAP,EAAAK,EAAAE,EAAAN,EAAAE,EAAAK,EAAAR,EAAAI,EAAAI,GAAAsC,EACAxmB,MAEAonB,MAAA,SAAApK,GACA,IAAAvB,EAAAzb,KAAA0U,SACAvR,EAAA6Z,EAAA7Z,EACAC,EAAA4Z,EAAA5Z,EACAC,EAAA2Z,EAAA3Z,EAaA,OAZAoY,EAAA,IAAAtY,EACAsY,EAAA,IAAArY,EACAqY,EAAA,IAAApY,EACAoY,EAAA,IAAAtY,EACAsY,EAAA,IAAArY,EACAqY,EAAA,IAAApY,EACAoY,EAAA,IAAAtY,EACAsY,EAAA,IAAArY,EACAqY,EAAA,KAAApY,EACAoY,EAAA,IAAAtY,EACAsY,EAAA,IAAArY,EACAqY,EAAA,KAAApY,EACArD,MAEA4rB,kBAAA,WACA,IAAAnQ,EAAAzb,KAAA0U,SACAsa,EAAAvT,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAwT,EAAAxT,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAyT,EAAAzT,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IACA,OAAA9c,KAAAC,KAAAD,KAAAsJ,IAAA+mB,EAAAC,EAAAC,KAEAC,gBAAA,SAAAhsB,EAAAC,EAAAC,GAEA,OADArD,KAAAoT,IAAA,MAAAjQ,EAAA,MAAAC,EAAA,MAAAC,EAAA,SACArD,MAEAovB,cAAA,SAAArN,GACA,IAAAjlB,EAAA6B,KAAAkb,IAAAkI,GACAvjB,EAAAG,KAAAub,IAAA6H,GAEA,OADA/hB,KAAAoT,IAAA,UAAAtW,GAAA0B,EAAA,IAAAA,EAAA1B,EAAA,WACAkD,MAEAqvB,cAAA,SAAAtN,GACA,IAAAjlB,EAAA6B,KAAAkb,IAAAkI,GACAvjB,EAAAG,KAAAub,IAAA6H,GAEA,OADA/hB,KAAAoT,IAAAtW,EAAA,EAAA0B,EAAA,WAAAA,EAAA,EAAA1B,EAAA,WACAkD,MAEAsvB,cAAA,SAAAvN,GACA,IAAAjlB,EAAA6B,KAAAkb,IAAAkI,GACAvjB,EAAAG,KAAAub,IAAA6H,GAEA,OADA/hB,KAAAoT,IAAAtW,GAAA0B,EAAA,IAAAA,EAAA1B,EAAA,qBACAkD,MAEAuvB,iBAAA,SAAAlU,EAAAC,GAEA,IAAAxe,EAAA6B,KAAAkb,IAAAyB,GACA9c,EAAAG,KAAAub,IAAAoB,GACA3d,EAAA,EAAAb,EACAqG,EAAAkY,EAAAlY,EACAC,EAAAiY,EAAAjY,EACAC,EAAAgY,EAAAhY,EACA0jB,EAAAppB,EAAAwF,EACA6jB,EAAArpB,EAAAyF,EAEA,OADApD,KAAAoT,IAAA2T,EAAA5jB,EAAArG,EAAAiqB,EAAA3jB,EAAA5E,EAAA6E,EAAA0jB,EAAA1jB,EAAA7E,EAAA4E,EAAA,EAAA2jB,EAAA3jB,EAAA5E,EAAA6E,EAAA2jB,EAAA5jB,EAAAtG,EAAAkqB,EAAA3jB,EAAA7E,EAAA2E,EAAA,EAAA4jB,EAAA1jB,EAAA7E,EAAA4E,EAAA4jB,EAAA3jB,EAAA7E,EAAA2E,EAAAxF,EAAA0F,IAAAvG,EAAA,WACAkD,MAEAwvB,UAAA,SAAArsB,EAAAC,EAAAC,GAEA,OADArD,KAAAoT,IAAAjQ,EAAA,QAAAC,EAAA,QAAAC,EAAA,WACArD,MAEAyvB,UAAA,SAAAtsB,EAAAC,EAAAC,GAEA,OADArD,KAAAoT,IAAA,EAAAhQ,EAAAC,EAAA,EAAAF,EAAA,EAAAE,EAAA,EAAAF,EAAAC,EAAA,aACApD,MAEA4tB,QAAA,SAAArE,EAAA7O,EAAA0M,GACA,IAAA3L,EAAAzb,KAAA0U,SACAvR,EAAAuX,EAAA/G,GACAvQ,EAAAsX,EAAA9G,GACAvQ,EAAAqX,EAAA7G,GACAvQ,EAAAoX,EAAA5G,GACAvS,EAAA4B,IACA3B,EAAA4B,IACAT,EAAAU,IACAqsB,EAAAvsB,EAAA5B,EACAouB,EAAAxsB,EAAA3B,EACAouB,EAAAzsB,EAAAR,EACAktB,EAAAzsB,EAAA5B,EACAsuB,EAAA1sB,EAAAT,EACAotB,EAAA1sB,EAAAV,EACAqtB,EAAA1sB,EAAA/B,EACA0uB,EAAA3sB,EAAA9B,EACA0uB,EAAA5sB,EAAAX,EACAmgB,EAAAsE,EAAAjkB,EACA6f,EAAAoE,EAAAhkB,EACA6f,EAAAmE,EAAA/jB,EAiBA,OAhBAoY,EAAA,OAAAoU,EAAAE,IAAAjN,EACArH,EAAA,IAAAkU,EAAAO,GAAApN,EACArH,EAAA,IAAAmU,EAAAK,GAAAnN,EACArH,EAAA,KACAA,EAAA,IAAAkU,EAAAO,GAAAlN,EACAvH,EAAA,OAAAiU,EAAAK,IAAA/M,EACAvH,EAAA,IAAAqU,EAAAE,GAAAhN,EACAvH,EAAA,KACAA,EAAA,IAAAmU,EAAAK,GAAAhN,EACAxH,EAAA,IAAAqU,EAAAE,GAAA/M,EACAxH,EAAA,QAAAiU,EAAAG,IAAA5M,EACAxH,EAAA,MACAA,EAAA,IAAA8N,EAAApmB,EACAsY,EAAA,IAAA8N,EAAAnmB,EACAqY,EAAA,IAAA8N,EAAAlmB,EACAoY,EAAA,MACAzb,MAEAmwB,UAAA,WACA,IAAAxO,EAAA,IAAqB5N,EACrBiS,EAAA,IAAA9Q,EACA,gBAAAqU,EAAA7O,EAAA0M,GACA,IAAA3L,EAAAzb,KAAA0U,SACAoO,EAAAnB,EAAAvO,IAAAqI,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAA/b,SACAsjB,EAAArB,EAAAvO,IAAAqI,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAA/b,SACAujB,EAAAtB,EAAAvO,IAAAqI,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAAA/b,SAEAM,KAAA8lB,cACA,IAAAhD,MACAyG,EAAApmB,EAAAsY,EAAA,IACA8N,EAAAnmB,EAAAqY,EAAA,IACA8N,EAAAlmB,EAAAoY,EAAA,IAEAuK,EAAAtQ,KAAA1V,MACA,IAAAowB,EAAA,EAAAtN,EACAuN,EAAA,EAAArN,EACAsN,EAAA,EAAArN,EAcA,OAbA+C,EAAAtR,SAAA,IAAA0b,EACApK,EAAAtR,SAAA,IAAA0b,EACApK,EAAAtR,SAAA,IAAA0b,EACApK,EAAAtR,SAAA,IAAA2b,EACArK,EAAAtR,SAAA,IAAA2b,EACArK,EAAAtR,SAAA,IAAA2b,EACArK,EAAAtR,SAAA,IAAA4b,EACAtK,EAAAtR,SAAA,IAAA4b,EACAtK,EAAAtR,SAAA,KAAA4b,EACA5V,EAAAc,sBAAAwK,GACAoB,EAAAjkB,EAAA2f,EACAsE,EAAAhkB,EAAA4f,EACAoE,EAAA/jB,EAAA4f,EACAjjB,MAhCA,GAmCAuwB,gBAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,QACA/rB,IAAA+rB,GACAlc,QAAA0B,KAAA,wGAGA,IAAAoF,EAAAzb,KAAA0U,SACAvR,EAAA,EAAAytB,GAAAH,EAAAD,GACAptB,EAAA,EAAAwtB,GAAAF,EAAAC,GACA1c,GAAAwc,EAAAD,IAAAC,EAAAD,GACArd,GAAAud,EAAAC,IAAAD,EAAAC,GACA7zB,IAAA+zB,EAAAD,IAAAC,EAAAD,GACA7zB,GAAA,EAAA8zB,EAAAD,GAAAC,EAAAD,GAiBA,OAhBAnV,EAAA,GAAAtY,EACAsY,EAAA,KACAA,EAAA,GAAAxH,EACAwH,EAAA,MACAA,EAAA,KACAA,EAAA,GAAArY,EACAqY,EAAA,GAAAtI,EACAsI,EAAA,MACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA3e,EACA2e,EAAA,IAAA1e,EACA0e,EAAA,KACAA,EAAA,KACAA,EAAA,OACAA,EAAA,MACAzb,MAEA8wB,iBAAA,SAAAN,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAApV,EAAAzb,KAAA0U,SACApR,EAAA,GAAAmtB,EAAAD,GACA7wB,EAAA,GAAA+wB,EAAAC,GACApyB,EAAA,GAAAsyB,EAAAD,GACAztB,GAAAstB,EAAAD,GAAAltB,EACAF,GAAAstB,EAAAC,GAAAhxB,EACA0D,GAAAwtB,EAAAD,GAAAryB,EAiBA,OAhBAkd,EAAA,KAAAnY,EACAmY,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAtY,EACAsY,EAAA,KACAA,EAAA,KAAA9b,EACA8b,EAAA,KACAA,EAAA,KAAArY,EACAqY,EAAA,KACAA,EAAA,KACAA,EAAA,OAAAld,EACAkd,EAAA,KAAApY,EACAoY,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAzb,MAEA6Y,OAAA,SAAAmN,GAIA,IAHA,IAAAvK,EAAAzb,KAAA0U,SACA0P,EAAA4B,EAAAtR,SAEAjY,EAAA,EAAmBA,EAAA,GAAQA,IAC3B,GAAAgf,EAAAhf,KAAA2nB,EAAA3nB,GAAA,SAGA,UAEAqc,UAAA,SAAA5R,EAAA6R,QACAjU,IAAAiU,MAAA,GAEA,QAAAtc,EAAA,EAAmBA,EAAA,GAAQA,IAC3BuD,KAAA0U,SAAAjY,GAAAyK,EAAAzK,EAAAsc,GAGA,OAAA/Y,MAEAgZ,QAAA,SAAA9R,EAAA6R,QACAjU,IAAAoC,MAAA,SACApC,IAAAiU,MAAA,GACA,IAAA0C,EAAAzb,KAAA0U,SAiBA,OAhBAxN,EAAA6R,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,GAAA0C,EAAA,GACAvU,EAAA6R,EAAA,IAAA0C,EAAA,IACAvU,EAAA6R,EAAA,IAAA0C,EAAA,IACAvU,EAAA6R,EAAA,IAAA0C,EAAA,IACAvU,EAAA6R,EAAA,IAAA0C,EAAA,IACAvU,EAAA6R,EAAA,IAAA0C,EAAA,IACAvU,EAAA6R,EAAA,IAAA0C,EAAA,IACAvU,KCntBA/J,OAAAod,iBAAApF,EAAA9W,UAAA,CACA0yB,MAAA,CACAzzB,IAAA,WACA,OAAA0C,KAAAmD,GAEAiQ,IAAA,SAAA1V,GACAsC,KAAAmD,EAAAzF,IAGAszB,OAAA,CACA1zB,IAAA,WACA,OAAA0C,KAAAoD,GAEAgQ,IAAA,SAAA1V,GACAsC,KAAAoD,EAAA1F,MAIAP,OAAAgJ,OAAAgP,EAAA9W,UAAA,CACA4yB,WAAA,EACA7d,IAAA,SAAAjQ,EAAAC,GAGA,OAFApD,KAAAmD,IACAnD,KAAAoD,IACApD,MAEA6V,UAAA,SAAAC,GAGA,OAFA9V,KAAAmD,EAAA2S,EACA9V,KAAAoD,EAAA0S,EACA9V,MAEAoe,KAAA,SAAAjb,GAEA,OADAnD,KAAAmD,IACAnD,MAEAqe,KAAA,SAAAjb,GAEA,OADApD,KAAAoD,IACApD,MAEAue,aAAA,SAAA1X,EAAAnJ,GACA,OAAAmJ,GACA,OACA7G,KAAAmD,EAAAzF,EACA,MAEA,OACAsC,KAAAoD,EAAA1F,EACA,MAEA,QACA,UAAAqd,MAAA,0BAAAlU,GAGA,OAAA7G,MAEAwe,aAAA,SAAA3X,GACA,OAAAA,GACA,OACA,OAAA7G,KAAAmD,EAEA,OACA,OAAAnD,KAAAoD,EAEA,QACA,UAAA2X,MAAA,0BAAAlU,KAGA8P,MAAA,WACA,WAAA3W,KAAA4W,YAAA5W,KAAAmD,EAAAnD,KAAAoD,IAEAsS,KAAA,SAAAsH,GAGA,OAFAhd,KAAAmD,EAAA6Z,EAAA7Z,EACAnD,KAAAoD,EAAA4Z,EAAA5Z,EACApD,MAEAiY,IAAA,SAAA+E,EAAA1Z,GACA,YAAAwB,IAAAxB,GACAqR,QAAA0B,KAAA,yFACArW,KAAAye,WAAAzB,EAAA1Z,KAGAtD,KAAAmD,GAAA6Z,EAAA7Z,EACAnD,KAAAoD,GAAA4Z,EAAA5Z,EACApD,OAEAqY,UAAA,SAAA7Z,GAGA,OAFAwB,KAAAmD,GAAA3E,EACAwB,KAAAoD,GAAA5E,EACAwB,MAEAye,WAAA,SAAAxK,EAAAd,GAGA,OAFAnT,KAAAmD,EAAA8Q,EAAA9Q,EAAAgQ,EAAAhQ,EACAnD,KAAAoD,EAAA6Q,EAAA7Q,EAAA+P,EAAA/P,EACApD,MAEA0e,gBAAA,SAAA1B,EAAAxe,GAGA,OAFAwB,KAAAmD,GAAA6Z,EAAA7Z,EAAA3E,EACAwB,KAAAoD,GAAA4Z,EAAA5Z,EAAA5E,EACAwB,MAEAsY,IAAA,SAAA0E,EAAA1Z,GACA,YAAAwB,IAAAxB,GACAqR,QAAA0B,KAAA,yFACArW,KAAA2e,WAAA3B,EAAA1Z,KAGAtD,KAAAmD,GAAA6Z,EAAA7Z,EACAnD,KAAAoD,GAAA4Z,EAAA5Z,EACApD,OAEA4e,UAAA,SAAApgB,GAGA,OAFAwB,KAAAmD,GAAA3E,EACAwB,KAAAoD,GAAA5E,EACAwB,MAEA2e,WAAA,SAAA1K,EAAAd,GAGA,OAFAnT,KAAAmD,EAAA8Q,EAAA9Q,EAAAgQ,EAAAhQ,EACAnD,KAAAoD,EAAA6Q,EAAA7Q,EAAA+P,EAAA/P,EACApD,MAEAuY,SAAA,SAAAyE,GAGA,OAFAhd,KAAAmD,GAAA6Z,EAAA7Z,EACAnD,KAAAoD,GAAA4Z,EAAA5Z,EACApD,MAEAwY,eAAA,SAAA1C,GAGA,OAFA9V,KAAAmD,GAAA2S,EACA9V,KAAAoD,GAAA0S,EACA9V,MAEAogB,OAAA,SAAApD,GAGA,OAFAhd,KAAAmD,GAAA6Z,EAAA7Z,EACAnD,KAAAoD,GAAA4Z,EAAA5Z,EACApD,MAEAqgB,aAAA,SAAAvK,GACA,OAAA9V,KAAAwY,eAAA,EAAA1C,IAEAmJ,aAAA,SAAApiB,GACA,IAAAsG,EAAAnD,KAAAmD,EACAC,EAAApD,KAAAoD,EACA8b,EAAAriB,EAAA6X,SAGA,OAFA1U,KAAAmD,EAAA+b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,GACAlf,KAAAoD,EAAA8b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,GACAlf,MAEAgI,IAAA,SAAAgV,GAGA,OAFAhd,KAAAmD,EAAAxE,KAAAqJ,IAAAhI,KAAAmD,EAAA6Z,EAAA7Z,GACAnD,KAAAoD,EAAAzE,KAAAqJ,IAAAhI,KAAAoD,EAAA4Z,EAAA5Z,GACApD,MAEAiI,IAAA,SAAA+U,GAGA,OAFAhd,KAAAmD,EAAAxE,KAAAsJ,IAAAjI,KAAAmD,EAAA6Z,EAAA7Z,GACAnD,KAAAoD,EAAAzE,KAAAsJ,IAAAjI,KAAAoD,EAAA4Z,EAAA5Z,GACApD,MAEA+H,MAAA,SAAAC,EAAAC,GAIA,OAFAjI,KAAAmD,EAAAxE,KAAAsJ,IAAAD,EAAA7E,EAAAxE,KAAAqJ,IAAAC,EAAA9E,EAAAnD,KAAAmD,IACAnD,KAAAoD,EAAAzE,KAAAsJ,IAAAD,EAAA5E,EAAAzE,KAAAqJ,IAAAC,EAAA7E,EAAApD,KAAAoD,IACApD,MAEAsgB,YAAA,SAAAC,EAAAC,GAGA,OAFAxgB,KAAAmD,EAAAxE,KAAAsJ,IAAAsY,EAAA5hB,KAAAqJ,IAAAwY,EAAAxgB,KAAAmD,IACAnD,KAAAoD,EAAAzE,KAAAsJ,IAAAsY,EAAA5hB,KAAAqJ,IAAAwY,EAAAxgB,KAAAoD,IACApD,MAEAygB,YAAA,SAAAzY,EAAAC,GACA,IAAAvI,EAAAM,KAAAN,SACA,OAAAM,KAAAqgB,aAAA3gB,GAAA,GAAA8Y,eAAA7Z,KAAAsJ,IAAAD,EAAArJ,KAAAqJ,IAAAC,EAAAvI,MAEAuB,MAAA,WAGA,OAFAjB,KAAAmD,EAAAxE,KAAAsC,MAAAjB,KAAAmD,GACAnD,KAAAoD,EAAAzE,KAAAsC,MAAAjB,KAAAoD,GACApD,MAEAwJ,KAAA,WAGA,OAFAxJ,KAAAmD,EAAAxE,KAAA6K,KAAAxJ,KAAAmD,GACAnD,KAAAoD,EAAAzE,KAAA6K,KAAAxJ,KAAAoD,GACApD,MAEA0gB,MAAA,WAGA,OAFA1gB,KAAAmD,EAAAxE,KAAA+hB,MAAA1gB,KAAAmD,GACAnD,KAAAoD,EAAAzE,KAAA+hB,MAAA1gB,KAAAoD,GACApD,MAEA2gB,YAAA,WAGA,OAFA3gB,KAAAmD,EAAAnD,KAAAmD,EAAA,EAAAxE,KAAA6K,KAAAxJ,KAAAmD,GAAAxE,KAAAsC,MAAAjB,KAAAmD,GACAnD,KAAAoD,EAAApD,KAAAoD,EAAA,EAAAzE,KAAA6K,KAAAxJ,KAAAoD,GAAAzE,KAAAsC,MAAAjB,KAAAoD,GACApD,MAEA4gB,OAAA,WAGA,OAFA5gB,KAAAmD,GAAAnD,KAAAmD,EACAnD,KAAAoD,GAAApD,KAAAoD,EACApD,MAEAuc,IAAA,SAAAS,GACA,OAAAhd,KAAAmD,EAAA6Z,EAAA7Z,EAAAnD,KAAAoD,EAAA4Z,EAAA5Z,GAEA8d,MAAA,SAAAlE,GACA,OAAAhd,KAAAmD,EAAA6Z,EAAA5Z,EAAApD,KAAAoD,EAAA4Z,EAAA7Z,GAEA8Z,SAAA,WACA,OAAAjd,KAAAmD,EAAAnD,KAAAmD,EAAAnD,KAAAoD,EAAApD,KAAAoD,GAEA1D,OAAA,WACA,OAAAf,KAAAC,KAAAoB,KAAAmD,EAAAnD,KAAAmD,EAAAnD,KAAAoD,EAAApD,KAAAoD,IAEAyd,gBAAA,WACA,OAAAliB,KAAA6d,IAAAxc,KAAAmD,GAAAxE,KAAA6d,IAAAxc,KAAAoD,IAEAqZ,UAAA,WACA,OAAAzc,KAAAqgB,aAAArgB,KAAAN,UAAA,IAEA4b,MAAA,WAEA,IAAAA,EAAA3c,KAAAyb,MAAApa,KAAAoD,EAAApD,KAAAmD,GAEA,OADAmY,EAAA,IAAAA,GAAA,EAAA3c,KAAA2I,IACAgU,GAEA0G,WAAA,SAAAhF,GACA,OAAAre,KAAAC,KAAAoB,KAAAiiB,kBAAAjF,KAEAiF,kBAAA,SAAAjF,GACA,IAAAkF,EAAAliB,KAAAmD,EAAA6Z,EAAA7Z,EACAgf,EAAAniB,KAAAoD,EAAA4Z,EAAA5Z,EACA,OAAA8e,IAAAC,KAEAE,oBAAA,SAAArF,GACA,OAAAre,KAAA6d,IAAAxc,KAAAmD,EAAA6Z,EAAA7Z,GAAAxE,KAAA6d,IAAAxc,KAAAoD,EAAA4Z,EAAA5Z,IAEA0d,UAAA,SAAAphB,GACA,OAAAM,KAAAyc,YAAAjE,eAAA9Y,IAEA8I,KAAA,SAAAwU,EAAAvE,GAGA,OAFAzY,KAAAmD,IAAA6Z,EAAA7Z,EAAAnD,KAAAmD,GAAAsV,EACAzY,KAAAoD,IAAA4Z,EAAA5Z,EAAApD,KAAAoD,GAAAqV,EACAzY,MAEA+gB,YAAA,SAAAC,EAAAC,EAAAxI,GACA,OAAAzY,KAAA2e,WAAAsC,EAAAD,GAAAxI,eAAAC,GAAAR,IAAA+I,IAEAnI,OAAA,SAAAmE,GACA,OAAAA,EAAA7Z,IAAAnD,KAAAmD,GAAA6Z,EAAA5Z,IAAApD,KAAAoD,GAEA0V,UAAA,SAAA5R,EAAA6R,GAIA,YAHAjU,IAAAiU,MAAA,GACA/Y,KAAAmD,EAAA+D,EAAA6R,GACA/Y,KAAAoD,EAAA8D,EAAA6R,EAAA,GACA/Y,MAEAgZ,QAAA,SAAA9R,EAAA6R,GAKA,YAJAjU,IAAAoC,MAAA,SACApC,IAAAiU,MAAA,GACA7R,EAAA6R,GAAA/Y,KAAAmD,EACA+D,EAAA6R,EAAA,GAAA/Y,KAAAoD,EACA8D,GAEAgc,oBAAA,SAAAC,EAAAtc,EAAAkS,GAOA,YANAjU,IAAAiU,GACApE,QAAA0B,KAAA,uEAGArW,KAAAmD,EAAAggB,EAAAC,KAAAvc,GACA7G,KAAAoD,EAAA+f,EAAAE,KAAAxc,GACA7G,MAEAkxB,aAAA,SAAAlc,EAAAsG,GACA,IAAAxe,EAAA6B,KAAAkb,IAAAyB,GACA9c,EAAAG,KAAAub,IAAAoB,GACAnY,EAAAnD,KAAAmD,EAAA6R,EAAA7R,EACAC,EAAApD,KAAAoD,EAAA4R,EAAA5R,EAGA,OAFApD,KAAAmD,IAAArG,EAAAsG,EAAA5E,EAAAwW,EAAA7R,EACAnD,KAAAoD,EAAAD,EAAA3E,EAAA4E,EAAAtG,EAAAkY,EAAA5R,EACApD,QC3QAoV,EAAA+b,eAAA,sCACA/b,EAAAG,aAAA,MACApY,OAAAod,iBAAAnF,EAAA/W,UAAA,CACA8E,EAAA,CACA7F,IAAA,WACA,OAAA0C,KAAA2T,IAEAP,IAAA,SAAA1V,GACAsC,KAAA2T,GAAAjW,EAEAsC,KAAAwa,sBAGApX,EAAA,CACA9F,IAAA,WACA,OAAA0C,KAAA4T,IAEAR,IAAA,SAAA1V,GACAsC,KAAA4T,GAAAlW,EAEAsC,KAAAwa,sBAGAnX,EAAA,CACA/F,IAAA,WACA,OAAA0C,KAAA6T,IAEAT,IAAA,SAAA1V,GACAsC,KAAA6T,GAAAnW,EAEAsC,KAAAwa,sBAGAnF,MAAA,CACA/X,IAAA,WACA,OAAA0C,KAAAsV,QAEAlC,IAAA,SAAA1V,GACAsC,KAAAsV,OAAA5X,EAEAsC,KAAAwa,wBAIArd,OAAAgJ,OAAAiP,EAAA/W,UAAA,CACAyc,SAAA,EACA1H,IAAA,SAAAjQ,EAAAC,EAAAC,EAAAgS,GAQA,OAPArV,KAAA2T,GAAAxQ,EACAnD,KAAA4T,GAAAxQ,EACApD,KAAA6T,GAAAxQ,EACArD,KAAAsV,OAAAD,GAAArV,KAAAsV,OAEAtV,KAAAwa,oBAEAxa,MAEA2W,MAAA,WACA,WAAA3W,KAAA4W,YAAA5W,KAAA2T,GAAA3T,KAAA4T,GAAA5T,KAAA6T,GAAA7T,KAAAsV,SAEAI,KAAA,SAAAkF,GAQA,OAPA5a,KAAA2T,GAAAiH,EAAAjH,GACA3T,KAAA4T,GAAAgH,EAAAhH,GACA5T,KAAA6T,GAAA+G,EAAA/G,GACA7T,KAAAsV,OAAAsF,EAAAtF,OAEAtV,KAAAwa,oBAEAxa,MAEAwb,sBAAA,SAAA3e,EAAAwY,EAAAwF,GACA,IAAA9S,EAAgBX,EAAKW,MAErB0T,EAAA5e,EAAA6X,SACAgH,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GACAM,EAAAN,EAAA,GACAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GACAS,EAAAT,EAAA,IAqEA,MAlEA,SAFApG,KAAArV,KAAAsV,SAGAtV,KAAA4T,GAAAjV,KAAAyyB,KAAArpB,EAAA6T,GAAA,MAEAjd,KAAA6d,IAAAZ,GAAA,QACA5b,KAAA2T,GAAAhV,KAAAyb,OAAA2B,EAAAG,GACAlc,KAAA6T,GAAAlV,KAAAyb,OAAAuB,EAAAD,KAEA1b,KAAA2T,GAAAhV,KAAAyb,MAAA6B,EAAAH,GACA9b,KAAA6T,GAAA,IAEK,QAAAwB,GACLrV,KAAA2T,GAAAhV,KAAAyyB,MAAArpB,EAAAgU,GAAA,MAEApd,KAAA6d,IAAAT,GAAA,QACA/b,KAAA4T,GAAAjV,KAAAyb,MAAAwB,EAAAM,GACAlc,KAAA6T,GAAAlV,KAAAyb,MAAAyB,EAAAC,KAEA9b,KAAA4T,GAAAjV,KAAAyb,OAAA4B,EAAAN,GACA1b,KAAA6T,GAAA,IAEK,QAAAwB,GACLrV,KAAA2T,GAAAhV,KAAAyyB,KAAArpB,EAAAkU,GAAA,MAEAtd,KAAA6d,IAAAP,GAAA,QACAjc,KAAA4T,GAAAjV,KAAAyb,OAAA4B,EAAAE,GACAlc,KAAA6T,GAAAlV,KAAAyb,OAAAuB,EAAAG,KAEA9b,KAAA4T,GAAA,EACA5T,KAAA6T,GAAAlV,KAAAyb,MAAAyB,EAAAH,KAEK,QAAArG,GACLrV,KAAA4T,GAAAjV,KAAAyyB,MAAArpB,EAAAiU,GAAA,MAEArd,KAAA6d,IAAAR,GAAA,QACAhc,KAAA2T,GAAAhV,KAAAyb,MAAA6B,EAAAC,GACAlc,KAAA6T,GAAAlV,KAAAyb,MAAAyB,EAAAH,KAEA1b,KAAA2T,GAAA,EACA3T,KAAA6T,GAAAlV,KAAAyb,OAAAuB,EAAAG,KAEK,QAAAzG,GACLrV,KAAA6T,GAAAlV,KAAAyyB,KAAArpB,EAAA8T,GAAA,MAEAld,KAAA6d,IAAAX,GAAA,QACA7b,KAAA2T,GAAAhV,KAAAyb,OAAA2B,EAAAD,GACA9b,KAAA4T,GAAAjV,KAAAyb,OAAA4B,EAAAN,KAEA1b,KAAA2T,GAAA,EACA3T,KAAA4T,GAAAjV,KAAAyb,MAAAwB,EAAAM,KAEK,QAAA7G,GACLrV,KAAA6T,GAAAlV,KAAAyyB,MAAArpB,EAAA4T,GAAA,MAEAhd,KAAA6d,IAAAb,GAAA,QACA3b,KAAA2T,GAAAhV,KAAAyb,MAAA6B,EAAAH,GACA9b,KAAA4T,GAAAjV,KAAAyb,MAAAwB,EAAAF,KAEA1b,KAAA2T,GAAAhV,KAAAyb,OAAA2B,EAAAG,GACAlc,KAAA4T,GAAA,IAGAe,QAAA0B,KAAA,kEAAAhB,GAGArV,KAAAsV,OAAAD,GACA,IAAAwF,GAAA7a,KAAAwa,oBACAxa,MAEAqxB,kBAAA,WACA,IAAArL,EAAA,IAAqB9Q,EACrB,gBAAA3B,EAAA8B,EAAAwF,GAEA,OADAmL,EAAAyH,2BAAAla,GACAvT,KAAAwb,sBAAAwK,EAAA3Q,EAAAwF,IAJA,GAOAyW,eAAA,SAAAtU,EAAA3H,GACA,OAAArV,KAAAoT,IAAA4J,EAAA7Z,EAAA6Z,EAAA5Z,EAAA4Z,EAAA3Z,EAAAgS,GAAArV,KAAAsV,SAEAic,QAAA,WAEA,IAAAhe,EAAA,IAAgBG,EAChB,gBAAA8d,GAEA,OADAje,EAAAoH,aAAA3a,MACAA,KAAAqxB,kBAAA9d,EAAAie,IALA,GAQA3Y,OAAA,SAAA+B,GACA,OAAAA,EAAAjH,KAAA3T,KAAA2T,IAAAiH,EAAAhH,KAAA5T,KAAA4T,IAAAgH,EAAA/G,KAAA7T,KAAA6T,IAAA+G,EAAAtF,SAAAtV,KAAAsV,QAEAwD,UAAA,SAAA5R,GAQA,OAPAlH,KAAA2T,GAAAzM,EAAA,GACAlH,KAAA4T,GAAA1M,EAAA,GACAlH,KAAA6T,GAAA3M,EAAA,QACApC,IAAAoC,EAAA,KAAAlH,KAAAsV,OAAApO,EAAA,IAEAlH,KAAAwa,oBAEAxa,MAEAgZ,QAAA,SAAA9R,EAAA6R,GAOA,YANAjU,IAAAoC,MAAA,SACApC,IAAAiU,MAAA,GACA7R,EAAA6R,GAAA/Y,KAAA2T,GACAzM,EAAA6R,EAAA,GAAA/Y,KAAA4T,GACA1M,EAAA6R,EAAA,GAAA/Y,KAAA6T,GACA3M,EAAA6R,EAAA,GAAA/Y,KAAAsV,OACApO,GAEAuqB,UAAA,SAAAC,GACA,OAAAA,EACAA,EAAAte,IAAApT,KAAA2T,GAAA3T,KAAA4T,GAAA5T,KAAA6T,IAEA,IAAiBE,EAAO/T,KAAA2T,GAAA3T,KAAA4T,GAAA5T,KAAA6T,KAGxBqK,UAAA,SAAAC,GAEA,OADAne,KAAAwa,kBAAA2D,EACAne,MAEAwa,kBAAA,eCrNArd,OAAAgJ,OAAAqP,EAAAnX,UAAA,CACA+U,IAAA,SAAAue,GACA3xB,KAAAyV,KAAA,GAAAkc,EAAA,GAEAC,OAAA,SAAAD,GACA3xB,KAAAyV,MAAA,GAAAkc,EAAA,GAEAE,OAAA,SAAAF,GACA3xB,KAAAyV,MAAA,GAAAkc,EAAA,GAEAG,QAAA,SAAAH,GACA3xB,KAAAyV,QAAA,GAAAkc,EAAA,IAEAI,KAAA,SAAAC,GACA,YAAAhyB,KAAAyV,KAAAuc,EAAAvc,SCrBO,IAeAwc,EAAA,EAKAC,EAAA,EAIAC,EAAA,EAKAC,EAAA,IASAC,EAAA,IACAC,EAAA,IASAC,EAAA,EAiGAC,EAAA,EChIPC,EAAA,EAEA,SAAAC,IACAv1B,OAAAC,eAAA4C,KAAA,MACAtC,MAAA+0B,MAEAzyB,KAAA2yB,KAAcvrB,EAAKI,eACnBxH,KAAAhD,KAAA,GACAgD,KAAAqG,KAAA,WACArG,KAAA4yB,OAAA,KACA5yB,KAAA6yB,SAAA,GACA7yB,KAAA+tB,GAAA2E,EAAAI,UAAAnc,QACA,IAAA4S,EAAA,IAAqBxV,EACrBkT,EAAA,IAAqB7R,EACrBsF,EAAA,IAAuBhH,EACvB0T,EAAA,IAAkBrT,EAAO,OAUzBkT,EAAA/I,UARA,WACAxD,EAAAC,aAAAsM,GAAA,KASAvM,EAAAwD,UANA,WACA+I,EAAAoK,kBAAA3W,OAAA5V,GAAA,KAOA3H,OAAAod,iBAAAva,KAAA,CACAupB,SAAA,CACAwJ,cAAA,EACA11B,YAAA,EACAK,MAAA6rB,GAEAtC,SAAA,CACA8L,cAAA,EACA11B,YAAA,EACAK,MAAAupB,GAEAvM,WAAA,CACAqY,cAAA,EACA11B,YAAA,EACAK,MAAAgd,GAEA0M,MAAA,CACA2L,cAAA,EACA11B,YAAA,EACAK,MAAA0pB,GAEA4L,gBAAA,CACAt1B,MAAA,IAAiBwX,GAEjB+d,aAAA,CACAv1B,MAAA,IAAiB+W,KAGjBzU,KAAAgmB,OAAA,IAAoB9Q,EACpBlV,KAAAkgB,YAAA,IAAyBhL,EACzBlV,KAAAkzB,iBAAAR,EAAAS,wBACAnzB,KAAAozB,wBAAA,EACApzB,KAAAgyB,OAAA,IAAoBxc,EACpBxV,KAAAqzB,SAAA,EACArzB,KAAAszB,YAAA,EACAtzB,KAAAuzB,eAAA,EACAvzB,KAAAwzB,eAAA,EACAxzB,KAAAyzB,YAAA,EACAzzB,KAAA0zB,SAAA,GAGAhB,EAAAI,UAAA,IAAyB/e,EAAO,OAChC2e,EAAAS,yBAAA,EACAT,EAAAr0B,UAAAlB,OAAAgJ,OAAAhJ,OAAAY,OAAiDmI,EAAe7H,WAAA,CAChEuY,YAAA8b,EACAiB,YAAA,EACAC,eAAA,aACAC,cAAA,aACAC,YAAA,SAAA9N,GACAhmB,KAAAkzB,kBAAAlzB,KAAA+zB,eACA/zB,KAAAgmB,OAAA7I,YAAA6I,GACAhmB,KAAAgmB,OAAAmK,UAAAnwB,KAAAupB,SAAAvpB,KAAA0a,WAAA1a,KAAAonB,QAEArI,gBAAA,SAAAxL,GAEA,OADAvT,KAAA0a,WAAAyC,YAAA5J,GACAvT,MAEAg0B,yBAAA,SAAA3Y,EAAAC,GAEAtb,KAAA0a,WAAAU,iBAAAC,EAAAC,IAEA2Y,qBAAA,SAAArZ,GACA5a,KAAA0a,WAAAC,aAAAC,GAAA,IAEAsZ,sBAAA,SAAAr3B,GAEAmD,KAAA0a,WAAAc,sBAAA3e,IAEAs3B,0BAAA,SAAA5gB,GAEAvT,KAAA0a,WAAAhF,KAAAnC,IAEA6gB,aAAA,WAGA,IAAAC,EAAA,IAAiB3gB,EACjB,gBAAA2H,EAAAC,GAGA,OAFA+Y,EAAAjZ,iBAAAC,EAAAC,GACAtb,KAAA0a,WAAAnC,SAAA8b,GACAr0B,MAPA,GAUAs0B,kBAAA,WAIA,IAAAD,EAAA,IAAiB3gB,EACjB,gBAAA2H,EAAAC,GAGA,OAFA+Y,EAAAjZ,iBAAAC,EAAAC,GACAtb,KAAA0a,WAAAyC,YAAAkX,GACAr0B,MARA,GAWAu0B,QAAA,WACA,IAAAvT,EAAA,IAAiBjN,EAAO,OACxB,gBAAAuH,GACA,OAAAtb,KAAAo0B,aAAApT,EAAA1F,IAHA,GAMAkZ,QAAA,WACA,IAAAxT,EAAA,IAAiBjN,EAAO,OACxB,gBAAAuH,GACA,OAAAtb,KAAAo0B,aAAApT,EAAA1F,IAHA,GAMAmZ,QAAA,WACA,IAAAzT,EAAA,IAAiBjN,EAAO,OACxB,gBAAAuH,GACA,OAAAtb,KAAAo0B,aAAApT,EAAA1F,IAHA,GAMAoZ,gBAAA,WAGA,IAAA1T,EAAA,IAAiBjN,EACjB,gBAAAsH,EAAAsZ,GAGA,OAFA3T,EAAAtL,KAAA2F,GAAA0D,gBAAA/e,KAAA0a,YACA1a,KAAAupB,SAAAtR,IAAA+I,EAAAxI,eAAAmc,IACA30B,MAPA,GAUA40B,WAAA,WACA,IAAA5T,EAAA,IAAiBjN,EAAO,OACxB,gBAAA4gB,GACA,OAAA30B,KAAA00B,gBAAA1T,EAAA2T,IAHA,GAMAE,WAAA,WACA,IAAA7T,EAAA,IAAiBjN,EAAO,OACxB,gBAAA4gB,GACA,OAAA30B,KAAA00B,gBAAA1T,EAAA2T,IAHA,GAMAG,WAAA,WACA,IAAA9T,EAAA,IAAiBjN,EAAO,OACxB,gBAAA4gB,GACA,OAAA30B,KAAA00B,gBAAA1T,EAAA2T,IAHA,GAMAI,aAAA,SAAApT,GACA,OAAAA,EAAAxC,aAAAnf,KAAAkgB,cAEA8U,aAAA,WACA,IAAAC,EAAA,IAAiB/f,EACjB,gBAAAyM,GACA,OAAAA,EAAAxC,aAAA8V,EAAAlP,WAAA/lB,KAAAkgB,eAHA,GAMA2N,OAAA,WAEA,IAAAwG,EAAA,IAAiB3gB,EACjBuhB,EAAA,IAAiB/f,EACjBjO,EAAA,IAAqB8M,EACrBwV,EAAA,IAAuBxV,EACvB,gBAAA5Q,EAAAC,EAAAC,GACAF,EAAAkR,UACApN,EAAAyO,KAAAvS,GAEA8D,EAAAmM,IAAAjQ,EAAAC,EAAAC,GAGA,IAAAuvB,EAAA5yB,KAAA4yB,OACA5yB,KAAAk1B,mBAAA,MACA3L,EAAA3G,sBAAA5iB,KAAAkgB,aAEAlgB,KAAAm1B,UAAAn1B,KAAAo1B,QACAH,EAAApH,OAAAtE,EAAAtiB,EAAAjH,KAAA+tB,IAEAkH,EAAApH,OAAA5mB,EAAAsiB,EAAAvpB,KAAA+tB,IAGA/tB,KAAA0a,WAAAc,sBAAAyZ,GAEArC,IACAqC,EAAAvI,gBAAAkG,EAAA1S,aACAmU,EAAA7Y,sBAAAyZ,GACAj1B,KAAA0a,WAAAyC,YAAAkX,EAAAvX,aA5BA,GAgCA7E,IAAA,SAAA9Z,GACA,GAAA2B,UAAAJ,OAAA,GACA,QAAAjD,EAAA,EAAqBA,EAAAqD,UAAAJ,OAAsBjD,IAC3CuD,KAAAiY,IAAAnY,UAAArD,IAGA,OAAAuD,KAGA,OAAA7B,IAAA6B,MACA2U,QAAAC,MAAA,kEAAAzW,GACA6B,OAGA7B,KAAAw1B,YACA,OAAAx1B,EAAAy0B,QACAz0B,EAAAy0B,OAAAyC,OAAAl3B,GAGAA,EAAAy0B,OAAA5yB,KACAA,KAAA6yB,SAAAhtB,KAAA1H,GACAA,EAAA4I,cAAA,CACAV,KAAA,WAGAsO,QAAAC,MAAA,gEAAAzW,GAGA6B,OAEAq1B,OAAA,SAAAl3B,GACA,GAAA2B,UAAAJ,OAAA,GACA,QAAAjD,EAAA,EAAqBA,EAAAqD,UAAAJ,OAAsBjD,IAC3CuD,KAAAq1B,OAAAv1B,UAAArD,IAGA,OAAAuD,KAGA,IAAA6G,EAAA7G,KAAA6yB,SAAApsB,QAAAtI,GAUA,OARA,IAAA0I,IACA1I,EAAAy0B,OAAA,KACA5yB,KAAA6yB,SAAA/rB,OAAAD,EAAA,GACA1I,EAAA4I,cAAA,CACAV,KAAA,aAIArG,MAEAs1B,OAAA,WAEA,IAAAz4B,EAAA,IAAgBqY,EAChB,gBAAA/W,GAYA,OAXA6B,KAAAk1B,mBAAA,MACAr4B,EAAAkpB,WAAA/lB,KAAAkgB,aAEA,OAAA/hB,EAAAy0B,SACAz0B,EAAAy0B,OAAAsC,mBAAA,MACAr4B,EAAA0b,SAAApa,EAAAy0B,OAAA1S,cAGA/hB,EAAA21B,YAAAj3B,GACAsB,EAAA+2B,mBAAA,MACAl1B,KAAAiY,IAAA9Z,GACA6B,MAfA,GAkBAu1B,cAAA,SAAAC,GACA,OAAAx1B,KAAAy1B,oBAAA,KAAAD,IAEAE,gBAAA,SAAA14B,GACA,OAAAgD,KAAAy1B,oBAAA,OAAAz4B,IAEAy4B,oBAAA,SAAAz4B,EAAAU,GACA,GAAAsC,KAAAhD,KAAAU,EAAA,OAAAsC,KAEA,QAAAvD,EAAA,EAAAC,EAAAsD,KAAA6yB,SAAAnzB,OAA6CjD,EAAAC,EAAOD,IAAA,CACpD,IACA0B,EADA6B,KAAA6yB,SAAAp2B,GACAg5B,oBAAAz4B,EAAAU,GAEA,QAAAoH,IAAA3G,EACA,OAAAA,IAMAw3B,iBAAA,SAAA1uB,GAOA,YANAnC,IAAAmC,IACA0N,QAAA0B,KAAA,8DACApP,EAAA,IAAmB8M,GAGnB/T,KAAAwpB,mBAAA,GACAviB,EAAA2b,sBAAA5iB,KAAAkgB,cAEA0V,mBAAA,WACA,IAAArM,EAAA,IAAuBxV,EACvBqT,EAAA,IAAoBrT,EACpB,gBAAA9M,GAQA,YAPAnC,IAAAmC,IACA0N,QAAA0B,KAAA,gEACApP,EAAA,IAAqByM,GAGrB1T,KAAAwpB,mBAAA,GACAxpB,KAAAkgB,YAAAiQ,UAAA5G,EAAAtiB,EAAAmgB,GACAngB,GAXA,GAcA4uB,cAAA,WACA,IAAAtM,EAAA,IAAuBxV,EACvB2G,EAAA,IAAyBhH,EACzB,gBAAAzM,GAQA,YAPAnC,IAAAmC,IACA0N,QAAA0B,KAAA,2DACApP,EAAA,IAAqB8M,GAGrB/T,KAAAwpB,mBAAA,GACAxpB,KAAAkgB,YAAAiQ,UAAA5G,EAAA7O,EAAAzT,GACAA,GAXA,GAcA6uB,kBAAA,SAAA7uB,QACAnC,IAAAmC,IACA0N,QAAA0B,KAAA,+DACApP,EAAA,IAAmB8M,GAGnB/T,KAAAwpB,mBAAA,GACA,IAAAtK,EAAAlf,KAAAkgB,YAAAxL,SACA,OAAAzN,EAAAmM,IAAA8L,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAAAzC,aAEAsZ,QAAA,aACA/M,SAAA,SAAA7K,GACAA,EAAAne,MAGA,IAFA,IAAA6yB,EAAA7yB,KAAA6yB,SAEAp2B,EAAA,EAAAC,EAAAm2B,EAAAnzB,OAAwCjD,EAAAC,EAAOD,IAC/Co2B,EAAAp2B,GAAAusB,SAAA7K,IAGA6X,gBAAA,SAAA7X,GACA,QAAAne,KAAAqzB,QAAA,CACAlV,EAAAne,MAGA,IAFA,IAAA6yB,EAAA7yB,KAAA6yB,SAEAp2B,EAAA,EAAAC,EAAAm2B,EAAAnzB,OAAwCjD,EAAAC,EAAOD,IAC/Co2B,EAAAp2B,GAAAu5B,gBAAA7X,KAGA8X,kBAAA,SAAA9X,GACA,IAAAyU,EAAA5yB,KAAA4yB,OAEA,OAAAA,IACAzU,EAAAyU,GACAA,EAAAqD,kBAAA9X,KAGA4V,aAAA,WACA/zB,KAAAgmB,OAAA4H,QAAA5tB,KAAAupB,SAAAvpB,KAAA0a,WAAA1a,KAAAonB,OACApnB,KAAAozB,wBAAA,GAEA5J,kBAAA,SAAA0M,GACAl2B,KAAAkzB,kBAAAlzB,KAAA+zB,gBAEA/zB,KAAAozB,wBAAA8C,KACA,OAAAl2B,KAAA4yB,OACA5yB,KAAAkgB,YAAAxK,KAAA1V,KAAAgmB,QAEAhmB,KAAAkgB,YAAAuE,iBAAAzkB,KAAA4yB,OAAA1S,YAAAlgB,KAAAgmB,QAGAhmB,KAAAozB,wBAAA,EACA8C,GAAA,GAMA,IAFA,IAAArD,EAAA7yB,KAAA6yB,SAEAp2B,EAAA,EAAAC,EAAAm2B,EAAAnzB,OAAwCjD,EAAAC,EAAOD,IAC/Co2B,EAAAp2B,GAAA+sB,kBAAA0M,IAGAhB,kBAAA,SAAAiB,EAAAC,GACA,IAAAxD,EAAA5yB,KAAA4yB,OAeA,IAbA,IAAAuD,GAAA,OAAAvD,GACAA,EAAAsC,mBAAA,MAGAl1B,KAAAkzB,kBAAAlzB,KAAA+zB,eAEA,OAAA/zB,KAAA4yB,OACA5yB,KAAAkgB,YAAAxK,KAAA1V,KAAAgmB,QAEAhmB,KAAAkgB,YAAAuE,iBAAAzkB,KAAA4yB,OAAA1S,YAAAlgB,KAAAgmB,SAIA,IAAAoQ,EAGA,IAFA,IAAAvD,EAAA7yB,KAAA6yB,SAEAp2B,EAAA,EAAAC,EAAAm2B,EAAAnzB,OAA0CjD,EAAAC,EAAOD,IACjDo2B,EAAAp2B,GAAAy4B,mBAAA,OAIAjc,OAAA,SAAAod,GAEA,IAAAC,OAAAxxB,IAAAuxB,GAAA,kBAAAA,EACAE,EAAA,GAIAD,IAEAD,EAAA,CACAG,WAAA,GACAC,UAAA,GACAC,SAAA,GACAC,OAAA,GACAC,OAAA,IAEAL,EAAAM,SAAA,CACAC,QAAA,IACAzwB,KAAA,SACA0wB,UAAA,oBAKA,IAAA54B,EAAA,GAgBA,SAAA64B,EAAAC,EAAAC,GAKA,YAJApyB,IAAAmyB,EAAAC,EAAAvE,QACAsE,EAAAC,EAAAvE,MAAAuE,EAAAje,OAAAod,IAGAa,EAAAvE,KAGA,GAvBAx0B,EAAAw0B,KAAA3yB,KAAA2yB,KACAx0B,EAAAkI,KAAArG,KAAAqG,KACA,KAAArG,KAAAhD,OAAAmB,EAAAnB,KAAAgD,KAAAhD,OACA,IAAAgD,KAAAszB,aAAAn1B,EAAAm1B,YAAA,IACA,IAAAtzB,KAAAuzB,gBAAAp1B,EAAAo1B,eAAA,IACA,IAAAvzB,KAAAqzB,UAAAl1B,EAAAk1B,SAAA,IACA,IAAArzB,KAAAwzB,gBAAAr1B,EAAAq1B,eAAA,GACA,IAAAxzB,KAAAyzB,cAAAt1B,EAAAs1B,YAAAzzB,KAAAyzB,aACA,OAAA0D,KAAAC,UAAAp3B,KAAA0zB,YAA6Cv1B,EAAAu1B,SAAA1zB,KAAA0zB,UAC7Cv1B,EAAA6zB,OAAAhyB,KAAAgyB,OAAAvc,KACAtX,EAAA6nB,OAAAhmB,KAAAgmB,OAAAhN,WACA,IAAAhZ,KAAAkzB,mBAAA/0B,EAAA+0B,kBAAA,GAEAlzB,KAAAq3B,QDvVO,ICuVPr3B,KAAAs3B,WAA0Dn5B,EAAAm5B,SAAAt3B,KAAAs3B,UAU1Dt3B,KAAAq3B,QAAAr3B,KAAAu3B,QAAAv3B,KAAAw3B,SAAA,CACAr5B,EAAA+qB,SAAA8N,EAAAX,EAAAG,WAAAx2B,KAAAkpB,UACA,IAAAuO,EAAAz3B,KAAAkpB,SAAAuO,WAEA,QAAA3yB,IAAA2yB,QAAA3yB,IAAA2yB,EAAAb,OAAA,CACA,IAAAA,EAAAa,EAAAb,OAEA,GAAA3xB,MAAAC,QAAA0xB,GACA,QAAAn6B,EAAA,EAAAC,EAAAk6B,EAAAl3B,OAA4CjD,EAAAC,EAAOD,IAAA,CACnD,IAAAi7B,EAAAd,EAAAn6B,GACAu6B,EAAAX,EAAAO,OAAAc,QAGAV,EAAAX,EAAAO,WAKA,QAAA9xB,IAAA9E,KAAA23B,SACA,GAAA1yB,MAAAC,QAAAlF,KAAA23B,UAAA,CACA,IAAAC,EAAA,GAEA,IAAAn7B,EAAA,EAAAC,EAAAsD,KAAA23B,SAAAj4B,OAAiDjD,EAAAC,EAAOD,IACxDm7B,EAAA/xB,KAAAmxB,EAAAX,EAAAI,UAAAz2B,KAAA23B,SAAAl7B,KAGA0B,EAAAw5B,SAAAC,OAEAz5B,EAAAw5B,SAAAX,EAAAX,EAAAI,UAAAz2B,KAAA23B,UAKA,GAAA33B,KAAA6yB,SAAAnzB,OAAA,GACAvB,EAAA00B,SAAA,GAEA,IAAAp2B,EAAA,EAAqBA,EAAAuD,KAAA6yB,SAAAnzB,OAA0BjD,IAC/C0B,EAAA00B,SAAAhtB,KAAA7F,KAAA6yB,SAAAp2B,GAAAwc,OAAAod,GAAAl4B,QAIA,GAAAm4B,EAAA,CACA,IAAAE,EAAAqB,EAAAxB,EAAAG,YACAC,EAAAoB,EAAAxB,EAAAI,WACAC,EAAAmB,EAAAxB,EAAAK,UACAC,EAAAkB,EAAAxB,EAAAM,QACAC,EAAAiB,EAAAxB,EAAAO,QACAJ,EAAA92B,OAAA,IAAA62B,EAAAC,cACAC,EAAA/2B,OAAA,IAAA62B,EAAAE,aACAC,EAAAh3B,OAAA,IAAA62B,EAAAG,YACAC,EAAAj3B,OAAA,IAAA62B,EAAAI,UACAC,EAAAl3B,OAAA,IAAA62B,EAAAK,UAIA,OADAL,EAAAp4B,SACAo4B,EAIA,SAAAsB,EAAAC,GACA,IAAAC,EAAA,GAEA,QAAA/5B,KAAA85B,EAAA,CACA,IAAAt4B,EAAAs4B,EAAA95B,UACAwB,EAAAq3B,SACAkB,EAAAlyB,KAAArG,GAGA,OAAAu4B,IAGAphB,MAAA,SAAAqhB,GACA,WAAAh4B,KAAA4W,aAAAlB,KAAA1V,KAAAg4B,IAEAtiB,KAAA,SAAA6N,EAAAyU,GAmBA,QAlBAlzB,IAAAkzB,OAAA,GACAh4B,KAAAhD,KAAAumB,EAAAvmB,KACAgD,KAAA+tB,GAAArY,KAAA6N,EAAAwK,IACA/tB,KAAAupB,SAAA7T,KAAA6N,EAAAgG,UACAvpB,KAAA0a,WAAAhF,KAAA6N,EAAA7I,YACA1a,KAAAonB,MAAA1R,KAAA6N,EAAA6D,OACApnB,KAAAgmB,OAAAtQ,KAAA6N,EAAAyC,QACAhmB,KAAAkgB,YAAAxK,KAAA6N,EAAArD,aACAlgB,KAAAkzB,iBAAA3P,EAAA2P,iBACAlzB,KAAAozB,uBAAA7P,EAAA6P,uBACApzB,KAAAgyB,OAAAvc,KAAA8N,EAAAyO,OAAAvc,KACAzV,KAAAqzB,QAAA9P,EAAA8P,QACArzB,KAAAszB,WAAA/P,EAAA+P,WACAtzB,KAAAuzB,cAAAhQ,EAAAgQ,cACAvzB,KAAAwzB,cAAAjQ,EAAAiQ,cACAxzB,KAAAyzB,YAAAlQ,EAAAkQ,YACAzzB,KAAA0zB,SAAAyD,KAAAc,MAAAd,KAAAC,UAAA7T,EAAAmQ,YAEA,IAAAsE,EACA,QAAAv7B,EAAA,EAAqBA,EAAA8mB,EAAAsP,SAAAnzB,OAA4BjD,IAAA,CACjD,IAAAy7B,EAAA3U,EAAAsP,SAAAp2B,GACAuD,KAAAiY,IAAAigB,EAAAvhB,SAIA,OAAA3W,QCrjBA,IAAAm4B,EAAA,EAEA,SAAAC,IACAj7B,OAAAC,eAAA4C,KAAA,MACAtC,MAAAy6B,GAAA,IAEAn4B,KAAA2yB,KAAcvrB,EAAKI,eACnBxH,KAAAhD,KAAA,GACAgD,KAAAqG,KAAA,WACArG,KAAAopB,SAAA,GACAppB,KAAAq4B,OAAA,GACAr4B,KAAAs4B,MAAA,GACAt4B,KAAAu4B,cAAA,KACAv4B,KAAAw4B,aAAA,GACAx4B,KAAAy4B,aAAA,GACAz4B,KAAA04B,YAAA,GACA14B,KAAA24B,YAAA,GACA34B,KAAA44B,cAAA,GACA54B,KAAA64B,YAAA,KACA74B,KAAA84B,eAAA,KAEA94B,KAAA+4B,oBAAA,EACA/4B,KAAAg5B,oBAAA,EACAh5B,KAAAi5B,eAAA,EACAj5B,KAAAk5B,mBAAA,EACAl5B,KAAAm5B,kBAAA,EACAn5B,KAAAo5B,yBAAA,EACAp5B,KAAAq5B,kBAAA,EAGAjB,EAAA/5B,UAAAlB,OAAAgJ,OAAAhJ,OAAAY,OAAiDmI,EAAe7H,WAAA,CAChEuY,YAAAwhB,EACAjP,YAAA,EACA2K,YAAA,SAAA9N,GAGA,IAFA,IAAAiN,GAAA,IAA2Bxe,GAAOkS,gBAAAX,GAElCvpB,EAAA,EAAA+mB,EAAAxjB,KAAAopB,SAAA1pB,OAA8CjD,EAAA+mB,EAAQ/mB,IAAA,CACtDuD,KAAAopB,SAAA3sB,GACA0iB,aAAA6G,GAGA,IAAAvpB,EAAA,EAAA+mB,EAAAxjB,KAAAs4B,MAAA54B,OAA2CjD,EAAA+mB,EAAQ/mB,IAAA,CACnD,IAAA68B,EAAAt5B,KAAAs4B,MAAA77B,GACA68B,EAAAplB,OAAA+K,aAAAgU,GAAAxW,YAEA,QAAAvb,EAAA,EAAAq4B,EAAAD,EAAAhlB,cAAA5U,OAAqDwB,EAAAq4B,EAAQr4B,IAC7Do4B,EAAAhlB,cAAApT,GAAA+d,aAAAgU,GAAAxW,YAcA,OAVA,OAAAzc,KAAA64B,aACA74B,KAAAw5B,qBAGA,OAAAx5B,KAAA84B,gBACA94B,KAAAy5B,wBAGAz5B,KAAAg5B,oBAAA,EACAh5B,KAAAk5B,mBAAA,EACAl5B,MAEAu0B,QAAA,WAEA,IAAAU,EAAA,IAAiB/f,EACjB,gBAAAoG,GAGA,OAFA2Z,EAAA7F,cAAA9T,GACAtb,KAAA8zB,YAAAmB,GACAj1B,MANA,GASAw0B,QAAA,WAEA,IAAAS,EAAA,IAAiB/f,EACjB,gBAAAoG,GAGA,OAFA2Z,EAAA5F,cAAA/T,GACAtb,KAAA8zB,YAAAmB,GACAj1B,MANA,GASAy0B,QAAA,WAEA,IAAAQ,EAAA,IAAiB/f,EACjB,gBAAAoG,GAGA,OAFA2Z,EAAA3F,cAAAhU,GACAtb,KAAA8zB,YAAAmB,GACAj1B,MANA,GASAsnB,UAAA,WAEA,IAAA2N,EAAA,IAAiB/f,EACjB,gBAAA/R,EAAAC,EAAAC,GAGA,OAFA4xB,EAAA9F,gBAAAhsB,EAAAC,EAAAC,GACArD,KAAA8zB,YAAAmB,GACAj1B,MANA,GASAonB,MAAA,WAEA,IAAA6N,EAAA,IAAiB/f,EACjB,gBAAA/R,EAAAC,EAAAC,GAGA,OAFA4xB,EAAAzF,UAAArsB,EAAAC,EAAAC,GACArD,KAAA8zB,YAAAmB,GACAj1B,MANA,GASA6tB,OAAA,WACA,IAAA6L,EAAA,IAAkBhH,EAClB,gBAAA/Q,GACA+X,EAAA7L,OAAAlM,GACA+X,EAAA3F,eACA/zB,KAAA8zB,YAAA4F,EAAA1T,SALA,GAQA2T,mBAAA,SAAAzQ,GACA,IAAAH,EAAA/oB,KACA45B,EAAA,OAAA1Q,EAAAriB,MAAAqiB,EAAAriB,MAAAK,WAAApC,EACAwkB,EAAAJ,EAAAI,WACAuQ,EAAAvQ,EAAAC,SAAAriB,MACA4yB,OAAAh1B,IAAAwkB,EAAApV,OAAAoV,EAAApV,OAAAhN,WAAApC,EACAuzB,OAAAvzB,IAAAwkB,EAAAnV,MAAAmV,EAAAnV,MAAAjN,WAAApC,EACAi1B,OAAAj1B,IAAAwkB,EAAA0Q,GAAA1Q,EAAA0Q,GAAA9yB,WAAApC,EACAm1B,OAAAn1B,IAAAwkB,EAAA4Q,IAAA5Q,EAAA4Q,IAAAhzB,WAAApC,OACAA,IAAAm1B,IAAAj6B,KAAAu4B,cAAA,OAEA,QAAA97B,EAAA,EAAmBA,EAAAo9B,EAAAn6B,OAAsBjD,GAAA,EACzCssB,EAAAK,SAAAvjB,MAAA,IAA8BkO,GAAO+E,UAAA+gB,EAAAp9B,SAErCqI,IAAAuzB,GACAtP,EAAAsP,OAAAxyB,MAAA,IAA8BoN,GAAK6F,UAAAuf,EAAA57B,IAInC,SAAA09B,EAAAlmB,EAAAd,EAAArW,EAAAsX,GACA,IAAAI,OAAA1P,IAAAuzB,EAAA,IAAAtP,EAAAsP,OAAApkB,GAAA0C,QAAAoS,EAAAsP,OAAAllB,GAAAwD,QAAAoS,EAAAsP,OAAAv7B,GAAA6Z,SAEA2iB,EAAA,IAAqBtlB,EAAKC,EAAAd,EAAArW,OAD1BgI,IAAAg1B,EAAA,SAA4D/lB,GAAO+E,UAAAghB,EAAA,EAAA7lB,IAAA,IAAkCF,GAAO+E,UAAAghB,EAAA,EAAA3mB,IAAA,IAAkCY,GAAO+E,UAAAghB,EAAA,EAAAh9B,IAC3H0X,EAAAJ,GAC1B2U,EAAAuP,MAAAzyB,KAAAyzB,QAEAx0B,IAAAi1B,GACAhR,EAAAwP,cAAA,GAAA1yB,KAAA,MAAyCsP,GAAO2D,UAAAihB,EAAA,EAAA9lB,IAAA,IAA8BkB,GAAO2D,UAAAihB,EAAA,EAAA5mB,IAAA,IAA8BgC,GAAO2D,UAAAihB,EAAA,EAAAj9B,UAG1HgI,IAAAm1B,GACAlR,EAAAwP,cAAA,GAAA1yB,KAAA,MAAyCsP,GAAO2D,UAAAmhB,EAAA,EAAAhmB,IAAA,IAA+BkB,GAAO2D,UAAAmhB,EAAA,EAAA9mB,IAAA,IAA+BgC,GAAO2D,UAAAmhB,EAAA,EAAAn9B,KAI5H,IAAAs9B,EAAAlR,EAAAkR,OAEA,GAAAA,EAAA16B,OAAA,EACA,IAAAjD,EAAA,EAAqBA,EAAA29B,EAAA16B,OAAmBjD,IAKxC,IAJA,IAAA49B,EAAAD,EAAA39B,GACA69B,EAAAD,EAAAC,MAGAp5B,EAAAo5B,EAAAf,EAAAe,EAFAD,EAAA9V,MAE+CrjB,EAAAq4B,EAAQr4B,GAAA,OACvD4D,IAAA80B,EACAO,EAAAP,EAAA14B,GAAA04B,EAAA14B,EAAA,GAAA04B,EAAA14B,EAAA,GAAAm5B,EAAAjmB,eAEA+lB,EAAAj5B,IAAA,EAAAA,EAAA,EAAAm5B,EAAAjmB,oBAKA,QAAAtP,IAAA80B,EACA,IAAAn9B,EAAA,EAAuBA,EAAAm9B,EAAAl6B,OAAoBjD,GAAA,EAC3C09B,EAAAP,EAAAn9B,GAAAm9B,EAAAn9B,EAAA,GAAAm9B,EAAAn9B,EAAA,SAGA,IAAAA,EAAA,EAAuBA,EAAAo9B,EAAAn6B,OAAA,EAA0BjD,GAAA,EACjD09B,EAAA19B,IAAA,EAAAA,EAAA,GAeA,OAVAuD,KAAAu6B,qBAEA,OAAArR,EAAA2P,cACA74B,KAAA64B,YAAA3P,EAAA2P,YAAAliB,SAGA,OAAAuS,EAAA4P,iBACA94B,KAAA84B,eAAA5P,EAAA4P,eAAAniB,SAGA3W,MAEAgV,OAAA,WACA,IAAA+D,EAAA,IAAqBhF,EACrB,kBAIA,OAHA/T,KAAAw5B,qBACAx5B,KAAA64B,YAAAnQ,UAAA3P,GAAA6H,SACA5gB,KAAAsnB,UAAAvO,EAAA5V,EAAA4V,EAAA3V,EAAA2V,EAAA1V,GACArD,MANA,GASAyc,UAAA,WACAzc,KAAAy5B,wBACA,IAAAzkB,EAAAhV,KAAA84B,eAAA9jB,OACAC,EAAAjV,KAAA84B,eAAA7jB,OACAzW,EAAA,IAAAyW,EAAA,IAAAA,EACA+Q,EAAA,IAAqB9Q,EAGrB,OAFA8Q,EAAA5S,IAAA5U,EAAA,KAAAA,EAAAwW,EAAA7R,EAAA,EAAA3E,EAAA,GAAAA,EAAAwW,EAAA5R,EAAA,IAAA5E,KAAAwW,EAAA3R,EAAA,SACArD,KAAA8zB,YAAA9N,GACAhmB,MAEAu6B,mBAAA,WAIA,IAHA,IAAAC,EAAA,IAAiBzmB,EACjB0mB,EAAA,IAAiB1mB,EAEjBuG,EAAA,EAAAogB,EAAA16B,KAAAs4B,MAAA54B,OAA2C4a,EAAAogB,EAAQpgB,IAAA,CACnD,IAAAgf,EAAAt5B,KAAAs4B,MAAAhe,GACAqgB,EAAA36B,KAAAopB,SAAAkQ,EAAArlB,GACA2mB,EAAA56B,KAAAopB,SAAAkQ,EAAAnmB,GACA0nB,EAAA76B,KAAAopB,SAAAkQ,EAAAx8B,GACA09B,EAAA7b,WAAAkc,EAAAD,GACAH,EAAA9b,WAAAgc,EAAAC,GACAJ,EAAAtZ,MAAAuZ,GACAD,EAAA/d,YACA6c,EAAAplB,OAAAwB,KAAA8kB,KAGAM,qBAAA,SAAAC,GAEA,IAAA/d,EAAAge,EAAA1gB,EAAAogB,EAAApB,EAAAlQ,EAGA,SAJAtkB,IAAAi2B,OAAA,GAEA3R,EAAA,IAAAnkB,MAAAjF,KAAAopB,SAAA1pB,QAEAsd,EAAA,EAAAge,EAAAh7B,KAAAopB,SAAA1pB,OAA0Csd,EAAAge,EAAQhe,IAClDoM,EAAApM,GAAA,IAAwBjJ,EAGxB,GAAAgnB,EAAA,CAGA,IAAAJ,EAAAC,EAAAC,EACAL,EAAA,IAAmBzmB,EACnB0mB,EAAA,IAAmB1mB,EAEnB,IAAAuG,EAAA,EAAAogB,EAAA16B,KAAAs4B,MAAA54B,OAAyC4a,EAAAogB,EAAQpgB,IACjDgf,EAAAt5B,KAAAs4B,MAAAhe,GACAqgB,EAAA36B,KAAAopB,SAAAkQ,EAAArlB,GACA2mB,EAAA56B,KAAAopB,SAAAkQ,EAAAnmB,GACA0nB,EAAA76B,KAAAopB,SAAAkQ,EAAAx8B,GACA09B,EAAA7b,WAAAkc,EAAAD,GACAH,EAAA9b,WAAAgc,EAAAC,GACAJ,EAAAtZ,MAAAuZ,GACArR,EAAAkQ,EAAArlB,GAAAgE,IAAAuiB,GACApR,EAAAkQ,EAAAnmB,GAAA8E,IAAAuiB,GACApR,EAAAkQ,EAAAx8B,GAAAmb,IAAAuiB,QAKA,IAFAx6B,KAAAu6B,qBAEAjgB,EAAA,EAAAogB,EAAA16B,KAAAs4B,MAAA54B,OAAyC4a,EAAAogB,EAAQpgB,IAEjD8O,GADAkQ,EAAAt5B,KAAAs4B,MAAAhe,IACArG,GAAAgE,IAAAqhB,EAAAplB,QACAkV,EAAAkQ,EAAAnmB,GAAA8E,IAAAqhB,EAAAplB,QACAkV,EAAAkQ,EAAAx8B,GAAAmb,IAAAqhB,EAAAplB,QAIA,IAAA8I,EAAA,EAAAge,EAAAh7B,KAAAopB,SAAA1pB,OAA0Csd,EAAAge,EAAQhe,IAClDoM,EAAApM,GAAAP,YAGA,IAAAnC,EAAA,EAAAogB,EAAA16B,KAAAs4B,MAAA54B,OAAuC4a,EAAAogB,EAAQpgB,IAAA,CAE/C,IAAAhG,GADAglB,EAAAt5B,KAAAs4B,MAAAhe,IACAhG,cAEA,IAAAA,EAAA5U,QACA4U,EAAA,GAAAoB,KAAA0T,EAAAkQ,EAAArlB,IACAK,EAAA,GAAAoB,KAAA0T,EAAAkQ,EAAAnmB,IACAmB,EAAA,GAAAoB,KAAA0T,EAAAkQ,EAAAx8B,MAEAwX,EAAA,GAAA8U,EAAAkQ,EAAArlB,GAAA0C,QACArC,EAAA,GAAA8U,EAAAkQ,EAAAnmB,GAAAwD,QACArC,EAAA,GAAA8U,EAAAkQ,EAAAx8B,GAAA6Z,SAIA3W,KAAAs4B,MAAA54B,OAAA,IACAM,KAAAk5B,mBAAA,IAGA+B,yBAAA,WACA,IAAA3gB,EAAAogB,EAAApB,EAGA,IAFAt5B,KAAAu6B,qBAEAjgB,EAAA,EAAAogB,EAAA16B,KAAAs4B,MAAA54B,OAAuC4a,EAAAogB,EAAQpgB,IAAA,CAE/C,IAAAhG,GADAglB,EAAAt5B,KAAAs4B,MAAAhe,IACAhG,cAEA,IAAAA,EAAA5U,QACA4U,EAAA,GAAAoB,KAAA4jB,EAAAplB,QACAI,EAAA,GAAAoB,KAAA4jB,EAAAplB,QACAI,EAAA,GAAAoB,KAAA4jB,EAAAplB,UAEAI,EAAA,GAAAglB,EAAAplB,OAAAyC,QACArC,EAAA,GAAAglB,EAAAplB,OAAAyC,QACArC,EAAA,GAAAglB,EAAAplB,OAAAyC,SAIA3W,KAAAs4B,MAAA54B,OAAA,IACAM,KAAAk5B,mBAAA,IAGAgC,oBAAA,WACA,IAAAz+B,EAAA+mB,EAAAlJ,EAAAogB,EAAApB,EAIA,IAAAhf,EAAA,EAAAogB,EAAA16B,KAAAs4B,MAAA54B,OAAuC4a,EAAAogB,EAAQpgB,IAW/C,KAVAgf,EAAAt5B,KAAAs4B,MAAAhe,IAEA6gB,qBAGA7B,EAAA6B,qBAAAzlB,KAAA4jB,EAAAplB,QAFAolB,EAAA6B,qBAAA7B,EAAAplB,OAAAyC,QAKA2iB,EAAA8B,0BAAA9B,EAAA8B,wBAAA,IAEA3+B,EAAA,EAAA+mB,EAAA8V,EAAAhlB,cAAA5U,OAAiDjD,EAAA+mB,EAAQ/mB,IACzD68B,EAAA8B,wBAAA3+B,GAGA68B,EAAA8B,wBAAA3+B,GAAAiZ,KAAA4jB,EAAAhlB,cAAA7X,IAFA68B,EAAA8B,wBAAA3+B,GAAA68B,EAAAhlB,cAAA7X,GAAAka,QAQA,IAAA0kB,EAAA,IAAAjD,EAGA,IAFAiD,EAAA/C,MAAAt4B,KAAAs4B,MAEA77B,EAAA,EAAA+mB,EAAAxjB,KAAAw4B,aAAA94B,OAA8CjD,EAAA+mB,EAAQ/mB,IAAA,CAEtD,IAAAuD,KAAAy4B,aAAAh8B,GAAA,CACAuD,KAAAy4B,aAAAh8B,GAAA,GACAuD,KAAAy4B,aAAAh8B,GAAA6+B,YAAA,GACAt7B,KAAAy4B,aAAAh8B,GAAA6X,cAAA,GACA,IAAAinB,EAAAv7B,KAAAy4B,aAAAh8B,GAAA6+B,YACAE,EAAAx7B,KAAAy4B,aAAAh8B,GAAA6X,cAGA,IAAAgG,EAAA,EAAAogB,EAAA16B,KAAAs4B,MAAA54B,OAA2C4a,EAAAogB,EAAQpgB,IACnDmhB,EAAA,IAA2B1nB,EAC3BO,EAAA,CACAL,EAAA,IAAmBF,EACnBZ,EAAA,IAAmBY,EACnBjX,EAAA,IAAmBiX,GAEnBwnB,EAAA11B,KAAA41B,GACAD,EAAA31B,KAAAyO,GAIA,IAOAmnB,EAAAnnB,EAPAmkB,EAAAz4B,KAAAy4B,aAAAh8B,GASA,IAPA4+B,EAAAjS,SAAAppB,KAAAw4B,aAAA/7B,GAAA2sB,SAEAiS,EAAAd,qBACAc,EAAAP,uBAIAxgB,EAAA,EAAAogB,EAAA16B,KAAAs4B,MAAA54B,OAAyC4a,EAAAogB,EAAQpgB,IACjDgf,EAAAt5B,KAAAs4B,MAAAhe,GACAmhB,EAAAhD,EAAA6C,YAAAhhB,GACAhG,EAAAmkB,EAAAnkB,cAAAgG,GACAmhB,EAAA/lB,KAAA4jB,EAAAplB,QACAI,EAAAL,EAAAyB,KAAA4jB,EAAAhlB,cAAA,IACAA,EAAAnB,EAAAuC,KAAA4jB,EAAAhlB,cAAA,IACAA,EAAAxX,EAAA4Y,KAAA4jB,EAAAhlB,cAAA,IAKA,IAAAgG,EAAA,EAAAogB,EAAA16B,KAAAs4B,MAAA54B,OAAuC4a,EAAAogB,EAAQpgB,KAC/Cgf,EAAAt5B,KAAAs4B,MAAAhe,IACApG,OAAAolB,EAAA6B,qBACA7B,EAAAhlB,cAAAglB,EAAA8B,yBAGA5B,mBAAA,WACA,OAAAx5B,KAAA64B,cACA74B,KAAA64B,YAAA,IAA6BhkB,GAG7B7U,KAAA64B,YAAA7Q,cAAAhoB,KAAAopB,WAEAqQ,sBAAA,WACA,OAAAz5B,KAAA84B,iBACA94B,KAAA84B,eAAA,IAAgC/jB,GAGhC/U,KAAA84B,eAAA9Q,cAAAhoB,KAAAopB,WAEAsS,MAAA,SAAAxS,EAAAlD,EAAA2V,GACA,GAAAzS,KAAAC,WAAA,CAKA,IAAA8J,EACA2I,EAAA57B,KAAAopB,SAAA1pB,OACAm8B,EAAA77B,KAAAopB,SACA0S,EAAA5S,EAAAE,SACA2S,EAAA/7B,KAAAs4B,MACA0D,EAAA9S,EAAAoP,MACA2D,EAAAj8B,KAAAu4B,cAAA,GACA0B,EAAA/Q,EAAAqP,cAAA,GACA2D,EAAAl8B,KAAAq4B,OACA8D,EAAAjT,EAAAmP,YACAvzB,IAAA62B,MAAA,QAEA72B,IAAAkhB,IACAiN,GAAA,IAAyBxe,GAAOkS,gBAAAX,IAIhC,QAAAvpB,EAAA,EAAA+mB,EAAAsY,EAAAp8B,OAA0CjD,EAAA+mB,EAAQ/mB,IAAA,CAClD,IACA2/B,EADAN,EAAAr/B,GACAka,aACA7R,IAAAkhB,GAAAoW,EAAAjd,aAAA6G,GACA6V,EAAAh2B,KAAAu2B,GAIA,IAAA3/B,EAAA,EAAA+mB,EAAA2Y,EAAAz8B,OAAwCjD,EAAA+mB,EAAQ/mB,IAChDy/B,EAAAr2B,KAAAs2B,EAAA1/B,GAAAka,SAIA,IAAAla,EAAA,EAAA+mB,EAAAwY,EAAAt8B,OAAmCjD,EAAA+mB,EAAQ/mB,IAAA,CAC3C,IACA4/B,EACAnoB,EACAC,EAHAmlB,EAAA0C,EAAAv/B,GAIA6/B,EAAAhD,EAAAhlB,cACAioB,EAAAjD,EAAA9kB,cACA6nB,EAAA,IAAqBroB,EAAKslB,EAAArlB,EAAA2nB,EAAAtC,EAAAnmB,EAAAyoB,EAAAtC,EAAAx8B,EAAA8+B,IAC1B1nB,OAAAwB,KAAA4jB,EAAAplB,aAEApP,IAAAmuB,GACAoJ,EAAAnoB,OAAA+K,aAAAgU,GAAAxW,YAGA,QAAAvb,EAAA,EAAAq4B,EAAA+C,EAAA58B,OAAoDwB,EAAAq4B,EAAQr4B,IAC5DgT,EAAAooB,EAAAp7B,GAAAyV,aAEA7R,IAAAmuB,GACA/e,EAAA+K,aAAAgU,GAAAxW,YAGA4f,EAAA/nB,cAAAzO,KAAAqO,GAGAmoB,EAAAloB,MAAAuB,KAAA4jB,EAAAnlB,OAEA,IAAAjT,EAAA,EAAAq4B,EAAAgD,EAAA78B,OAAmDwB,EAAAq4B,EAAQr4B,IAC3DiT,EAAAooB,EAAAr7B,GACAm7B,EAAA7nB,aAAA3O,KAAAsO,EAAAwC,SAGA0lB,EAAAjoB,cAAAklB,EAAAllB,cAAAunB,EACAI,EAAAl2B,KAAAw2B,GAIA,IAAA5/B,EAAA,EAAA+mB,EAAAyW,EAAAv6B,OAAiCjD,EAAA+mB,EAAQ/mB,IAAA,CACzC,IAAAu9B,EAAAC,EAAAx9B,GACA+/B,EAAA,GAEA,QAAA13B,IAAAk1B,EAAA,CAIA,IAAA94B,EAAA,EAAAq4B,EAAAS,EAAAt6B,OAAqCwB,EAAAq4B,EAAQr4B,IAC7Cs7B,EAAA32B,KAAAm0B,EAAA94B,GAAAyV,SAGAslB,EAAAp2B,KAAA22B,UAlFA7nB,QAAAC,MAAA,sEAAAsU,IAqFAuT,UAAA,SAAAC,GACAA,KAAArF,QAKAqF,EAAAxJ,kBAAAwJ,EAAA3I,eACA/zB,KAAA07B,MAAAgB,EAAAxT,SAAAwT,EAAA1W,SALArR,QAAAC,MAAA,kEAAA8nB,IAaAC,cAAA,WACA,IAIA3f,EAAAhf,EAIAvB,EAAA+mB,EAAA8V,EACAM,EAAA14B,EAAAq4B,EATAqD,EAAA,GAEAC,EAAA,GACAC,EAAA,GAIAC,EAAAp+B,KAAA4K,IAAA,GAFA,GAMA,IAAA9M,EAAA,EAAA+mB,EAAAxjB,KAAAopB,SAAA1pB,OAA0CjD,EAAA+mB,EAAQ/mB,IAClDugB,EAAAhd,KAAAopB,SAAA3sB,QAGAqI,IAAA83B,EAFA5+B,EAAAW,KAAA+hB,MAAA1D,EAAA7Z,EAAA45B,GAAA,IAAAp+B,KAAA+hB,MAAA1D,EAAA5Z,EAAA25B,GAAA,IAAAp+B,KAAA+hB,MAAA1D,EAAA3Z,EAAA05B,KAGAH,EAAA5+B,GAAAvB,EACAogC,EAAAh3B,KAAA7F,KAAAopB,SAAA3sB,IACAqgC,EAAArgC,GAAAogC,EAAAn9B,OAAA,GAGAo9B,EAAArgC,GAAAqgC,EAAAF,EAAA5+B,IAMA,IAAAg/B,EAAA,GAEA,IAAAvgC,EAAA,EAAA+mB,EAAAxjB,KAAAs4B,MAAA54B,OAAuCjD,EAAA+mB,EAAQ/mB,IAAA,EAC/C68B,EAAAt5B,KAAAs4B,MAAA77B,IACAwX,EAAA6oB,EAAAxD,EAAArlB,GACAqlB,EAAAnmB,EAAA2pB,EAAAxD,EAAAnmB,GACAmmB,EAAAx8B,EAAAggC,EAAAxD,EAAAx8B,GACA88B,EAAA,CAAAN,EAAArlB,EAAAqlB,EAAAnmB,EAAAmmB,EAAAx8B,GAGA,QAAAoB,EAAA,EAAqBA,EAAA,EAAOA,IAC5B,GAAA07B,EAAA17B,KAAA07B,GAAA17B,EAAA,OACA8+B,EAAAn3B,KAAApJ,GACA,OAKA,IAAAA,EAAAugC,EAAAt9B,OAAA,EAA4CjD,GAAA,EAAQA,IAAA,CACpD,IAAAwgC,EAAAD,EAAAvgC,GAGA,IAFAuD,KAAAs4B,MAAAxxB,OAAAm2B,EAAA,GAEA/7B,EAAA,EAAAq4B,EAAAv5B,KAAAu4B,cAAA74B,OAAiDwB,EAAAq4B,EAAQr4B,IACzDlB,KAAAu4B,cAAAr3B,GAAA4F,OAAAm2B,EAAA,GAKA,IAAAC,EAAAl9B,KAAAopB,SAAA1pB,OAAAm9B,EAAAn9B,OAEA,OADAM,KAAAopB,SAAAyT,EACAK,GAEAlV,cAAA,SAAAC,GACAjoB,KAAAopB,SAAA,GAEA,QAAA3sB,EAAA,EAAAC,EAAAurB,EAAAvoB,OAAsCjD,EAAAC,EAAOD,IAAA,CAC7C,IAAAmsB,EAAAX,EAAAxrB,GACAuD,KAAAopB,SAAAvjB,KAAA,IAA6BkO,EAAO6U,EAAAzlB,EAAAylB,EAAAxlB,EAAAwlB,EAAAvlB,GAAA,IAGpC,OAAArD,MAEAm9B,yBAAA,WAIA,IAHA,IAAA7E,EAAAt4B,KAAAs4B,MACA54B,EAAA44B,EAAA54B,OAEAjD,EAAA,EAAmBA,EAAAiD,EAAYjD,IAC/B67B,EAAA77B,GAAA2gC,IAAA3gC,EAQA67B,EAAA+E,KAJA,SAAAppB,EAAAd,GACA,OAAAc,EAAAG,cAAAjB,EAAAiB,gBAKA,IAEAkpB,EAAAC,EAFAtB,EAAAj8B,KAAAu4B,cAAA,GACA0B,EAAAj6B,KAAAu4B,cAAA,GAEA0D,KAAAv8B,aAAA49B,EAAA,IACArD,KAAAv6B,aAAA69B,EAAA,IAEA,IAAA9gC,EAAA,EAAmBA,EAAAiD,EAAYjD,IAAA,CAC/B,IAAA+4B,EAAA8C,EAAA77B,GAAA2gC,IACAE,KAAAz3B,KAAAo2B,EAAAzG,IACA+H,KAAA13B,KAAAo0B,EAAAzE,IAGA8H,IAAAt9B,KAAAu4B,cAAA,GAAA+E,GACAC,IAAAv9B,KAAAu4B,cAAA,GAAAgF,IAEAtkB,OAAA,WACA,IAAAzZ,EAAA,CACAq3B,SAAA,CACAC,QAAA,IACAzwB,KAAA,WACA0wB,UAAA,oBAQA,GAJAv3B,EAAAmzB,KAAA3yB,KAAA2yB,KACAnzB,EAAA6G,KAAArG,KAAAqG,KACA,KAAArG,KAAAhD,OAAAwC,EAAAxC,KAAAgD,KAAAhD,WAEA8H,IAAA9E,KAAAy3B,WAAA,CACA,IAAAA,EAAAz3B,KAAAy3B,WAEA,QAAAz5B,KAAAy5B,OACA3yB,IAAA2yB,EAAAz5B,KAAAwB,EAAAxB,GAAAy5B,EAAAz5B,IAGA,OAAAwB,EAKA,IAFA,IAAA4pB,EAAA,GAEA3sB,EAAA,EAAmBA,EAAAuD,KAAAopB,SAAA1pB,OAA0BjD,IAAA,CAC7C,IAAA+gC,EAAAx9B,KAAAopB,SAAA3sB,GACA2sB,EAAAvjB,KAAA23B,EAAAr6B,EAAAq6B,EAAAp6B,EAAAo6B,EAAAn6B,GAGA,IAAAi1B,EAAA,GACAwB,EAAA,GACA2D,EAAA,GACApF,EAAA,GACAqF,EAAA,GACA3D,EAAA,GACA4D,EAAA,GAEA,IAAAlhC,EAAA,EAAmBA,EAAAuD,KAAAs4B,MAAA54B,OAAuBjD,IAAA,CAC1C,IAAA68B,EAAAt5B,KAAAs4B,MAAA77B,GAIAmhC,OAAA94B,IAAA9E,KAAAu4B,cAAA,GAAA97B,GACAohC,EAAAvE,EAAAplB,OAAAxU,SAAA,EACAo+B,EAAAxE,EAAAhlB,cAAA5U,OAAA,EACAq+B,EAAA,IAAAzE,EAAAnlB,MAAA5W,GAAA,IAAA+7B,EAAAnlB,MAAAjB,GAAA,IAAAomB,EAAAnlB,MAAAhB,EACA6qB,EAAA1E,EAAA9kB,aAAA9U,OAAA,EACAu+B,EAAA,EAcA,GAbAA,EAAAC,EAAAD,EAAA,KAEAA,EAAAC,EAAAD,EAAA,GAXA,GAYAA,EAAAC,EAAAD,EAAA,GAXA,GAYAA,EAAAC,EAAAD,EAAA,EAAAL,GACAK,EAAAC,EAAAD,EAAA,EAAAJ,GACAI,EAAAC,EAAAD,EAAA,EAAAH,GACAG,EAAAC,EAAAD,EAAA,EAAAF,GACAE,EAAAC,EAAAD,EAAA,EAAAD,GACA1F,EAAAzyB,KAAAo4B,GACA3F,EAAAzyB,KAAAyzB,EAAArlB,EAAAqlB,EAAAnmB,EAAAmmB,EAAAx8B,GACAw7B,EAAAzyB,KAAAyzB,EAAAllB,eAEAwpB,EAAA,CACA,IAAArF,EAAAv4B,KAAAu4B,cAAA,GAAA97B,GACA67B,EAAAzyB,KAAAs4B,EAAA5F,EAAA,IAAA4F,EAAA5F,EAAA,IAAA4F,EAAA5F,EAAA,KAOA,GAJAsF,GACAvF,EAAAzyB,KAAAu4B,EAAA9E,EAAAplB,SAGA4pB,EAAA,CACA,IAAAxpB,EAAAglB,EAAAhlB,cACAgkB,EAAAzyB,KAAAu4B,EAAA9pB,EAAA,IAAA8pB,EAAA9pB,EAAA,IAAA8pB,EAAA9pB,EAAA,KAOA,GAJAypB,GACAzF,EAAAzyB,KAAAw4B,EAAA/E,EAAAnlB,QAGA6pB,EAAA,CACA,IAAAxpB,EAAA8kB,EAAA9kB,aACA8jB,EAAAzyB,KAAAw4B,EAAA7pB,EAAA,IAAA6pB,EAAA7pB,EAAA,IAAA6pB,EAAA7pB,EAAA,MAIA,SAAA0pB,EAAAxgC,EAAA6rB,EAAA+U,GACA,OAAAA,EAAA5gC,EAAA,GAAA6rB,EAAA7rB,IAAA,GAAA6rB,GAGA,SAAA6U,EAAAlqB,GACA,IAAAqqB,EAAArqB,EAAA/Q,EAAA1D,WAAAyU,EAAA9Q,EAAA3D,WAAAyU,EAAA7Q,EAAA5D,WAEA,YAAAqF,IAAA24B,EAAAc,GACAd,EAAAc,IAGAd,EAAAc,GAAAzE,EAAAp6B,OAAA,EACAo6B,EAAAj0B,KAAAqO,EAAA/Q,EAAA+Q,EAAA9Q,EAAA8Q,EAAA7Q,GACAo6B,EAAAc,IAGA,SAAAF,EAAAlqB,GACA,IAAAoqB,EAAApqB,EAAA5W,EAAAkC,WAAA0U,EAAAjB,EAAAzT,WAAA0U,EAAAhB,EAAA1T,WAEA,YAAAqF,IAAA44B,EAAAa,GACAb,EAAAa,IAGAb,EAAAa,GAAAlG,EAAA34B,OACA24B,EAAAxyB,KAAAsO,EAAAoD,UACAmmB,EAAAa,IAGA,SAAAJ,EAAAnE,GACA,IAAAuE,EAAAvE,EAAA72B,EAAA1D,WAAAu6B,EAAA52B,EAAA3D,WAEA,YAAAqF,IAAA64B,EAAAY,GACAZ,EAAAY,IAGAZ,EAAAY,GAAAxE,EAAAr6B,OAAA,EACAq6B,EAAAl0B,KAAAm0B,EAAA72B,EAAA62B,EAAA52B,GACAu6B,EAAAY,IAUA,OAPA/+B,OAAA,GACAA,OAAA4pB,WACA5pB,OAAAs6B,UACAzB,EAAA34B,OAAA,IAAAF,OAAA64B,UACA0B,EAAAr6B,OAAA,IAAAF,OAAAu6B,IAAA,CAAAA,IAEAv6B,OAAA84B,QACA94B,GAEAmX,MAAA,WAeA,WAAAyhB,GAAA1iB,KAAA1V,OAEA0V,KAAA,SAAA6N,GACA,IAAA9mB,EAAA+mB,EAAAtiB,EAAAq4B,EAAA/2B,EAAAg8B,EAEAx+B,KAAAopB,SAAA,GACAppB,KAAAq4B,OAAA,GACAr4B,KAAAs4B,MAAA,GACAt4B,KAAAu4B,cAAA,KACAv4B,KAAAw4B,aAAA,GACAx4B,KAAAy4B,aAAA,GACAz4B,KAAA04B,YAAA,GACA14B,KAAA24B,YAAA,GACA34B,KAAA44B,cAAA,GACA54B,KAAA64B,YAAA,KACA74B,KAAA84B,eAAA,KAEA94B,KAAAhD,KAAAumB,EAAAvmB,KAEA,IAAAosB,EAAA7F,EAAA6F,SAEA,IAAA3sB,EAAA,EAAA+mB,EAAA4F,EAAA1pB,OAAqCjD,EAAA+mB,EAAQ/mB,IAC7CuD,KAAAopB,SAAAvjB,KAAAujB,EAAA3sB,GAAAka,SAIA,IAAA0hB,EAAA9U,EAAA8U,OAEA,IAAA57B,EAAA,EAAA+mB,EAAA6U,EAAA34B,OAAmCjD,EAAA+mB,EAAQ/mB,IAC3CuD,KAAAq4B,OAAAxyB,KAAAwyB,EAAA57B,GAAAka,SAIA,IAAA2hB,EAAA/U,EAAA+U,MAEA,IAAA77B,EAAA,EAAA+mB,EAAA8U,EAAA54B,OAAkCjD,EAAA+mB,EAAQ/mB,IAC1CuD,KAAAs4B,MAAAzyB,KAAAyyB,EAAA77B,GAAAka,SAIA,IAAAla,EAAA,EAAA+mB,EAAAD,EAAAgV,cAAA74B,OAAiDjD,EAAA+mB,EAAQ/mB,IAAA,CACzD,IAAA87B,EAAAhV,EAAAgV,cAAA97B,GAMA,SAJAqI,IAAA9E,KAAAu4B,cAAA97B,KACAuD,KAAAu4B,cAAA97B,GAAA,IAGAyE,EAAA,EAAAq4B,EAAAhB,EAAA74B,OAA4CwB,EAAAq4B,EAAQr4B,IAAA,CACpD,IAAA64B,EAAAxB,EAAAr3B,GACAu9B,EAAA,GAEA,IAAAj8B,EAAA,EAAAg8B,EAAAzE,EAAAr6B,OAAoC8C,EAAAg8B,EAAQh8B,IAAA,CAC5C,IAAAw3B,EAAAD,EAAAv3B,GACAi8B,EAAA54B,KAAAm0B,EAAArjB,SAGA3W,KAAAu4B,cAAA97B,GAAAoJ,KAAA44B,IAKA,IAAAjG,EAAAjV,EAAAiV,aAEA,IAAA/7B,EAAA,EAAA+mB,EAAAgV,EAAA94B,OAAyCjD,EAAA+mB,EAAQ/mB,IAAA,CACjD,IAAAiiC,EAAA,GAGA,GAFAA,EAAA1hC,KAAAw7B,EAAA/7B,GAAAO,UAEA8H,IAAA0zB,EAAA/7B,GAAA2sB,SAGA,IAFAsV,EAAAtV,SAAA,GAEAloB,EAAA,EAAAq4B,EAAAf,EAAA/7B,GAAA2sB,SAAA1pB,OAAyDwB,EAAAq4B,EAAQr4B,IACjEw9B,EAAAtV,SAAAvjB,KAAA2yB,EAAA/7B,GAAA2sB,SAAAloB,GAAAyV,SAKA,QAAA7R,IAAA0zB,EAAA/7B,GAAAq9B,QAGA,IAFA4E,EAAA5E,QAAA,GAEA54B,EAAA,EAAAq4B,EAAAf,EAAA/7B,GAAAq9B,QAAAp6B,OAAwDwB,EAAAq4B,EAAQr4B,IAChEw9B,EAAA5E,QAAAj0B,KAAA2yB,EAAA/7B,GAAAq9B,QAAA54B,GAAAyV,SAIA3W,KAAAw4B,aAAA3yB,KAAA64B,GAIA,IAAAjG,EAAAlV,EAAAkV,aAEA,IAAAh8B,EAAA,EAAA+mB,EAAAiV,EAAA/4B,OAAyCjD,EAAA+mB,EAAQ/mB,IAAA,CACjD,IAAAkiC,EAAA,GAEA,QAAA75B,IAAA2zB,EAAAh8B,GAAA6X,cAGA,IAFAqqB,EAAArqB,cAAA,GAEApT,EAAA,EAAAq4B,EAAAd,EAAAh8B,GAAA6X,cAAA5U,OAA8DwB,EAAAq4B,EAAQr4B,IAAA,CACtE,IAAA09B,EAAAnG,EAAAh8B,GAAA6X,cAAApT,GACA29B,EAAA,GACAA,EAAA5qB,EAAA2qB,EAAA3qB,EAAA0C,QACAkoB,EAAA1rB,EAAAyrB,EAAAzrB,EAAAwD,QACAkoB,EAAA/hC,EAAA8hC,EAAA9hC,EAAA6Z,QACAgoB,EAAArqB,cAAAzO,KAAAg5B,GAKA,QAAA/5B,IAAA2zB,EAAAh8B,GAAA6+B,YAGA,IAFAqD,EAAArD,YAAA,GAEAp6B,EAAA,EAAAq4B,EAAAd,EAAAh8B,GAAA6+B,YAAA57B,OAA4DwB,EAAAq4B,EAAQr4B,IACpEy9B,EAAArD,YAAAz1B,KAAA4yB,EAAAh8B,GAAA6+B,YAAAp6B,GAAAyV,SAIA3W,KAAAy4B,aAAA5yB,KAAA84B,GAIA,IAAAjG,EAAAnV,EAAAmV,YAEA,IAAAj8B,EAAA,EAAA+mB,EAAAkV,EAAAh5B,OAAwCjD,EAAA+mB,EAAQ/mB,IAChDuD,KAAA04B,YAAA7yB,KAAA6yB,EAAAj8B,GAAAka,SAIA,IAAAgiB,EAAApV,EAAAoV,YAEA,IAAAl8B,EAAA,EAAA+mB,EAAAmV,EAAAj5B,OAAwCjD,EAAA+mB,EAAQ/mB,IAChDuD,KAAA24B,YAAA9yB,KAAA8yB,EAAAl8B,GAAAka,SAIA,IAAAiiB,EAAArV,EAAAqV,cAEA,IAAAn8B,EAAA,EAAA+mB,EAAAoV,EAAAl5B,OAA0CjD,EAAA+mB,EAAQ/mB,IAClDuD,KAAA44B,cAAA/yB,KAAA+yB,EAAAn8B,IAIA,IAAAo8B,EAAAtV,EAAAsV,YAEA,OAAAA,IACA74B,KAAA64B,cAAAliB,SAIA,IAAAmiB,EAAAvV,EAAAuV,eAcA,OAZA,OAAAA,IACA94B,KAAA84B,iBAAAniB,SAIA3W,KAAA+4B,mBAAAxV,EAAAwV,mBACA/4B,KAAAg5B,mBAAAzV,EAAAyV,mBACAh5B,KAAAi5B,cAAA1V,EAAA0V,cACAj5B,KAAAk5B,kBAAA3V,EAAA2V,kBACAl5B,KAAAm5B,iBAAA5V,EAAA4V,iBACAn5B,KAAAo5B,wBAAA7V,EAAA6V,wBACAp5B,KAAAq5B,iBAAA9V,EAAA8V,iBACAr5B,MAEA8+B,QAAA,WACA9+B,KAAA+G,cAAA,CACAV,KAAA,eCl6BA,IAAA04B,EAAA,EAEA,SAAAC,IACA7hC,OAAAC,eAAA4C,KAAA,MACAtC,MAAAqhC,MAEA/+B,KAAA2yB,KAAcvrB,EAAKI,eACnBxH,KAAAhD,KAAA,GACAgD,KAAAqG,KAAA,WACArG,KAAAi/B,KAAA,EACAj/B,KAAAk/B,QAAA,EACAl/B,KAAAm/B,SAAkBhN,EAClBnyB,KAAAo/B,KAAcnN,EACdjyB,KAAAq/B,aAAA,EACAr/B,KAAAs/B,gBAAA,EACAt/B,KAAAwU,aAAsB0d,EAEtBlyB,KAAAu/B,QAAA,EACAv/B,KAAAw/B,aAAA,EACAx/B,KAAAy/B,SAAkBpN,EAClBryB,KAAA0/B,SAAkBpN,EAClBtyB,KAAA2/B,cAAuBvN,EACvBpyB,KAAA4/B,cAAA,KACA5/B,KAAA6/B,cAAA,KACA7/B,KAAA8/B,mBAAA,KACA9/B,KAAA+/B,UAAmBxN,EACnBvyB,KAAAggC,WAAA,EACAhgC,KAAAigC,YAAA,EACAjgC,KAAAkgC,eAAA,KACAlgC,KAAAmgC,kBAAA,EACAngC,KAAAogC,aAAA,EACApgC,KAAAqgC,WAAA,KACArgC,KAAAsgC,YAAA,EACAtgC,KAAA+8B,UAAA,KAEA/8B,KAAAugC,eAAA,EACAvgC,KAAAwgC,oBAAA,EACAxgC,KAAAygC,mBAAA,EACAzgC,KAAA0gC,WAAA,EACA1gC,KAAA2gC,UAAA,EACA3gC,KAAA4gC,oBAAA,EACA5gC,KAAAqzB,SAAA,EACArzB,KAAA0zB,SAAA,GACA1zB,KAAA6gC,aAAA,ECrBA,SAAAC,EAAArJ,GACEuH,EAAQpiC,KAAAoD,MACVA,KAAAqG,KAAA,qBACArG,KAAA+gC,QAAA,KACA/gC,KAAAghC,UAAA,EACAhhC,KAAAihC,UAAA,KACAjhC,KAAAkhC,cAAuB1O,EACvBxyB,KAAAmhC,YAAA,IAAyBhsB,EAAO,KAChCnV,KAAAohC,gBAAA,KACAphC,KAAAqhC,kBAAA,EACArhC,KAAAshC,iBAAA,EACAthC,KAAAuhC,WAAA,EACAvhC,KAAAwhC,mBAAA,EACAxhC,KAAAi/B,KAAA,EACAj/B,KAAAk/B,QAAA,EACAl/B,KAAAyhC,UAAA,EACAzhC,KAAAw4B,cAAA,EACAx4B,KAAAy4B,cAAA,EACAz4B,KAAA0hC,UAAAjK,GC3CA,SAAAkK,EAAAhK,GACEjF,EAAQ91B,KAAAoD,MACVA,KAAA23B,WAEA33B,KAAA4hC,OAAA,aCFA,SAAAC,EAAA1+B,EAAAC,EAAAC,EAAAC,GACAtD,KAAAmD,KAAA,EACAnD,KAAAoD,KAAA,EACApD,KAAAqD,KAAA,EACArD,KAAAsD,OAAAwB,IAAAxB,IAAA,ECHA,SAAAw+B,EAAA56B,EAAA66B,EAAAC,GACA,GAAA/8B,MAAAC,QAAAgC,GACA,UAAAlB,UAAA,yDAGAhG,KAAAhD,KAAA,GACAgD,KAAAkH,QACAlH,KAAA+hC,WACA/hC,KAAAukB,WAAAzf,IAAAoC,IAAAxH,OAAAqiC,EAAA,EACA/hC,KAAAgiC,YAAA,IAAAA,EACAhiC,KAAAiiC,SAAA,EACAjiC,KAAAkiC,YAAA,CACAnpB,OAAA,EACAwL,OAAA,GAEAvkB,KAAA82B,QAAA,EAkMA,SAAAqL,EAAAj7B,EAAA66B,EAAAC,GACAF,EAAAllC,KAAAoD,KAAA,IAAAoiC,UAAAl7B,GAAA66B,EAAAC,GAMA,SAAAK,EAAAn7B,EAAA66B,EAAAC,GACAF,EAAAllC,KAAAoD,KAAA,IAAAG,WAAA+G,GAAA66B,EAAAC,GAMA,SAAAM,EAAAp7B,EAAA66B,EAAAC,GACAF,EAAAllC,KAAAoD,KAAA,IAAAuiC,kBAAAr7B,GAAA66B,EAAAC,GAMA,SAAAQ,EAAAt7B,EAAA66B,EAAAC,GACAF,EAAAllC,KAAAoD,KAAA,IAAAyiC,WAAAv7B,GAAA66B,EAAAC,GAMA,SAAAU,EAAAx7B,EAAA66B,EAAAC,GACAF,EAAAllC,KAAAoD,KAAA,IAAA2iC,YAAAz7B,GAAA66B,EAAAC,GAMA,SAAAY,EAAA17B,EAAA66B,EAAAC,GACAF,EAAAllC,KAAAoD,KAAA,IAAA6iC,WAAA37B,GAAA66B,EAAAC,GAMA,SAAAc,EAAA57B,EAAA66B,EAAAC,GACAF,EAAAllC,KAAAoD,KAAA,IAAA+iC,YAAA77B,GAAA66B,EAAAC,GAMA,SAAAgB,EAAA97B,EAAA66B,EAAAC,GACAF,EAAAllC,KAAAoD,KAAA,IAAAO,aAAA2G,GAAA66B,EAAAC,GAMA,SAAAiB,EAAA/7B,EAAA66B,EAAAC,GACAF,EAAAllC,KAAAoD,KAAA,IAAAkjC,aAAAh8B,GAAA66B,EAAAC,GC7QA,SAAAmB,IACAnjC,KAAAopB,SAAA,GACAppB,KAAA85B,QAAA,GACA95B,KAAAq4B,OAAA,GACAr4B,KAAA+5B,IAAA,GACA/5B,KAAAi6B,KAAA,GACAj6B,KAAAo6B,OAAA,GACAp6B,KAAAw4B,aAAA,GACAx4B,KAAA04B,YAAA,GACA14B,KAAA24B,YAAA,GAEA34B,KAAA64B,YAAA,KACA74B,KAAA84B,eAAA,KAEA94B,KAAAg5B,oBAAA,EACAh5B,KAAAk5B,mBAAA,EACAl5B,KAAAm5B,kBAAA,EACAn5B,KAAAi5B,eAAA,EACAj5B,KAAAq5B,kBAAA,EL+BA2F,EAAA3gC,UAAAlB,OAAAgJ,OAAAhJ,OAAAY,OAAiDmI,EAAe7H,WAAA,CAChEuY,YAAAooB,EACAoE,YAAA,EACAC,gBAAA,aACA3B,UAAA,SAAA3J,GACA,QAAAjzB,IAAAizB,EAEA,QAAA/5B,KAAA+5B,EAAA,CACA,IAAAuL,EAAAvL,EAAA/5B,GAEA,QAAA8G,IAAAw+B,EAMA,eAAAtlC,EAAA,CAMA,IAAAulC,EAAAvjC,KAAAhC,QAEA8G,IAAAy+B,EAKAA,KAAAhvB,QACAgvB,EAAAnwB,IAAAkwB,GACOC,KAAAlvB,WAAAivB,KAAAjvB,UACPkvB,EAAA7tB,KAAA4tB,GAEAtjC,KAAAhC,GAAAslC,EATA3uB,QAAA0B,KAAA,SAAArW,KAAAqG,KAAA,MAAArI,EAAA,8CARA2W,QAAA0B,KAAA,SAAArW,KAAAqG,KAAA,sEACArG,KAAAq/B,YHtDO,IGsDPiE,OAPA3uB,QAAA0B,KAAA,oBAAArY,EAAA,+BA2BAib,OAAA,SAAAod,GACA,IAAAmN,OAAA1+B,IAAAuxB,GAAA,kBAAAA,EAEAmN,IACAnN,EAAA,CACAK,SAAA,GACAC,OAAA,KAIA,IAAAn3B,EAAA,CACAq3B,SAAA,CACAC,QAAA,IACAzwB,KAAA,WACA0wB,UAAA,oBA8FA,SAAAc,EAAAC,GACA,IAAAC,EAAA,GAEA,QAAA/5B,KAAA85B,EAAA,CACA,IAAAt4B,EAAAs4B,EAAA95B,UACAwB,EAAAq3B,SACAkB,EAAAlyB,KAAArG,GAGA,OAAAu4B,EAGA,GAtGAv4B,EAAAmzB,KAAA3yB,KAAA2yB,KACAnzB,EAAA6G,KAAArG,KAAAqG,KACA,KAAArG,KAAAhD,OAAAwC,EAAAxC,KAAAgD,KAAAhD,MACAgD,KAAAmU,OAAAnU,KAAAmU,MAAAI,UAAA/U,EAAA2U,MAAAnU,KAAAmU,MAAAoD,eACAzS,IAAA9E,KAAAyjC,YAAAjkC,EAAAikC,UAAAzjC,KAAAyjC,gBACA3+B,IAAA9E,KAAA0jC,YAAAlkC,EAAAkkC,UAAA1jC,KAAA0jC,WACA1jC,KAAA2jC,UAAA3jC,KAAA2jC,SAAApvB,UAAA/U,EAAAmkC,SAAA3jC,KAAA2jC,SAAApsB,UACAvX,KAAA4jC,mBAAA,IAAA5jC,KAAA4jC,oBAAApkC,EAAAokC,kBAAA5jC,KAAA4jC,mBACA5jC,KAAA6jC,UAAA7jC,KAAA6jC,SAAAtvB,UAAA/U,EAAAqkC,SAAA7jC,KAAA6jC,SAAAtsB,eACAzS,IAAA9E,KAAA8jC,YAAAtkC,EAAAskC,UAAA9jC,KAAA8jC,gBACAh/B,IAAA9E,KAAA+jC,YAAAvkC,EAAAukC,UAAA/jC,KAAA+jC,gBACAj/B,IAAA9E,KAAAgkC,qBAAAxkC,EAAAwkC,mBAAAhkC,KAAAgkC,oBACAhkC,KAAAikC,KAAAjkC,KAAAikC,IAAAC,YAAA1kC,EAAAykC,IAAAjkC,KAAAikC,IAAAhrB,OAAAod,GAAA1D,MACA3yB,KAAAmkC,QAAAnkC,KAAAmkC,OAAAD,YAAA1kC,EAAA2kC,OAAAnkC,KAAAmkC,OAAAlrB,OAAAod,GAAA1D,MACA3yB,KAAAokC,UAAApkC,KAAAokC,SAAAF,YAAA1kC,EAAA4kC,SAAApkC,KAAAokC,SAAAnrB,OAAAod,GAAA1D,MACA3yB,KAAAqkC,UAAArkC,KAAAqkC,SAAAH,YAAA1kC,EAAA6kC,SAAArkC,KAAAqkC,SAAAprB,OAAAod,GAAA1D,MAEA3yB,KAAAskC,OAAAtkC,KAAAskC,MAAAJ,YACA1kC,EAAA8kC,MAAAtkC,KAAAskC,MAAArrB,OAAAod,GAAA1D,KACAnzB,EAAA+kC,eAAAvkC,KAAAukC,gBAGAvkC,KAAA+gC,SAAA/gC,KAAA+gC,QAAAmD,YACA1kC,EAAAuhC,QAAA/gC,KAAA+gC,QAAA9nB,OAAAod,GAAA1D,KACAnzB,EAAAwhC,UAAAhhC,KAAAghC,WAGAhhC,KAAAihC,WAAAjhC,KAAAihC,UAAAiD,YACA1kC,EAAAyhC,UAAAjhC,KAAAihC,UAAAhoB,OAAAod,GAAA1D,KACAnzB,EAAA0hC,cAAAlhC,KAAAkhC,cACA1hC,EAAA2hC,YAAAnhC,KAAAmhC,YAAAnoB,WAGAhZ,KAAAohC,iBAAAphC,KAAAohC,gBAAA8C,YACA1kC,EAAA4hC,gBAAAphC,KAAAohC,gBAAAnoB,OAAAod,GAAA1D,KACAnzB,EAAA6hC,kBAAArhC,KAAAqhC,kBACA7hC,EAAA8hC,iBAAAthC,KAAAshC,kBAGAthC,KAAAwkC,cAAAxkC,KAAAwkC,aAAAN,YAAA1kC,EAAAglC,aAAAxkC,KAAAwkC,aAAAvrB,OAAAod,GAAA1D,MACA3yB,KAAAykC,cAAAzkC,KAAAykC,aAAAP,YAAA1kC,EAAAilC,aAAAzkC,KAAAykC,aAAAxrB,OAAAod,GAAA1D,MACA3yB,KAAA0kC,aAAA1kC,KAAA0kC,YAAAR,YAAA1kC,EAAAklC,YAAA1kC,KAAA0kC,YAAAzrB,OAAAod,GAAA1D,MACA3yB,KAAA2kC,aAAA3kC,KAAA2kC,YAAAT,YAAA1kC,EAAAmlC,YAAA3kC,KAAA2kC,YAAA1rB,OAAAod,GAAA1D,MAEA3yB,KAAA4kC,QAAA5kC,KAAA4kC,OAAAV,YACA1kC,EAAAolC,OAAA5kC,KAAA4kC,OAAA3rB,OAAAod,GAAA1D,KACAnzB,EAAAqlC,aAAA7kC,KAAA6kC,aAEArlC,EAAAslC,gBAAA9kC,KAAA8kC,qBACAhgC,IAAA9E,KAAA+kC,UAAAvlC,EAAAulC,QAAA/kC,KAAA+kC,cACAjgC,IAAA9E,KAAAglC,kBAAAxlC,EAAAwlC,gBAAAhlC,KAAAglC,kBAGAhlC,KAAAilC,aAAAjlC,KAAAilC,YAAAf,YACA1kC,EAAAylC,YAAAjlC,KAAAilC,YAAAhsB,OAAAod,GAAA1D,WAGA7tB,IAAA9E,KAAAyW,OAAAjX,EAAAiX,KAAAzW,KAAAyW,WACA3R,IAAA9E,KAAAklC,kBAAA1lC,EAAA0lC,gBAAAllC,KAAAklC,iBACAllC,KAAAm/B,WAA0BhN,IAAc3yB,EAAA2/B,SAAAn/B,KAAAm/B,WACxC,IAAAn/B,KAAAq/B,cAAA7/B,EAAA6/B,YAAAr/B,KAAAq/B,aACAr/B,KAAAo/B,OAAsBnN,IAASzyB,EAAA4/B,KAAAp/B,KAAAo/B,MAC/Bp/B,KAAAwU,eAA8B0d,IAAQ1yB,EAAAgV,aAAAxU,KAAAwU,cACtCxU,KAAAu/B,QAAA,IAAA//B,EAAA+/B,QAAAv/B,KAAAu/B,UACA,IAAAv/B,KAAAw/B,cAAAhgC,EAAAggC,YAAAx/B,KAAAw/B,aACAhgC,EAAAugC,UAAA//B,KAAA+/B,UACAvgC,EAAAwgC,UAAAhgC,KAAAggC,UACAxgC,EAAAygC,WAAAjgC,KAAAigC,WAEAjgC,KAAAinB,UAAA,IAAAjnB,KAAAinB,WAAAznB,EAAAynB,SAAAjnB,KAAAinB,WACA,IAAAjnB,KAAAugC,gBAAA/gC,EAAA+gC,eAAA,GACA,IAAAvgC,KAAAwgC,sBAAAhhC,EAAAghC,oBAAAxgC,KAAAwgC,qBACA,IAAAxgC,KAAAygC,qBAAAjhC,EAAAihC,mBAAAzgC,KAAAygC,oBACAzgC,KAAAmlC,WAAA,IAAAnlC,KAAAmlC,YAAA3lC,EAAA2lC,UAAAnlC,KAAAmlC,gBACArgC,IAAA9E,KAAAolC,WAAA5lC,EAAA4lC,SAAAplC,KAAAolC,eACAtgC,IAAA9E,KAAAqlC,UAAA7lC,EAAA6lC,QAAArlC,KAAAqlC,cACAvgC,IAAA9E,KAAAonB,QAAA5nB,EAAA4nB,MAAApnB,KAAAonB,QACA,IAAApnB,KAAA0gC,YAAAlhC,EAAAkhC,WAAA,GACA1gC,KAAA2gC,UAAA,IAAAnhC,EAAAmhC,UAAA3gC,KAAA2gC,YACA,IAAA3gC,KAAA4gC,qBAAAphC,EAAAohC,mBAAA5gC,KAAA4gC,qBACA,IAAA5gC,KAAAuhC,YAAA/hC,EAAA+hC,UAAAvhC,KAAAuhC,WACAvhC,KAAAwhC,mBAAA,IAAAhiC,EAAAgiC,mBAAAxhC,KAAAwhC,oBACA,UAAAxhC,KAAAslC,mBAAA9lC,EAAA8lC,iBAAAtlC,KAAAslC,kBACA,UAAAtlC,KAAAulC,oBAAA/lC,EAAA+lC,kBAAAvlC,KAAAulC,oBACA,IAAAvlC,KAAAw4B,eAAAh5B,EAAAg5B,cAAA,IACA,IAAAx4B,KAAAy4B,eAAAj5B,EAAAi5B,cAAA,IACA,IAAAz4B,KAAAyhC,WAAAjiC,EAAAiiC,UAAA,IACA,IAAAzhC,KAAAqzB,UAAA7zB,EAAA6zB,SAAA,GACA,OAAA8D,KAAAC,UAAAp3B,KAAA0zB,YAA6Cl0B,EAAAk0B,SAAA1zB,KAAA0zB,UAc7C8P,EAAA,CACA,IAAA9M,EAAAmB,EAAAxB,EAAAK,UACAC,EAAAkB,EAAAxB,EAAAM,QACAD,EAAAh3B,OAAA,IAAAF,EAAAk3B,YACAC,EAAAj3B,OAAA,IAAAF,EAAAm3B,UAGA,OAAAn3B,GAEAmX,MAAA,WACA,WAAA3W,KAAA4W,aAAAlB,KAAA1V,OAEA0V,KAAA,SAAA6N,GACAvjB,KAAAhD,KAAAumB,EAAAvmB,KACAgD,KAAAi/B,IAAA1b,EAAA0b,IACAj/B,KAAAk/B,OAAA3b,EAAA2b,OACAl/B,KAAAm/B,SAAA5b,EAAA4b,SACAn/B,KAAAo/B,KAAA7b,EAAA6b,KACAp/B,KAAAq/B,YAAA9b,EAAA8b,YACAr/B,KAAAwU,aAAA+O,EAAA/O,aACAxU,KAAAu/B,QAAAhc,EAAAgc,QACAv/B,KAAAw/B,YAAAjc,EAAAic,YACAx/B,KAAAy/B,SAAAlc,EAAAkc,SACAz/B,KAAA0/B,SAAAnc,EAAAmc,SACA1/B,KAAA2/B,cAAApc,EAAAoc,cACA3/B,KAAA4/B,cAAArc,EAAAqc,cACA5/B,KAAA6/B,cAAAtc,EAAAsc,cACA7/B,KAAA8/B,mBAAAvc,EAAAuc,mBACA9/B,KAAA+/B,UAAAxc,EAAAwc,UACA//B,KAAAggC,UAAAzc,EAAAyc,UACAhgC,KAAAigC,WAAA1c,EAAA0c,WACAjgC,KAAAsgC,WAAA/c,EAAA+c,WACAtgC,KAAA+8B,UAAAxZ,EAAAwZ,UACA/8B,KAAAugC,cAAAhd,EAAAgd,cACAvgC,KAAAwgC,oBAAAjd,EAAAid,oBACAxgC,KAAAygC,mBAAAld,EAAAkd,mBACAzgC,KAAA0gC,UAAAnd,EAAAmd,UACA1gC,KAAA2gC,UAAApd,EAAAod,UACA3gC,KAAA4gC,mBAAArd,EAAAqd,mBACA5gC,KAAAqzB,QAAA9P,EAAA8P,QACArzB,KAAA0zB,SAAAyD,KAAAc,MAAAd,KAAAC,UAAA7T,EAAAmQ,WACA1zB,KAAAogC,YAAA7c,EAAA6c,YACApgC,KAAAmgC,iBAAA5c,EAAA4c,iBACA,IAAAqF,EAAAjiB,EAAA2c,eACAuF,EAAA,KAEA,UAAAD,EAAA,CACA,IAAAtnC,EAAAsnC,EAAA9lC,OACA+lC,EAAA,IAAAxgC,MAAA/G,GAEA,QAAAzB,EAAA,EAAqBA,IAAAyB,IAASzB,EAC9BgpC,EAAAhpC,GAAA+oC,EAAA/oC,GAAAka,QAMA,OAFA3W,KAAAkgC,eAAAuF,EACAzlC,KAAAqgC,WAAA9c,EAAA8c,WACArgC,MAEA8+B,QAAA,WACA9+B,KAAA+G,cAAA,CACAV,KAAA,eC9NAy6B,EAAAziC,UAAAlB,OAAAY,OAA6CihC,EAAQ3gC,WACrDyiC,EAAAziC,UAAAuY,YAAAkqB,EACAA,EAAAziC,UAAAqnC,sBAAA,EAEA5E,EAAAziC,UAAAqX,KAAA,SAAA6N,GAeA,OAdEyb,EAAQ3gC,UAAAqX,KAAA9Y,KAAAoD,KAAAujB,GACVvjB,KAAA+gC,QAAAxd,EAAAwd,QACA/gC,KAAAghC,UAAAzd,EAAAyd,UACAhhC,KAAAihC,UAAA1d,EAAA0d,UACAjhC,KAAAkhC,cAAA3d,EAAA2d,cACAlhC,KAAAmhC,YAAAzrB,KAAA6N,EAAA4d,aACAnhC,KAAAohC,gBAAA7d,EAAA6d,gBACAphC,KAAAqhC,kBAAA9d,EAAA8d,kBACArhC,KAAAshC,iBAAA/d,EAAA+d,iBACAthC,KAAAuhC,UAAAhe,EAAAge,UACAvhC,KAAAwhC,mBAAAje,EAAAie,mBACAxhC,KAAAyhC,SAAAle,EAAAke,SACAzhC,KAAAw4B,aAAAjV,EAAAiV,aACAx4B,KAAAy4B,aAAAlV,EAAAkV,aACAz4B,MCxDA2hC,EAAAtjC,UAAAlB,OAAAY,OAAgD20B,EAAQr0B,WACxDsjC,EAAAtjC,UAAAuY,YAAA+qB,EACAA,EAAAtjC,UAAAsnC,yBAAA,ECFAxoC,OAAAod,iBAAAsnB,EAAAxjC,UAAA,CACA0yB,MAAA,CACAzzB,IAAA,WACA,OAAA0C,KAAAqD,GAEA+P,IAAA,SAAA1V,GACAsC,KAAAqD,EAAA3F,IAGAszB,OAAA,CACA1zB,IAAA,WACA,OAAA0C,KAAAsD,GAEA8P,IAAA,SAAA1V,GACAsC,KAAAsD,EAAA5F,MAIAP,OAAAgJ,OAAA07B,EAAAxjC,UAAA,CACAunC,WAAA,EACAxyB,IAAA,SAAAjQ,EAAAC,EAAAC,EAAAC,GAKA,OAJAtD,KAAAmD,IACAnD,KAAAoD,IACApD,KAAAqD,IACArD,KAAAsD,IACAtD,MAEA6V,UAAA,SAAAC,GAKA,OAJA9V,KAAAmD,EAAA2S,EACA9V,KAAAoD,EAAA0S,EACA9V,KAAAqD,EAAAyS,EACA9V,KAAAsD,EAAAwS,EACA9V,MAEAoe,KAAA,SAAAjb,GAEA,OADAnD,KAAAmD,IACAnD,MAEAqe,KAAA,SAAAjb,GAEA,OADApD,KAAAoD,IACApD,MAEAse,KAAA,SAAAjb,GAEA,OADArD,KAAAqD,IACArD,MAEA6lC,KAAA,SAAAviC,GAEA,OADAtD,KAAAsD,IACAtD,MAEAue,aAAA,SAAA1X,EAAAnJ,GACA,OAAAmJ,GACA,OACA7G,KAAAmD,EAAAzF,EACA,MAEA,OACAsC,KAAAoD,EAAA1F,EACA,MAEA,OACAsC,KAAAqD,EAAA3F,EACA,MAEA,OACAsC,KAAAsD,EAAA5F,EACA,MAEA,QACA,UAAAqd,MAAA,0BAAAlU,GAGA,OAAA7G,MAEAwe,aAAA,SAAA3X,GACA,OAAAA,GACA,OACA,OAAA7G,KAAAmD,EAEA,OACA,OAAAnD,KAAAoD,EAEA,OACA,OAAApD,KAAAqD,EAEA,OACA,OAAArD,KAAAsD,EAEA,QACA,UAAAyX,MAAA,0BAAAlU,KAGA8P,MAAA,WACA,WAAA3W,KAAA4W,YAAA5W,KAAAmD,EAAAnD,KAAAoD,EAAApD,KAAAqD,EAAArD,KAAAsD,IAEAoS,KAAA,SAAAsH,GAKA,OAJAhd,KAAAmD,EAAA6Z,EAAA7Z,EACAnD,KAAAoD,EAAA4Z,EAAA5Z,EACApD,KAAAqD,EAAA2Z,EAAA3Z,EACArD,KAAAsD,OAAAwB,IAAAkY,EAAA1Z,EAAA0Z,EAAA1Z,EAAA,EACAtD,MAEAiY,IAAA,SAAA+E,EAAA1Z,GACA,YAAAwB,IAAAxB,GACAqR,QAAA0B,KAAA,yFACArW,KAAAye,WAAAzB,EAAA1Z,KAGAtD,KAAAmD,GAAA6Z,EAAA7Z,EACAnD,KAAAoD,GAAA4Z,EAAA5Z,EACApD,KAAAqD,GAAA2Z,EAAA3Z,EACArD,KAAAsD,GAAA0Z,EAAA1Z,EACAtD,OAEAqY,UAAA,SAAA7Z,GAKA,OAJAwB,KAAAmD,GAAA3E,EACAwB,KAAAoD,GAAA5E,EACAwB,KAAAqD,GAAA7E,EACAwB,KAAAsD,GAAA9E,EACAwB,MAEAye,WAAA,SAAAxK,EAAAd,GAKA,OAJAnT,KAAAmD,EAAA8Q,EAAA9Q,EAAAgQ,EAAAhQ,EACAnD,KAAAoD,EAAA6Q,EAAA7Q,EAAA+P,EAAA/P,EACApD,KAAAqD,EAAA4Q,EAAA5Q,EAAA8P,EAAA9P,EACArD,KAAAsD,EAAA2Q,EAAA3Q,EAAA6P,EAAA7P,EACAtD,MAEA0e,gBAAA,SAAA1B,EAAAxe,GAKA,OAJAwB,KAAAmD,GAAA6Z,EAAA7Z,EAAA3E,EACAwB,KAAAoD,GAAA4Z,EAAA5Z,EAAA5E,EACAwB,KAAAqD,GAAA2Z,EAAA3Z,EAAA7E,EACAwB,KAAAsD,GAAA0Z,EAAA1Z,EAAA9E,EACAwB,MAEAsY,IAAA,SAAA0E,EAAA1Z,GACA,YAAAwB,IAAAxB,GACAqR,QAAA0B,KAAA,yFACArW,KAAA2e,WAAA3B,EAAA1Z,KAGAtD,KAAAmD,GAAA6Z,EAAA7Z,EACAnD,KAAAoD,GAAA4Z,EAAA5Z,EACApD,KAAAqD,GAAA2Z,EAAA3Z,EACArD,KAAAsD,GAAA0Z,EAAA1Z,EACAtD,OAEA4e,UAAA,SAAApgB,GAKA,OAJAwB,KAAAmD,GAAA3E,EACAwB,KAAAoD,GAAA5E,EACAwB,KAAAqD,GAAA7E,EACAwB,KAAAsD,GAAA9E,EACAwB,MAEA2e,WAAA,SAAA1K,EAAAd,GAKA,OAJAnT,KAAAmD,EAAA8Q,EAAA9Q,EAAAgQ,EAAAhQ,EACAnD,KAAAoD,EAAA6Q,EAAA7Q,EAAA+P,EAAA/P,EACApD,KAAAqD,EAAA4Q,EAAA5Q,EAAA8P,EAAA9P,EACArD,KAAAsD,EAAA2Q,EAAA3Q,EAAA6P,EAAA7P,EACAtD,MAEAwY,eAAA,SAAA1C,GAKA,OAJA9V,KAAAmD,GAAA2S,EACA9V,KAAAoD,GAAA0S,EACA9V,KAAAqD,GAAAyS,EACA9V,KAAAsD,GAAAwS,EACA9V,MAEAmf,aAAA,SAAAtiB,GACA,IAAAsG,EAAAnD,KAAAmD,EACAC,EAAApD,KAAAoD,EACAC,EAAArD,KAAAqD,EACAC,EAAAtD,KAAAsD,EACA4b,EAAAriB,EAAA6X,SAKA,OAJA1U,KAAAmD,EAAA+b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,GAAA7b,EAAA6b,EAAA,IAAA5b,EACAtD,KAAAoD,EAAA8b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,GAAA7b,EAAA6b,EAAA,IAAA5b,EACAtD,KAAAqD,EAAA6b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,IAAA7b,EAAA6b,EAAA,IAAA5b,EACAtD,KAAAsD,EAAA4b,EAAA,GAAA/b,EAAA+b,EAAA,GAAA9b,EAAA8b,EAAA,IAAA7b,EAAA6b,EAAA,IAAA5b,EACAtD,MAEAqgB,aAAA,SAAAvK,GACA,OAAA9V,KAAAwY,eAAA,EAAA1C,IAEAgwB,2BAAA,SAAAvyB,GAGAvT,KAAAsD,EAAA,EAAA3E,KAAAge,KAAApJ,EAAAjQ,GACA,IAAA9E,EAAAG,KAAAC,KAAA,EAAA2U,EAAAjQ,EAAAiQ,EAAAjQ,GAYA,OAVA9E,EAAA,MACAwB,KAAAmD,EAAA,EACAnD,KAAAoD,EAAA,EACApD,KAAAqD,EAAA,IAEArD,KAAAmD,EAAAoQ,EAAApQ,EAAA3E,EACAwB,KAAAoD,EAAAmQ,EAAAnQ,EAAA5E,EACAwB,KAAAqD,EAAAkQ,EAAAlQ,EAAA7E,GAGAwB,MAEA+lC,+BAAA,SAAAlpC,GAGA,IAAAye,EACAnY,EACAC,EACAC,EAMAoY,EAAA5e,EAAA6X,SACAgH,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GACAM,EAAAN,EAAA,GACAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GACAS,EAAAT,EAAA,IAEA,GAAA9c,KAAA6d,IAAAb,EAAAE,GAfA,KAeAld,KAAA6d,IAAAZ,EAAAI,GAfA,KAeArd,KAAA6d,IAAAT,EAAAE,GAfA,IAeA,CAIA,GAAAtd,KAAA6d,IAAAb,EAAAE,GAjBA,IAiBAld,KAAA6d,IAAAZ,EAAAI,GAjBA,IAiBArd,KAAA6d,IAAAT,EAAAE,GAjBA,IAiBAtd,KAAA6d,IAAAd,EAAAI,EAAAI,EAAA,GAjBA,GAoBA,OADAlc,KAAAoT,IAAA,SACApT,KAIAsb,EAAA3c,KAAA2I,GACA,IAAAooB,GAAAhU,EAAA,KACAmU,GAAA/T,EAAA,KACAiU,GAAA7T,EAAA,KACAyT,GAAAhU,EAAAE,GAAA,EACA+T,GAAAhU,EAAAI,GAAA,EACA8T,GAAA/T,EAAAE,GAAA,EAsCA,OApCAyT,EAAAG,GAAAH,EAAAK,EAEAL,EApCA,KAqCAvsB,EAAA,EACAC,EAAA,WACAC,EAAA,aAGAD,EAAAusB,GADAxsB,EAAAxE,KAAAC,KAAA8wB,IAEArsB,EAAAusB,EAAAzsB,GAEO0sB,EAAAE,EAEPF,EA/CA,KAgDA1sB,EAAA,WACAC,EAAA,EACAC,EAAA,aAGAF,EAAAwsB,GADAvsB,EAAAzE,KAAAC,KAAAixB,IAEAxsB,EAAAysB,EAAA1sB,GAIA2sB,EA1DA,KA2DA5sB,EAAA,WACAC,EAAA,WACAC,EAAA,IAGAF,EAAAysB,GADAvsB,EAAA1E,KAAAC,KAAAmxB,IAEA3sB,EAAA0sB,EAAAzsB,GAIArD,KAAAoT,IAAAjQ,EAAAC,EAAAC,EAAAiY,GACAtb,KAIA,IAAAxB,EAAAG,KAAAC,MAAAqd,EAAAF,IAAAE,EAAAF,IAAAH,EAAAI,IAAAJ,EAAAI,IAAAH,EAAAF,IAAAE,EAAAF,IASA,OAPAhd,KAAA6d,IAAAhe,GAAA,OAAAA,EAAA,GAGAwB,KAAAmD,GAAA8Y,EAAAF,GAAAvd,EACAwB,KAAAoD,GAAAwY,EAAAI,GAAAxd,EACAwB,KAAAqD,GAAAwY,EAAAF,GAAAnd,EACAwB,KAAAsD,EAAA3E,KAAAge,MAAAjB,EAAAI,EAAAI,EAAA,MACAlc,MAEAgI,IAAA,SAAAgV,GAKA,OAJAhd,KAAAmD,EAAAxE,KAAAqJ,IAAAhI,KAAAmD,EAAA6Z,EAAA7Z,GACAnD,KAAAoD,EAAAzE,KAAAqJ,IAAAhI,KAAAoD,EAAA4Z,EAAA5Z,GACApD,KAAAqD,EAAA1E,KAAAqJ,IAAAhI,KAAAqD,EAAA2Z,EAAA3Z,GACArD,KAAAsD,EAAA3E,KAAAqJ,IAAAhI,KAAAsD,EAAA0Z,EAAA1Z,GACAtD,MAEAiI,IAAA,SAAA+U,GAKA,OAJAhd,KAAAmD,EAAAxE,KAAAsJ,IAAAjI,KAAAmD,EAAA6Z,EAAA7Z,GACAnD,KAAAoD,EAAAzE,KAAAsJ,IAAAjI,KAAAoD,EAAA4Z,EAAA5Z,GACApD,KAAAqD,EAAA1E,KAAAsJ,IAAAjI,KAAAqD,EAAA2Z,EAAA3Z,GACArD,KAAAsD,EAAA3E,KAAAsJ,IAAAjI,KAAAsD,EAAA0Z,EAAA1Z,GACAtD,MAEA+H,MAAA,SAAAC,EAAAC,GAMA,OAJAjI,KAAAmD,EAAAxE,KAAAsJ,IAAAD,EAAA7E,EAAAxE,KAAAqJ,IAAAC,EAAA9E,EAAAnD,KAAAmD,IACAnD,KAAAoD,EAAAzE,KAAAsJ,IAAAD,EAAA5E,EAAAzE,KAAAqJ,IAAAC,EAAA7E,EAAApD,KAAAoD,IACApD,KAAAqD,EAAA1E,KAAAsJ,IAAAD,EAAA3E,EAAA1E,KAAAqJ,IAAAC,EAAA5E,EAAArD,KAAAqD,IACArD,KAAAsD,EAAA3E,KAAAsJ,IAAAD,EAAA1E,EAAA3E,KAAAqJ,IAAAC,EAAA3E,EAAAtD,KAAAsD,IACAtD,MAEAsgB,YAAA,WACA,IAAAtY,EAAAC,EACA,gBAAAsY,EAAAC,GAQA,YAPA1b,IAAAkD,IACAA,EAAA,IAAA65B,EACA55B,EAAA,IAAA45B,GAGA75B,EAAAoL,IAAAmN,SACAtY,EAAAmL,IAAAoN,SACAxgB,KAAA+H,MAAAC,EAAAC,IAVA,GAaAwY,YAAA,SAAAzY,EAAAC,GACA,IAAAvI,EAAAM,KAAAN,SACA,OAAAM,KAAAqgB,aAAA3gB,GAAA,GAAA8Y,eAAA7Z,KAAAsJ,IAAAD,EAAArJ,KAAAqJ,IAAAC,EAAAvI,MAEAuB,MAAA,WAKA,OAJAjB,KAAAmD,EAAAxE,KAAAsC,MAAAjB,KAAAmD,GACAnD,KAAAoD,EAAAzE,KAAAsC,MAAAjB,KAAAoD,GACApD,KAAAqD,EAAA1E,KAAAsC,MAAAjB,KAAAqD,GACArD,KAAAsD,EAAA3E,KAAAsC,MAAAjB,KAAAsD,GACAtD,MAEAwJ,KAAA,WAKA,OAJAxJ,KAAAmD,EAAAxE,KAAA6K,KAAAxJ,KAAAmD,GACAnD,KAAAoD,EAAAzE,KAAA6K,KAAAxJ,KAAAoD,GACApD,KAAAqD,EAAA1E,KAAA6K,KAAAxJ,KAAAqD,GACArD,KAAAsD,EAAA3E,KAAA6K,KAAAxJ,KAAAsD,GACAtD,MAEA0gB,MAAA,WAKA,OAJA1gB,KAAAmD,EAAAxE,KAAA+hB,MAAA1gB,KAAAmD,GACAnD,KAAAoD,EAAAzE,KAAA+hB,MAAA1gB,KAAAoD,GACApD,KAAAqD,EAAA1E,KAAA+hB,MAAA1gB,KAAAqD,GACArD,KAAAsD,EAAA3E,KAAA+hB,MAAA1gB,KAAAsD,GACAtD,MAEA2gB,YAAA,WAKA,OAJA3gB,KAAAmD,EAAAnD,KAAAmD,EAAA,EAAAxE,KAAA6K,KAAAxJ,KAAAmD,GAAAxE,KAAAsC,MAAAjB,KAAAmD,GACAnD,KAAAoD,EAAApD,KAAAoD,EAAA,EAAAzE,KAAA6K,KAAAxJ,KAAAoD,GAAAzE,KAAAsC,MAAAjB,KAAAoD,GACApD,KAAAqD,EAAArD,KAAAqD,EAAA,EAAA1E,KAAA6K,KAAAxJ,KAAAqD,GAAA1E,KAAAsC,MAAAjB,KAAAqD,GACArD,KAAAsD,EAAAtD,KAAAsD,EAAA,EAAA3E,KAAA6K,KAAAxJ,KAAAsD,GAAA3E,KAAAsC,MAAAjB,KAAAsD,GACAtD,MAEA4gB,OAAA,WAKA,OAJA5gB,KAAAmD,GAAAnD,KAAAmD,EACAnD,KAAAoD,GAAApD,KAAAoD,EACApD,KAAAqD,GAAArD,KAAAqD,EACArD,KAAAsD,GAAAtD,KAAAsD,EACAtD,MAEAuc,IAAA,SAAAS,GACA,OAAAhd,KAAAmD,EAAA6Z,EAAA7Z,EAAAnD,KAAAoD,EAAA4Z,EAAA5Z,EAAApD,KAAAqD,EAAA2Z,EAAA3Z,EAAArD,KAAAsD,EAAA0Z,EAAA1Z,GAEA2Z,SAAA,WACA,OAAAjd,KAAAmD,EAAAnD,KAAAmD,EAAAnD,KAAAoD,EAAApD,KAAAoD,EAAApD,KAAAqD,EAAArD,KAAAqD,EAAArD,KAAAsD,EAAAtD,KAAAsD,GAEA5D,OAAA,WACA,OAAAf,KAAAC,KAAAoB,KAAAmD,EAAAnD,KAAAmD,EAAAnD,KAAAoD,EAAApD,KAAAoD,EAAApD,KAAAqD,EAAArD,KAAAqD,EAAArD,KAAAsD,EAAAtD,KAAAsD,IAEAud,gBAAA,WACA,OAAAliB,KAAA6d,IAAAxc,KAAAmD,GAAAxE,KAAA6d,IAAAxc,KAAAoD,GAAAzE,KAAA6d,IAAAxc,KAAAqD,GAAA1E,KAAA6d,IAAAxc,KAAAsD,IAEAmZ,UAAA,WACA,OAAAzc,KAAAqgB,aAAArgB,KAAAN,UAAA,IAEAohB,UAAA,SAAAphB,GACA,OAAAM,KAAAyc,YAAAjE,eAAA9Y,IAEA8I,KAAA,SAAAwU,EAAAvE,GAKA,OAJAzY,KAAAmD,IAAA6Z,EAAA7Z,EAAAnD,KAAAmD,GAAAsV,EACAzY,KAAAoD,IAAA4Z,EAAA5Z,EAAApD,KAAAoD,GAAAqV,EACAzY,KAAAqD,IAAA2Z,EAAA3Z,EAAArD,KAAAqD,GAAAoV,EACAzY,KAAAsD,IAAA0Z,EAAA1Z,EAAAtD,KAAAsD,GAAAmV,EACAzY,MAEA+gB,YAAA,SAAAC,EAAAC,EAAAxI,GACA,OAAAzY,KAAA2e,WAAAsC,EAAAD,GAAAxI,eAAAC,GAAAR,IAAA+I,IAEAnI,OAAA,SAAAmE,GACA,OAAAA,EAAA7Z,IAAAnD,KAAAmD,GAAA6Z,EAAA5Z,IAAApD,KAAAoD,GAAA4Z,EAAA3Z,IAAArD,KAAAqD,GAAA2Z,EAAA1Z,IAAAtD,KAAAsD,GAEAwV,UAAA,SAAA5R,EAAA6R,GAMA,YALAjU,IAAAiU,MAAA,GACA/Y,KAAAmD,EAAA+D,EAAA6R,GACA/Y,KAAAoD,EAAA8D,EAAA6R,EAAA,GACA/Y,KAAAqD,EAAA6D,EAAA6R,EAAA,GACA/Y,KAAAsD,EAAA4D,EAAA6R,EAAA,GACA/Y,MAEAgZ,QAAA,SAAA9R,EAAA6R,GAOA,YANAjU,IAAAoC,MAAA,SACApC,IAAAiU,MAAA,GACA7R,EAAA6R,GAAA/Y,KAAAmD,EACA+D,EAAA6R,EAAA,GAAA/Y,KAAAoD,EACA8D,EAAA6R,EAAA,GAAA/Y,KAAAqD,EACA6D,EAAA6R,EAAA,GAAA/Y,KAAAsD,EACA4D,GAEAgc,oBAAA,SAAAC,EAAAtc,EAAAkS,GASA,YARAjU,IAAAiU,GACApE,QAAA0B,KAAA,uEAGArW,KAAAmD,EAAAggB,EAAAC,KAAAvc,GACA7G,KAAAoD,EAAA+f,EAAAE,KAAAxc,GACA7G,KAAAqD,EAAA8f,EAAAG,KAAAzc,GACA7G,KAAAsD,EAAA6f,EAAA6iB,KAAAn/B,GACA7G,QC7ZA7C,OAAAC,eAAA0kC,EAAAzjC,UAAA,eACA+U,IAAA,SAAA1V,IACA,IAAAA,GAAAsC,KAAA82B,aAGA35B,OAAAgJ,OAAA27B,EAAAzjC,UAAA,CACA4nC,mBAAA,EACAC,iBAAA,aACAC,SAAA,SAAAj/B,GACA,GAAAjC,MAAAC,QAAAgC,GACA,UAAAlB,UAAA,yDAKA,OAFAhG,KAAAukB,WAAAzf,IAAAoC,IAAAxH,OAAAM,KAAA+hC,SAAA,EACA/hC,KAAAkH,QACAlH,MAEAomC,WAAA,SAAA1oC,GAEA,OADAsC,KAAAiiC,QAAAvkC,EACAsC,MAEA0V,KAAA,SAAA6N,GAOA,OANAvjB,KAAAhD,KAAAumB,EAAAvmB,KACAgD,KAAAkH,MAAA,IAAAqc,EAAArc,MAAA0P,YAAA2M,EAAArc,OACAlH,KAAA+hC,SAAAxe,EAAAwe,SACA/hC,KAAAukB,MAAAhB,EAAAgB,MACAvkB,KAAAgiC,WAAAze,EAAAye,WACAhiC,KAAAiiC,QAAA1e,EAAA0e,QACAjiC,MAEAqmC,OAAA,SAAAC,EAAAnjB,EAAAojB,GACAD,GAAAtmC,KAAA+hC,SACAwE,GAAApjB,EAAA4e,SAEA,QAAAtlC,EAAA,EAAAC,EAAAsD,KAAA+hC,SAAsCtlC,EAAAC,EAAOD,IAC7CuD,KAAAkH,MAAAo/B,EAAA7pC,GAAA0mB,EAAAjc,MAAAq/B,EAAA9pC,GAGA,OAAAuD,MAEAwmC,UAAA,SAAAt/B,GAEA,OADAlH,KAAAkH,MAAAkM,IAAAlM,GACAlH,MAEAymC,gBAAA,SAAApO,GAIA,IAHA,IAAAnxB,EAAAlH,KAAAkH,MACA6R,EAAA,EAEAtc,EAAA,EAAAC,EAAA27B,EAAA34B,OAAsCjD,EAAAC,EAAOD,IAAA,CAC7C,IAAA0X,EAAAkkB,EAAA57B,QAEAqI,IAAAqP,IACAQ,QAAA0B,KAAA,8DAAA5Z,GACA0X,EAAA,IAAoBlB,GAGpB/L,EAAA6R,KAAA5E,EAAA5W,EACA2J,EAAA6R,KAAA5E,EAAAjB,EACAhM,EAAA6R,KAAA5E,EAAAhB,EAGA,OAAAnT,MAEA0mC,kBAAA,SAAAC,GAIA,IAHA,IAAAz/B,EAAAlH,KAAAkH,MACA6R,EAAA,EAEAtc,EAAA,EAAAC,EAAAiqC,EAAAjnC,OAAuCjD,EAAAC,EAAOD,IAAA,CAC9C,IAAAklB,EAAAglB,EAAAlqC,QAEAqI,IAAA6c,IACAhN,QAAA0B,KAAA,iEAAA5Z,GACAklB,EAAA,IAAqBxM,GAGrBjO,EAAA6R,KAAA4I,EAAAxe,EACA+D,EAAA6R,KAAA4I,EAAAve,EAGA,OAAApD,MAEA4mC,kBAAA,SAAAD,GAIA,IAHA,IAAAz/B,EAAAlH,KAAAkH,MACA6R,EAAA,EAEAtc,EAAA,EAAAC,EAAAiqC,EAAAjnC,OAAuCjD,EAAAC,EAAOD,IAAA,CAC9C,IAAAklB,EAAAglB,EAAAlqC,QAEAqI,IAAA6c,IACAhN,QAAA0B,KAAA,iEAAA5Z,GACAklB,EAAA,IAAqB5N,GAGrB7M,EAAA6R,KAAA4I,EAAAxe,EACA+D,EAAA6R,KAAA4I,EAAAve,EACA8D,EAAA6R,KAAA4I,EAAAte,EAGA,OAAArD,MAEA6mC,kBAAA,SAAAF,GAIA,IAHA,IAAAz/B,EAAAlH,KAAAkH,MACA6R,EAAA,EAEAtc,EAAA,EAAAC,EAAAiqC,EAAAjnC,OAAuCjD,EAAAC,EAAOD,IAAA,CAC9C,IAAAklB,EAAAglB,EAAAlqC,QAEAqI,IAAA6c,IACAhN,QAAA0B,KAAA,iEAAA5Z,GACAklB,EAAA,IAAqBkgB,GAGrB36B,EAAA6R,KAAA4I,EAAAxe,EACA+D,EAAA6R,KAAA4I,EAAAve,EACA8D,EAAA6R,KAAA4I,EAAAte,EACA6D,EAAA6R,KAAA4I,EAAAre,EAGA,OAAAtD,MAEAoT,IAAA,SAAA1V,EAAAqb,GAGA,YAFAjU,IAAAiU,MAAA,GACA/Y,KAAAkH,MAAAkM,IAAA1V,EAAAqb,GACA/Y,MAEAojB,KAAA,SAAAvc,GACA,OAAA7G,KAAAkH,MAAAL,EAAA7G,KAAA+hC,WAEA3jB,KAAA,SAAAvX,EAAA1D,GAEA,OADAnD,KAAAkH,MAAAL,EAAA7G,KAAA+hC,UAAA5+B,EACAnD,MAEAqjB,KAAA,SAAAxc,GACA,OAAA7G,KAAAkH,MAAAL,EAAA7G,KAAA+hC,SAAA,IAEA1jB,KAAA,SAAAxX,EAAAzD,GAEA,OADApD,KAAAkH,MAAAL,EAAA7G,KAAA+hC,SAAA,GAAA3+B,EACApD,MAEAsjB,KAAA,SAAAzc,GACA,OAAA7G,KAAAkH,MAAAL,EAAA7G,KAAA+hC,SAAA,IAEAzjB,KAAA,SAAAzX,EAAAxD,GAEA,OADArD,KAAAkH,MAAAL,EAAA7G,KAAA+hC,SAAA,GAAA1+B,EACArD,MAEAgmC,KAAA,SAAAn/B,GACA,OAAA7G,KAAAkH,MAAAL,EAAA7G,KAAA+hC,SAAA,IAEA8D,KAAA,SAAAh/B,EAAAvD,GAEA,OADAtD,KAAAkH,MAAAL,EAAA7G,KAAA+hC,SAAA,GAAAz+B,EACAtD,MAEA8mC,MAAA,SAAAjgC,EAAA1D,EAAAC,GAIA,OAHAyD,GAAA7G,KAAA+hC,SACA/hC,KAAAkH,MAAAL,EAAA,GAAA1D,EACAnD,KAAAkH,MAAAL,EAAA,GAAAzD,EACApD,MAEAwkB,OAAA,SAAA3d,EAAA1D,EAAAC,EAAAC,GAKA,OAJAwD,GAAA7G,KAAA+hC,SACA/hC,KAAAkH,MAAAL,EAAA,GAAA1D,EACAnD,KAAAkH,MAAAL,EAAA,GAAAzD,EACApD,KAAAkH,MAAAL,EAAA,GAAAxD,EACArD,MAEA+mC,QAAA,SAAAlgC,EAAA1D,EAAAC,EAAAC,EAAAC,GAMA,OALAuD,GAAA7G,KAAA+hC,SACA/hC,KAAAkH,MAAAL,EAAA,GAAA1D,EACAnD,KAAAkH,MAAAL,EAAA,GAAAzD,EACApD,KAAAkH,MAAAL,EAAA,GAAAxD,EACArD,KAAAkH,MAAAL,EAAA,GAAAvD,EACAtD,MAEAgnC,SAAA,SAAA7oB,GAEA,OADAne,KAAAkmC,iBAAA/nB,EACAne,MAEA2W,MAAA,WACA,WAAA3W,KAAA4W,YAAA5W,KAAAkH,MAAAlH,KAAA+hC,UAAArsB,KAAA1V,OAEAiZ,OAAA,WACA,OACA8oB,SAAA/hC,KAAA+hC,SACA17B,KAAArG,KAAAkH,MAAA0P,YAAA5Z,KACAkK,MAAAjC,MAAA5G,UAAA8I,MAAAvK,KAAAoD,KAAAkH,OACA86B,WAAAhiC,KAAAgiC,eASAG,EAAA9jC,UAAAlB,OAAAY,OAAA+jC,EAAAzjC,WACA8jC,EAAA9jC,UAAAuY,YAAAurB,EAMAE,EAAAhkC,UAAAlB,OAAAY,OAAA+jC,EAAAzjC,WACAgkC,EAAAhkC,UAAAuY,YAAAyrB,EAMAC,EAAAjkC,UAAAlB,OAAAY,OAAA+jC,EAAAzjC,WACAikC,EAAAjkC,UAAAuY,YAAA0rB,EAMAE,EAAAnkC,UAAAlB,OAAAY,OAAA+jC,EAAAzjC,WACAmkC,EAAAnkC,UAAAuY,YAAA4rB,EAMAE,EAAArkC,UAAAlB,OAAAY,OAAA+jC,EAAAzjC,WACAqkC,EAAArkC,UAAAuY,YAAA8rB,EAMAE,EAAAvkC,UAAAlB,OAAAY,OAAA+jC,EAAAzjC,WACAukC,EAAAvkC,UAAAuY,YAAAgsB,EAMAE,EAAAzkC,UAAAlB,OAAAY,OAAA+jC,EAAAzjC,WACAykC,EAAAzkC,UAAAuY,YAAAksB,EAMAE,EAAA3kC,UAAAlB,OAAAY,OAAA+jC,EAAAzjC,WACA2kC,EAAA3kC,UAAAuY,YAAAosB,EAMAC,EAAA5kC,UAAAlB,OAAAY,OAAA+jC,EAAAzjC,WACA4kC,EAAA5kC,UAAAuY,YAAAqsB,EC5PA9lC,OAAAgJ,OAAAg9B,EAAA9kC,UAAA,CACA4oC,cAAA,SAAA/d,GAMA,IALA,IAAAmR,EACAD,EAAA,GACAhmB,OAAAtP,EACAwzB,EAAApP,EAAAoP,MAEA77B,EAAA,EAAmBA,EAAA67B,EAAA54B,OAAkBjD,IAAA,CACrC,IAAA68B,EAAAhB,EAAA77B,GAEA68B,EAAAllB,oBACAA,EAAAklB,EAAAllB,mBAEAtP,IAAAu1B,IACAA,EAAA9V,MAAA,EAAA9nB,EAAA49B,EAAAC,MACAF,EAAAv0B,KAAAw0B,IAGAA,EAAA,CACAC,MAAA,EAAA79B,EACA2X,uBAKAtP,IAAAu1B,IACAA,EAAA9V,MAAA,EAAA9nB,EAAA49B,EAAAC,MACAF,EAAAv0B,KAAAw0B,IAGAr6B,KAAAo6B,UAEA8M,aAAA,SAAAhe,GACA,IAQAie,EARA7O,EAAApP,EAAAoP,MACAlP,EAAAF,EAAAE,SACAmP,EAAArP,EAAAqP,cACAqF,EAAArF,EAAA,IAAAA,EAAA,GAAA74B,OAAA,EACA0nC,EAAA7O,EAAA,IAAAA,EAAA,GAAA74B,OAAA,EAEA84B,EAAAtP,EAAAsP,aACA6O,EAAA7O,EAAA94B,OAGA,GAAA2nC,EAAA,GACAF,EAAA,GAEA,QAAA1qC,EAAA,EAAqBA,EAAA4qC,EAAwB5qC,IAC7C0qC,EAAA1qC,GAAA,CACAO,KAAAw7B,EAAA/7B,GAAAO,KACAwC,KAAA,IAIAQ,KAAAw4B,aAAAjP,SAAA4d,EAGA,IAEAG,EAFA7O,EAAAvP,EAAAuP,aACA8O,EAAA9O,EAAA/4B,OAGA,GAAA6nC,EAAA,GACAD,EAAA,GAEA,IAAA7qC,EAAA,EAAqBA,EAAA8qC,EAAwB9qC,IAC7C6qC,EAAA7qC,GAAA,CACAO,KAAAy7B,EAAAh8B,GAAAO,KACAwC,KAAA,IAIAQ,KAAAw4B,aAAAtkB,OAAAozB,EAIA,IAAA3O,EAAAzP,EAAAyP,YACAD,EAAAxP,EAAAwP,YACA8O,EAAA7O,EAAAj5B,SAAA0pB,EAAA1pB,OACA+nC,EAAA/O,EAAAh5B,SAAA0pB,EAAA1pB,OAEA0pB,EAAA1pB,OAAA,OAAA44B,EAAA54B,QACAiV,QAAAC,MAAA,gEAGA,IAAAnY,EAAA,EAAmBA,EAAA67B,EAAA54B,OAAkBjD,IAAA,CACrC,IAAA68B,EAAAhB,EAAA77B,GACAuD,KAAAopB,SAAAvjB,KAAAujB,EAAAkQ,EAAArlB,GAAAmV,EAAAkQ,EAAAnmB,GAAAiW,EAAAkQ,EAAAx8B,IACA,IAAAwX,EAAAglB,EAAAhlB,cAEA,OAAAA,EAAA5U,OACAM,KAAA85B,QAAAj0B,KAAAyO,EAAA,GAAAA,EAAA,GAAAA,EAAA,QACO,CACP,IAAAJ,EAAAolB,EAAAplB,OACAlU,KAAA85B,QAAAj0B,KAAAqO,OAGA,IAqBAwzB,EArBAlzB,EAAA8kB,EAAA9kB,aAEA,OAAAA,EAAA9U,OACAM,KAAAq4B,OAAAxyB,KAAA2O,EAAA,GAAAA,EAAA,GAAAA,EAAA,QACO,CACP,IAAAL,EAAAmlB,EAAAnlB,MACAnU,KAAAq4B,OAAAxyB,KAAAsO,OAGA,QAAAypB,OAGA94B,KAFA4iC,EAAAnP,EAAA,GAAA97B,IAGAuD,KAAA+5B,IAAAl0B,KAAA6hC,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEA/yB,QAAA0B,KAAA,2DAAA5Z,GACAuD,KAAA+5B,IAAAl0B,KAAA,IAA4BsP,EAAO,IAAQA,EAAO,IAAQA,IAI1D,QAAAiyB,OAGAtiC,KAFA4iC,EAAAnP,EAAA,GAAA97B,IAGAuD,KAAAi6B,KAAAp0B,KAAA6hC,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEA/yB,QAAA0B,KAAA,4DAAA5Z,GACAuD,KAAAi6B,KAAAp0B,KAAA,IAA6BsP,EAAO,IAAQA,EAAO,IAAQA,IAK3D,QAAAjU,EAAA,EAAqBA,EAAAmmC,EAAwBnmC,IAAA,CAC7C,IAAAw9B,EAAAlG,EAAAt3B,GAAAkoB,SACA+d,EAAAjmC,GAAA1B,KAAAqG,KAAA64B,EAAApF,EAAArlB,GAAAyqB,EAAApF,EAAAnmB,GAAAurB,EAAApF,EAAAx8B,IAGA,IAAAoE,EAAA,EAAqBA,EAAAqmC,EAAwBrmC,IAAA,CAC7C,IAAAy9B,EAAAlG,EAAAv3B,GAAAoT,cAAA7X,GACA6qC,EAAApmC,GAAA1B,KAAAqG,KAAA84B,EAAA1qB,EAAA0qB,EAAAxrB,EAAAwrB,EAAA7hC,GAIA0qC,GACAxnC,KAAA24B,YAAA9yB,KAAA8yB,EAAAW,EAAArlB,GAAA0kB,EAAAW,EAAAnmB,GAAAwlB,EAAAW,EAAAx8B,IAGA2qC,GACAznC,KAAA04B,YAAA7yB,KAAA6yB,EAAAY,EAAArlB,GAAAykB,EAAAY,EAAAnmB,GAAAulB,EAAAY,EAAAx8B,IAmBA,OAfAkD,KAAAinC,cAAA/d,GACAlpB,KAAAg5B,mBAAA9P,EAAA8P,mBACAh5B,KAAAk5B,kBAAAhQ,EAAAgQ,kBACAl5B,KAAAm5B,iBAAAjQ,EAAAiQ,iBACAn5B,KAAAi5B,cAAA/P,EAAA+P,cACAj5B,KAAAq5B,iBAAAnQ,EAAAmQ,iBAEA,OAAAnQ,EAAA4P,iBACA94B,KAAA84B,eAAA5P,EAAA4P,eAAAniB,SAGA,OAAAuS,EAAA2P,cACA74B,KAAA64B,YAAA3P,EAAA2P,YAAAliB,SAGA3W,QC5KA,IAAA2nC,EAAA,EAEA,SAAAC,IACAzqC,OAAAC,eAAA4C,KAAA,MACAtC,MAAAiqC,GAAA,IAEA3nC,KAAA2yB,KAAcvrB,EAAKI,eACnBxH,KAAAhD,KAAA,GACAgD,KAAAqG,KAAA,iBACArG,KAAA6G,MAAA,KACA7G,KAAAspB,WAAA,GACAtpB,KAAA6nC,gBAAA,GACA7nC,KAAAo6B,OAAA,GACAp6B,KAAA64B,YAAA,KACA74B,KAAA84B,eAAA,KACA94B,KAAA8nC,UAAA,CACAxN,MAAA,EACA/V,MAAAzP,KAEA9U,KAAA0zB,SAAA,GAGAkU,EAAAvpC,UAAAlB,OAAAgJ,OAAAhJ,OAAAY,OAAuDmI,EAAe7H,WAAA,CACtEuY,YAAAgxB,EACAve,kBAAA,EACA0e,SAAA,WACA,OAAA/nC,KAAA6G,OAEAmhC,SAAA,SAAAnhC,GACA5B,MAAAC,QAAA2B,GACA7G,KAAA6G,MAAA,IChCA,SAAAK,GACA,OAAAA,EAAAxH,OAAA,WAGA,IAFA,IAAAuI,EAAAf,EAAA,GAEAzK,EAAA,EAAAC,EAAAwK,EAAAxH,OAAmCjD,EAAAC,IAAOD,EAC1CyK,EAAAzK,GAAAwL,MAAAf,EAAAzK,IAGA,OAAAwL,EDwBwBggC,CAAQphC,GAAA,MAAkBi8B,EAAwBJ,GAAqB77B,EAAA,GAE/F7G,KAAA6G,SAGAqhC,aAAA,SAAAlrC,EAAAmmB,GACA,OAAAA,KAAA8iB,mBAAA9iB,KAAAglB,6BAKA,UAAAnrC,GACA2X,QAAA0B,KAAA,2EACArW,KAAAgoC,SAAA7kB,GACAnjB,OAGAA,KAAAspB,WAAAtsB,GAAAmmB,EACAnjB,OAXA2U,QAAA0B,KAAA,0EACArW,KAAAkoC,aAAAlrC,EAAA,IAAyC8kC,EAAehiC,UAAA,GAAAA,UAAA,OAYxDsoC,aAAA,SAAAprC,GACA,OAAAgD,KAAAspB,WAAAtsB,IAEAqrC,gBAAA,SAAArrC,GAEA,cADAgD,KAAAspB,WAAAtsB,GACAgD,MAEAsoC,SAAA,SAAAhO,EAAA/V,EAAAnQ,GACApU,KAAAo6B,OAAAv0B,KAAA,CACAy0B,QACA/V,QACAnQ,mBAAAtP,IAAAsP,IAAA,KAGAm0B,YAAA,WACAvoC,KAAAo6B,OAAA,IAEAoO,aAAA,SAAAlO,EAAA/V,GACAvkB,KAAA8nC,UAAAxN,QACAt6B,KAAA8nC,UAAAvjB,SAEAuP,YAAA,SAAA9N,GACA,IAAAuD,EAAAvpB,KAAAspB,WAAAC,cAEAzkB,IAAAykB,IACAvD,EAAA1B,uBAAAiF,GACAA,EAAAsX,aAAA,GAGA,IAAA3sB,EAAAlU,KAAAspB,WAAApV,YAEApP,IAAAoP,KACA,IAA6BO,GAAOkS,gBAAAX,GACpC1B,uBAAApQ,GACAA,EAAA2sB,aAAA,GAGA,IAAA4H,EAAAzoC,KAAAspB,WAAAmf,aAEA3jC,IAAA2jC,KACA,IAA6Bh0B,GAAOkS,gBAAAX,GAEpC1B,uBAAAmkB,GACAA,EAAA5H,aAAA,GAWA,OARA,OAAA7gC,KAAA64B,aACA74B,KAAAw5B,qBAGA,OAAAx5B,KAAA84B,gBACA94B,KAAAy5B,wBAGAz5B,MAEAu0B,QAAA,WAEA,IAAAU,EAAA,IAAiB/f,EACjB,gBAAAoG,GAGA,OAFA2Z,EAAA7F,cAAA9T,GACAtb,KAAA8zB,YAAAmB,GACAj1B,MANA,GASAw0B,QAAA,WAEA,IAAAS,EAAA,IAAiB/f,EACjB,gBAAAoG,GAGA,OAFA2Z,EAAA5F,cAAA/T,GACAtb,KAAA8zB,YAAAmB,GACAj1B,MANA,GASAy0B,QAAA,WAEA,IAAAQ,EAAA,IAAiB/f,EACjB,gBAAAoG,GAGA,OAFA2Z,EAAA3F,cAAAhU,GACAtb,KAAA8zB,YAAAmB,GACAj1B,MANA,GASAsnB,UAAA,WAEA,IAAA2N,EAAA,IAAiB/f,EACjB,gBAAA/R,EAAAC,EAAAC,GAGA,OAFA4xB,EAAA9F,gBAAAhsB,EAAAC,EAAAC,GACArD,KAAA8zB,YAAAmB,GACAj1B,MANA,GASAonB,MAAA,WAEA,IAAA6N,EAAA,IAAiB/f,EACjB,gBAAA/R,EAAAC,EAAAC,GAGA,OAFA4xB,EAAAzF,UAAArsB,EAAAC,EAAAC,GACArD,KAAA8zB,YAAAmB,GACAj1B,MANA,GASA6tB,OAAA,WACA,IAAA6L,EAAA,IAAkBhH,EAClB,gBAAA/Q,GACA+X,EAAA7L,OAAAlM,GACA+X,EAAA3F,eACA/zB,KAAA8zB,YAAA4F,EAAA1T,SALA,GAQAhR,OAAA,WACA,IAAA+D,EAAA,IAAqBhF,EACrB,kBAIA,OAHA/T,KAAAw5B,qBACAx5B,KAAA64B,YAAAnQ,UAAA3P,GAAA6H,SACA5gB,KAAAsnB,UAAAvO,EAAA5V,EAAA4V,EAAA3V,EAAA2V,EAAA1V,GACArD,MANA,GASAsoB,cAAA,SAAAnqB,GAEA,IAAA+qB,EAAA/qB,EAAA+qB,SAEA,GAAA/qB,EAAAq5B,UAAAr5B,EAAAo5B,OAAA,CACA,IAAAsC,EAAA,IAA0BmJ,EAAsB,EAAA9Z,EAAAE,SAAA1pB,OAAA,GAChD24B,EAAA,IAAuB2K,EAAsB,EAAA9Z,EAAAmP,OAAA34B,OAAA,GAI7C,GAHAM,KAAAkoC,aAAA,WAAArO,EAAA+M,kBAAA1d,EAAAE,WACAppB,KAAAkoC,aAAA,QAAA7P,EAAAoO,gBAAAvd,EAAAmP,SAEAnP,EAAA0P,eAAA1P,EAAA0P,cAAAl5B,SAAAwpB,EAAAE,SAAA1pB,OAAA,CACA,IAAAk5B,EAAA,IAAgCoK,EAAsB9Z,EAAA0P,cAAAl5B,OAAA,GACtDM,KAAAkoC,aAAA,eAAAtP,EAAA4N,UAAAtd,EAAA0P,gBAGA,OAAA1P,EAAA4P,iBACA94B,KAAA84B,eAAA5P,EAAA4P,eAAAniB,SAGA,OAAAuS,EAAA2P,cACA74B,KAAA64B,YAAA3P,EAAA2P,YAAAliB,cAEKxY,EAAAk5B,QACLnO,KAAAC,YACAnpB,KAAAknC,aAAAhe,GAIA,OAAAlpB,MAEAgoB,cAAA,SAAAC,GAGA,IAFA,IAAAsB,EAAA,GAEA9sB,EAAA,EAAAC,EAAAurB,EAAAvoB,OAAsCjD,EAAAC,EAAOD,IAAA,CAC7C,IAAAmsB,EAAAX,EAAAxrB,GACA8sB,EAAA1jB,KAAA+iB,EAAAzlB,EAAAylB,EAAAxlB,EAAAwlB,EAAAvlB,GAAA,GAIA,OADArD,KAAAkoC,aAAA,eAAsClF,EAAsBzZ,EAAA,IAC5DvpB,MAEA0oC,iBAAA,SAAAvqC,GACA,IA2BAglB,EA3BA+F,EAAA/qB,EAAA+qB,SAEA,GAAA/qB,EAAAk5B,OAAA,CACA,IAAAsR,EAAAzf,EAAA0f,iBAOA,IALA,IAAA1f,EAAA6P,qBACA4P,OAAA7jC,EACAokB,EAAA6P,oBAAA,QAGAj0B,IAAA6jC,EACA,OAAA3oC,KAAAknC,aAAAhe,GAGAyf,EAAA3P,mBAAA9P,EAAA8P,mBACA2P,EAAAzP,kBAAAhQ,EAAAgQ,kBACAyP,EAAAxP,iBAAAjQ,EAAAiQ,iBACAwP,EAAA1P,cAAA/P,EAAA+P,cACA0P,EAAAtP,iBAAAnQ,EAAAmQ,iBACAnQ,EAAA8P,oBAAA,EACA9P,EAAAgQ,mBAAA,EACAhQ,EAAAiQ,kBAAA,EACAjQ,EAAA+P,eAAA,EACA/P,EAAAmQ,kBAAA,EACAnQ,EAAAyf,EAkEA,OA7DA,IAAAzf,EAAA8P,0BAGAl0B,KAFAqe,EAAAnjB,KAAAspB,WAAAC,YAGApG,EAAAyjB,kBAAA1d,EAAAE,UACAjG,EAAA0d,aAAA,GAGA3X,EAAA8P,oBAAA,IAGA,IAAA9P,EAAAgQ,yBAGAp0B,KAFAqe,EAAAnjB,KAAAspB,WAAApV,UAGAiP,EAAAyjB,kBAAA1d,EAAA4Q,SACA3W,EAAA0d,aAAA,GAGA3X,EAAAgQ,mBAAA,IAGA,IAAAhQ,EAAAiQ,wBAGAr0B,KAFAqe,EAAAnjB,KAAAspB,WAAAnV,SAGAgP,EAAAsjB,gBAAAvd,EAAAmP,QACAlV,EAAA0d,aAAA,GAGA3X,EAAAiQ,kBAAA,GAGAjQ,EAAA+P,qBAGAn0B,KAFAqe,EAAAnjB,KAAAspB,WAAA0Q,MAGA7W,EAAAujB,kBAAAxd,EAAA6Q,KACA5W,EAAA0d,aAAA,GAGA3X,EAAA+P,eAAA,GAGA/P,EAAAkQ,+BAGAt0B,KAFAqe,EAAAnjB,KAAAspB,WAAAuf,gBAGA1lB,EAAAqjB,UAAAtd,EAAA0P,eACAzV,EAAA0d,aAAA,GAGA3X,EAAAkQ,yBAAA,GAGAlQ,EAAAmQ,mBACAnQ,EAAA+d,cAAA9oC,EAAA+qB,UACAlpB,KAAAo6B,OAAAlR,EAAAkR,OACAlR,EAAAmQ,kBAAA,GAGAr5B,MAEAknC,aAAA,SAAAhe,GAEA,OADAA,EAAA0f,kBAAA,IAAoCzF,GAAc+D,aAAAhe,GAClDlpB,KAAA8oC,mBAAA5f,EAAA0f,mBAEAE,mBAAA,SAAA5f,GACA,IAAA2Q,EAAA,IAAAt5B,aAAA,EAAA2oB,EAAAE,SAAA1pB,QAGA,GAFAM,KAAAkoC,aAAA,eAAsCpG,EAAejI,EAAA,GAAA+M,kBAAA1d,EAAAE,WAErDF,EAAA4Q,QAAAp6B,OAAA,GACA,IAAAo6B,EAAA,IAAAv5B,aAAA,EAAA2oB,EAAA4Q,QAAAp6B,QACAM,KAAAkoC,aAAA,aAAsCpG,EAAehI,EAAA,GAAA8M,kBAAA1d,EAAA4Q,UAGrD,GAAA5Q,EAAAmP,OAAA34B,OAAA,GACA,IAAA24B,EAAA,IAAA93B,aAAA,EAAA2oB,EAAAmP,OAAA34B,QACAM,KAAAkoC,aAAA,YAAqCpG,EAAezJ,EAAA,GAAAoO,gBAAAvd,EAAAmP,SAGpD,GAAAnP,EAAA6Q,IAAAr6B,OAAA,GACA,IAAAq6B,EAAA,IAAAx5B,aAAA,EAAA2oB,EAAA6Q,IAAAr6B,QACAM,KAAAkoC,aAAA,SAAkCpG,EAAe/H,EAAA,GAAA2M,kBAAAxd,EAAA6Q,MAGjD,GAAA7Q,EAAA+Q,KAAAv6B,OAAA,GACA,IAAAu6B,EAAA,IAAA15B,aAAA,EAAA2oB,EAAA+Q,KAAAv6B,QACAM,KAAAkoC,aAAA,UAAmCpG,EAAe7H,EAAA,GAAAyM,kBAAAxd,EAAA+Q,OAMlD,QAAAj9B,KAFAgD,KAAAo6B,OAAAlR,EAAAkR,OAEAlR,EAAAsP,aAAA,CAIA,IAHA,IAAAtxB,EAAA,GACAsxB,EAAAtP,EAAAsP,aAAAx7B,GAEAP,EAAA,EAAAC,EAAA87B,EAAA94B,OAA8CjD,EAAAC,EAAOD,IAAA,CACrD,IAAAiiC,EAAAlG,EAAA/7B,GACA0mB,EAAA,IAA4B6f,EAAsB,EAAAtE,EAAAl/B,KAAAE,OAAA,GAClDyjB,EAAAnmB,KAAA0hC,EAAA1hC,KACAkK,EAAArB,KAAAsd,EAAAyjB,kBAAAlI,EAAAl/B,OAGAQ,KAAA6nC,gBAAA7qC,GAAAkK,EAIA,GAAAgiB,EAAAyP,YAAAj5B,OAAA,GACA,IAAAi5B,EAAA,IAA4BqK,EAAsB,EAAA9Z,EAAAyP,YAAAj5B,OAAA,GAClDM,KAAAkoC,aAAA,YAAAvP,EAAAkO,kBAAA3d,EAAAyP,cAGA,GAAAzP,EAAAwP,YAAAh5B,OAAA,GACA,IAAAg5B,EAAA,IAA4BsK,EAAsB,EAAA9Z,EAAAwP,YAAAh5B,OAAA,GAClDM,KAAAkoC,aAAA,aAAAxP,EAAAmO,kBAAA3d,EAAAwP,cAYA,OARA,OAAAxP,EAAA4P,iBACA94B,KAAA84B,eAAA5P,EAAA4P,eAAAniB,SAGA,OAAAuS,EAAA2P,cACA74B,KAAA64B,YAAA3P,EAAA2P,YAAAliB,SAGA3W,MAEAw5B,mBAAA,WACA,IAAAhR,EAAA,IAAkB3T,EAClB,kBACA,OAAA7U,KAAA64B,cACA74B,KAAA64B,YAAA,IAA+BhkB,GAG/B,IAAA0U,EAAAvpB,KAAAspB,WAAAC,SACAwf,EAAA/oC,KAAA6nC,gBAAAte,SAEA,QAAAzkB,IAAAykB,GAGA,GAFAvpB,KAAA64B,YAAA9Q,uBAAAwB,GAEAwf,EACA,QAAAtsC,EAAA,EAAA+mB,EAAAulB,EAAArpC,OAA8DjD,EAAA+mB,EAAQ/mB,IAAA,CACtE,IAAAusC,EAAAD,EAAAtsC,GACA+rB,EAAAT,uBAAAihB,GACAhpC,KAAA64B,YAAA1Q,cAAAK,EAAAxgB,KACAhI,KAAA64B,YAAA1Q,cAAAK,EAAAvgB,WAIAjI,KAAA64B,YAAA3Q,aAGA+gB,MAAAjpC,KAAA64B,YAAA7wB,IAAA7E,IAAA8lC,MAAAjpC,KAAA64B,YAAA7wB,IAAA5E,IAAA6lC,MAAAjpC,KAAA64B,YAAA7wB,IAAA3E,KACAsR,QAAAC,MAAA,oIAAA5U,OA1BA,GA8BAy5B,sBAAA,WACA,IAAAjR,EAAA,IAAkB3T,EAClBq0B,EAAA,IAA8Br0B,EAC9B8M,EAAA,IAAqB5N,EACrB,kBACA,OAAA/T,KAAA84B,iBACA94B,KAAA84B,eAAA,IAAkC/jB,GAGlC,IAAAwU,EAAAvpB,KAAAspB,WAAAC,SACAwf,EAAA/oC,KAAA6nC,gBAAAte,SAEA,GAAAA,EAAA,CAEA,IAAAvU,EAAAhV,KAAA84B,eAAA9jB,OAGA,GAFAwT,EAAAT,uBAAAwB,GAEAwf,EACA,QAAAtsC,EAAA,EAAA+mB,EAAAulB,EAAArpC,OAA8DjD,EAAA+mB,EAAQ/mB,IAAA,CACtE,IAAAusC,EAAAD,EAAAtsC,GACAysC,EAAAnhB,uBAAAihB,GACAxgB,EAAAL,cAAA+gB,EAAAlhC,KACAwgB,EAAAL,cAAA+gB,EAAAjhC,KAIAugB,EAAAE,UAAA1T,GAGA,IAAAuW,EAAA,EAEA,IAAA9uB,EAAA,EAAA+mB,EAAA+F,EAAAhF,MAA4C9nB,EAAA+mB,EAAQ/mB,IACpDklB,EAAAuB,oBAAAqG,EAAA9sB,GACA8uB,EAAA5sB,KAAAsJ,IAAAsjB,EAAAvW,EAAAiN,kBAAAN,IAIA,GAAAonB,EACA,IAAAtsC,EAAA,EAAA+mB,EAAAulB,EAAArpC,OAA8DjD,EAAA+mB,EAAQ/mB,IAGtE,IAFA,IAEAyE,EAAA,EAAAq4B,GAFAyP,EAAAD,EAAAtsC,IAEA8nB,MAAsDrjB,EAAAq4B,EAAQr4B,IAC9DygB,EAAAuB,oBAAA8lB,EAAA9nC,GACAqqB,EAAA5sB,KAAAsJ,IAAAsjB,EAAAvW,EAAAiN,kBAAAN,IAKA3hB,KAAA84B,eAAA7jB,OAAAtW,KAAAC,KAAA2sB,GAEA0d,MAAAjpC,KAAA84B,eAAA7jB,SACAN,QAAAC,MAAA,+HAAA5U,QAnDA,GAwDAu6B,mBAAA,aAEAO,qBAAA,WACA,IAAAj0B,EAAA7G,KAAA6G,MACAyiB,EAAAtpB,KAAAspB,WAEA,GAAAA,EAAAC,SAAA,CACA,IAAAsQ,EAAAvQ,EAAAC,SAAAriB,MAEA,QAAApC,IAAAwkB,EAAApV,OACAlU,KAAAkoC,aAAA,aAAwCpG,EAAe,IAAAvhC,aAAAs5B,EAAAn6B,QAAA,SAKvD,IAFA,IAAAwH,EAAAoiB,EAAApV,OAAAhN,MAEAzK,EAAA,EAAA+mB,EAAAtc,EAAAxH,OAA0CjD,EAAA+mB,EAAQ/mB,IAClDyK,EAAAzK,GAAA,EAIA,IACAk+B,EAAAC,EAAAC,EADAf,EAAAxQ,EAAApV,OAAAhN,MAEAiiC,EAAA,IAAmBp1B,EACnBq1B,EAAA,IAAmBr1B,EACnBs1B,EAAA,IAAmBt1B,EACnBymB,EAAA,IAAmBzmB,EACnB0mB,EAAA,IAAmB1mB,EAEnB,GAAAlN,EACA,KAAA+yB,EAAA/yB,EAAAK,MAEA,IAAAzK,EAAA,EAAA+mB,EAAA3c,EAAA0d,MAAyC9nB,EAAA+mB,EAAQ/mB,GAAA,EACjDk+B,EAAA,EAAAf,EAAAn9B,EAAA,GACAm+B,EAAA,EAAAhB,EAAAn9B,EAAA,GACAo+B,EAAA,EAAAjB,EAAAn9B,EAAA,GACA0sC,EAAArwB,UAAA+gB,EAAAc,GACAyO,EAAAtwB,UAAA+gB,EAAAe,GACAyO,EAAAvwB,UAAA+gB,EAAAgB,GACAL,EAAA7b,WAAA0qB,EAAAD,GACA3O,EAAA9b,WAAAwqB,EAAAC,GACA5O,EAAAtZ,MAAAuZ,GACAX,EAAAa,IAAAH,EAAAr3B,EACA22B,EAAAa,EAAA,IAAAH,EAAAp3B,EACA02B,EAAAa,EAAA,IAAAH,EAAAn3B,EACAy2B,EAAAc,IAAAJ,EAAAr3B,EACA22B,EAAAc,EAAA,IAAAJ,EAAAp3B,EACA02B,EAAAc,EAAA,IAAAJ,EAAAn3B,EACAy2B,EAAAe,IAAAL,EAAAr3B,EACA22B,EAAAe,EAAA,IAAAL,EAAAp3B,EACA02B,EAAAe,EAAA,IAAAL,EAAAn3B,OAIA,IAAA5G,EAAA,EAAA+mB,EAAAqW,EAAAn6B,OAA8CjD,EAAA+mB,EAAQ/mB,GAAA,EACtD0sC,EAAArwB,UAAA+gB,EAAAp9B,GACA2sC,EAAAtwB,UAAA+gB,EAAAp9B,EAAA,GACA4sC,EAAAvwB,UAAA+gB,EAAAp9B,EAAA,GACA+9B,EAAA7b,WAAA0qB,EAAAD,GACA3O,EAAA9b,WAAAwqB,EAAAC,GACA5O,EAAAtZ,MAAAuZ,GACAX,EAAAr9B,GAAA+9B,EAAAr3B,EACA22B,EAAAr9B,EAAA,GAAA+9B,EAAAp3B,EACA02B,EAAAr9B,EAAA,GAAA+9B,EAAAn3B,EACAy2B,EAAAr9B,EAAA,GAAA+9B,EAAAr3B,EACA22B,EAAAr9B,EAAA,GAAA+9B,EAAAp3B,EACA02B,EAAAr9B,EAAA,GAAA+9B,EAAAn3B,EACAy2B,EAAAr9B,EAAA,GAAA+9B,EAAAr3B,EACA22B,EAAAr9B,EAAA,GAAA+9B,EAAAp3B,EACA02B,EAAAr9B,EAAA,GAAA+9B,EAAAn3B,EAIArD,KAAAspC,mBACAhgB,EAAApV,OAAA2sB,aAAA,IAGAnF,MAAA,SAAAxS,EAAAnQ,GACA,GAAAmQ,KAAAG,iBAAA,MAKAvkB,IAAAiU,IACAA,EAAA,EACApE,QAAA0B,KAAA,2JAGA,IAAAiT,EAAAtpB,KAAAspB,WAEA,QAAAtrB,KAAAsrB,EACA,QAAAxkB,IAAAokB,EAAAI,WAAAtrB,GAQA,IAPA,IACAurC,EADAjgB,EAAAtrB,GACAkJ,MACAsiC,EAAAtgB,EAAAI,WAAAtrB,GACAyrC,EAAAD,EAAAtiC,MACAwiC,EAAAF,EAAAzH,SAAAhpB,EACArZ,EAAAf,KAAAqJ,IAAAyhC,EAAA/pC,OAAA6pC,EAAA7pC,OAAAgqC,GAEAjtC,EAAA,EAAAyE,EAAAwoC,EAA0CjtC,EAAAiD,EAAYjD,IAAAyE,IACtDqoC,EAAAroC,GAAAuoC,EAAAhtC,GAIA,OAAAuD,KAzBA2U,QAAAC,MAAA,kFAAAsU,IA2BAogB,iBAAA,WACA,IAAA3nB,EAAA,IAAqB5N,EACrB,kBAGA,IAFA,IAAA+lB,EAAA95B,KAAAspB,WAAApV,OAEAzX,EAAA,EAAA+mB,EAAAsW,EAAAvV,MAAyC9nB,EAAA+mB,EAAQ/mB,IACjDklB,EAAAxe,EAAA22B,EAAA1W,KAAA3mB,GACAklB,EAAAve,EAAA02B,EAAAzW,KAAA5mB,GACAklB,EAAAte,EAAAy2B,EAAAxW,KAAA7mB,GACAklB,EAAAlF,YACAqd,EAAAtV,OAAA/nB,EAAAklB,EAAAxe,EAAAwe,EAAAve,EAAAue,EAAAte,IAVA,GAcAsmC,aAAA,WACA,SAAAC,EAAAzmB,EAAAyW,GAOA,IANA,IAAA1yB,EAAAic,EAAAjc,MACA66B,EAAA5e,EAAA4e,SACA8H,EAAA,IAAA3iC,EAAA0P,YAAAgjB,EAAAl6B,OAAAqiC,GACAl7B,EAAA,EACA0/B,EAAA,EAEA9pC,EAAA,EAAAC,EAAAk9B,EAAAl6B,OAAyCjD,EAAAC,EAAOD,IAAA,CAChDoK,EAAA+yB,EAAAn9B,GAAAslC,EAEA,QAAA7gC,EAAA,EAAuBA,EAAA6gC,EAAc7gC,IACrC2oC,EAAAtD,KAAAr/B,EAAAL,KAIA,WAAiBi7B,EAAe+H,EAAA9H,GAIhC,UAAA/hC,KAAA6G,MAEA,OADA8N,QAAA0B,KAAA,yEACArW,KAGA,IAAA8pC,EAAA,IAAAlC,EACAhO,EAAA55B,KAAA6G,MAAAK,MACAoiB,EAAAtpB,KAAAspB,WAEA,QAAAtsB,KAAAssB,EAAA,CACA,IACAygB,EAAAH,EADAtgB,EAAAtsB,GACA48B,GACAkQ,EAAA5B,aAAAlrC,EAAA+sC,GAIA,IAAAlC,EAAA7nC,KAAA6nC,gBAEA,IAAA7qC,KAAA6qC,EAAA,CAIA,IAHA,IAAAmC,EAAA,GACAhB,EAAAnB,EAAA7qC,GAEAP,EAAA,EAAA+mB,EAAAwlB,EAAAtpC,OAAiDjD,EAAA+mB,EAAQ/mB,IAAA,CAEzDstC,EAAAH,EADAZ,EAAAvsC,GACAm9B,GACAoQ,EAAAnkC,KAAAkkC,GAGAD,EAAAjC,gBAAA7qC,GAAAgtC,EAMA,IAFA,IAAA5P,EAAAp6B,KAAAo6B,OAEA19B,GAAAD,EAAA,EAAA29B,EAAA16B,QAAsCjD,EAAAC,EAAOD,IAAA,CAC7C,IAAA49B,EAAAD,EAAA39B,GACAqtC,EAAAxB,SAAAjO,EAAAC,MAAAD,EAAA9V,MAAA8V,EAAAjmB,eAGA,OAAA01B,GAEA7wB,OAAA,WACA,IAAAzZ,EAAA,CACAq3B,SAAA,CACAC,QAAA,IACAzwB,KAAA,iBACA0wB,UAAA,0BASA,GALAv3B,EAAAmzB,KAAA3yB,KAAA2yB,KACAnzB,EAAA6G,KAAArG,KAAAqG,KACA,KAAArG,KAAAhD,OAAAwC,EAAAxC,KAAAgD,KAAAhD,MACAG,OAAA8sC,KAAAjqC,KAAA0zB,UAAAh0B,OAAA,IAAAF,EAAAk0B,SAAA1zB,KAAA0zB,eAEA5uB,IAAA9E,KAAAy3B,WAAA,CACA,IAAAA,EAAAz3B,KAAAy3B,WAEA,QAAAz5B,KAAAy5B,OACA3yB,IAAA2yB,EAAAz5B,KAAAwB,EAAAxB,GAAAy5B,EAAAz5B,IAGA,OAAAwB,EAGAA,OAAA,CACA8pB,WAAA,IAEA,IAAAziB,EAAA7G,KAAA6G,MAEA,OAAAA,IACArH,OAAAqH,MAAA,CACAR,KAAAQ,EAAAK,MAAA0P,YAAA5Z,KACAkK,MAAAjC,MAAA5G,UAAA8I,MAAAvK,KAAAiK,EAAAK,SAIA,IAAAoiB,EAAAtpB,KAAAspB,WAEA,QAAAtrB,KAAAsrB,EAAA,CACA,IACA4gB,GADA/mB,EAAAmG,EAAAtrB,IACAib,SACA,KAAAkK,EAAAnmB,OAAAktC,EAAAltC,KAAAmmB,EAAAnmB,MACAwC,OAAA8pB,WAAAtrB,GAAAksC,EAGA,IAAArC,EAAA,GACAsC,GAAA,EAEA,QAAAnsC,KAAAgC,KAAA6nC,gBAAA,CAIA,IAHA,IAAAuC,EAAApqC,KAAA6nC,gBAAA7pC,GACAkJ,EAAA,GAEAzK,EAAA,EAAA+mB,EAAA4mB,EAAA1qC,OAAiDjD,EAAA+mB,EAAQ/mB,IAAA,CACzD,IAAA0mB,EACA+mB,GADA/mB,EAAAinB,EAAA3tC,IACAwc,SACA,KAAAkK,EAAAnmB,OAAAktC,EAAAltC,KAAAmmB,EAAAnmB,MACAkK,EAAArB,KAAAqkC,GAGAhjC,EAAAxH,OAAA,IACAmoC,EAAA7pC,GAAAkJ,EACAijC,GAAA,GAIAA,IAAA3qC,OAAAqoC,mBACA,IAAAzN,EAAAp6B,KAAAo6B,OAEAA,EAAA16B,OAAA,IACAF,OAAA46B,OAAAjD,KAAAc,MAAAd,KAAAC,UAAAgD,KAGA,IAAAtB,EAAA94B,KAAA84B,eASA,OAPA,OAAAA,IACAt5B,OAAAs5B,eAAA,CACA9jB,OAAA8jB,EAAA9jB,OAAAgE,UACA/D,OAAA6jB,EAAA7jB,SAIAzV,GAEAmX,MAAA,WAeA,WAAAixB,GAAAlyB,KAAA1V,OAEA0V,KAAA,SAAA6N,GACA,IAAAvmB,EAAAP,EAAAC,EAEAsD,KAAA6G,MAAA,KACA7G,KAAAspB,WAAA,GACAtpB,KAAA6nC,gBAAA,GACA7nC,KAAAo6B,OAAA,GACAp6B,KAAA64B,YAAA,KACA74B,KAAA84B,eAAA,KAEA94B,KAAAhD,KAAAumB,EAAAvmB,KAEA,IAAA6J,EAAA0c,EAAA1c,MAEA,OAAAA,GACA7G,KAAAgoC,SAAAnhC,EAAA8P,SAIA,IAAA2S,EAAA/F,EAAA+F,WAEA,IAAAtsB,KAAAssB,EAAA,CACA,IAAAnG,EAAAmG,EAAAtsB,GACAgD,KAAAkoC,aAAAlrC,EAAAmmB,EAAAxM,SAIA,IAAAkxB,EAAAtkB,EAAAskB,gBAEA,IAAA7qC,KAAA6qC,EAAA,CACA,IAAA3gC,EAAA,GACA8hC,EAAAnB,EAAA7qC,GAEA,IAAAP,EAAA,EAAAC,EAAAssC,EAAAtpC,OAA4CjD,EAAAC,EAAOD,IACnDyK,EAAArB,KAAAmjC,EAAAvsC,GAAAka,SAGA3W,KAAA6nC,gBAAA7qC,GAAAkK,EAIA,IAAAkzB,EAAA7W,EAAA6W,OAEA,IAAA39B,EAAA,EAAAC,EAAA09B,EAAA16B,OAAkCjD,EAAAC,EAAOD,IAAA,CACzC,IAAA49B,EAAAD,EAAA39B,GACAuD,KAAAsoC,SAAAjO,EAAAC,MAAAD,EAAA9V,MAAA8V,EAAAjmB,eAIA,IAAAykB,EAAAtV,EAAAsV,YAEA,OAAAA,IACA74B,KAAA64B,cAAAliB,SAIA,IAAAmiB,EAAAvV,EAAAuV,eAWA,OATA,OAAAA,IACA94B,KAAA84B,iBAAAniB,SAIA3W,KAAA8nC,UAAAxN,MAAA/W,EAAAukB,UAAAxN,MACAt6B,KAAA8nC,UAAAvjB,MAAAhB,EAAAukB,UAAAvjB,MAEAvkB,KAAA0zB,SAAAnQ,EAAAmQ,SACA1zB,MAEA8+B,QAAA,WACA9+B,KAAA+G,cAAA,CACAV,KAAA,eE9yBA,IAAIgkC,EAAa,SAAAC,EAAA3S,EAAA4S,EAAAC,GACf7I,EAAqB/kC,KAAAoD,KAAA23B,GACvB,IAAA5O,EAAA/oB,KAEAyqC,EAAA,IAAAlqC,aAAA,IACAmqC,EAAA,IAAAnqC,aAAA,IACAoqC,EAAA,IAAApqC,aAAA,IA6CA,SAAAiI,EAAAyL,EAAAd,EAAAxV,GACA,OAAAsW,GAAAd,EAAAc,GAAAtW,EAGA,SAAAitC,EAAAr3B,EAAAwF,EAAA8xB,EAAA1nC,EAAAC,EAAAC,EAAAynC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,GAAAL,EAAAC,IAAAC,EAAAD,GACAK,EAAApiB,EAAAqiB,aACAX,EAAA1xB,EAAA,GAAA5V,EAAA+nC,EAAAniB,EAAAlR,MACA4yB,EAAA1xB,EAAA,GAAA3V,EACAqnC,EAAA1xB,EAAA,GAAA1V,EACAqnC,EAAA3xB,EAAA,GAAAvQ,EAAA2iC,EAAA53B,EAAA,GAAA43B,EAAA53B,EAAA,GAAA23B,GACAR,EAAA3xB,EAAA,GAAAvQ,EAAA2iC,EAAA53B,EAAA,GAAA43B,EAAA53B,EAAA,GAAA23B,GACAR,EAAA3xB,EAAA,GAAAvQ,EAAA2iC,EAAA53B,EAAA,GAAA43B,EAAA53B,EAAA,GAAA23B,GACAP,EAAA5xB,EAAA,GAAAvQ,EAAAugB,EAAAsiB,QAAA,EAAAL,EAAA,GAAAjiB,EAAAsiB,QAAA,EAAAJ,EAAA,GAAAC,GACAP,EAAA5xB,EAAA,GAAAvQ,EAAAugB,EAAAsiB,QAAA,EAAAL,EAAA,GAAAjiB,EAAAsiB,QAAA,EAAAJ,EAAA,GAAAC,GACAP,EAAA5xB,EAAA,GAAAvQ,EAAAugB,EAAAsiB,QAAA,EAAAL,EAAA,GAAAjiB,EAAAsiB,QAAA,EAAAJ,EAAA,GAAAC,GAGA,SAAAI,EAAA/3B,EAAAwF,EAAA8xB,EAAA1nC,EAAAC,EAAAC,EAAAynC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,GAAAL,EAAAC,IAAAC,EAAAD,GACAK,EAAApiB,EAAAqiB,aACAX,EAAA1xB,EAAA,GAAA5V,EACAsnC,EAAA1xB,EAAA,GAAA3V,EAAA8nC,EAAAniB,EAAAlR,MACA4yB,EAAA1xB,EAAA,GAAA1V,EACA,IAAAkoC,EAAAh4B,EAAA,EAAAwV,EAAAyiB,GACAd,EAAA3xB,EAAA,GAAAvQ,EAAA2iC,EAAA53B,EAAA,GAAA43B,EAAAI,EAAA,GAAAL,GACAR,EAAA3xB,EAAA,GAAAvQ,EAAA2iC,EAAA53B,EAAA,GAAA43B,EAAAI,EAAA,GAAAL,GACAR,EAAA3xB,EAAA,GAAAvQ,EAAA2iC,EAAA53B,EAAA,GAAA43B,EAAAI,EAAA,GAAAL,GACAP,EAAA5xB,EAAA,GAAAvQ,EAAAugB,EAAAsiB,QAAA,EAAAL,EAAA,GAAAjiB,EAAAsiB,QAAA,EAAAJ,EAAA,GAAAC,GACAP,EAAA5xB,EAAA,GAAAvQ,EAAAugB,EAAAsiB,QAAA,EAAAL,EAAA,GAAAjiB,EAAAsiB,QAAA,EAAAJ,EAAA,GAAAC,GACAP,EAAA5xB,EAAA,GAAAvQ,EAAAugB,EAAAsiB,QAAA,EAAAL,EAAA,GAAAjiB,EAAAsiB,QAAA,EAAAJ,EAAA,GAAAC,GAGA,SAAAO,EAAAl4B,EAAAwF,EAAA8xB,EAAA1nC,EAAAC,EAAAC,EAAAynC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,GAAAL,EAAAC,IAAAC,EAAAD,GACAK,EAAApiB,EAAAqiB,aACAX,EAAA1xB,EAAA,GAAA5V,EACAsnC,EAAA1xB,EAAA,GAAA3V,EACAqnC,EAAA1xB,EAAA,GAAA1V,EAAA6nC,EAAAniB,EAAAlR,MACA,IAAA0zB,EAAAh4B,EAAA,EAAAwV,EAAA2iB,GACAhB,EAAA3xB,EAAA,GAAAvQ,EAAA2iC,EAAA53B,EAAA,GAAA43B,EAAAI,EAAA,GAAAL,GACAR,EAAA3xB,EAAA,GAAAvQ,EAAA2iC,EAAA53B,EAAA,GAAA43B,EAAAI,EAAA,GAAAL,GACAR,EAAA3xB,EAAA,GAAAvQ,EAAA2iC,EAAA53B,EAAA,GAAA43B,EAAAI,EAAA,GAAAL,GACAP,EAAA5xB,EAAA,GAAAvQ,EAAAugB,EAAAsiB,QAAA,EAAAL,EAAA,GAAAjiB,EAAAsiB,QAAA,EAAAJ,EAAA,GAAAC,GACAP,EAAA5xB,EAAA,GAAAvQ,EAAAugB,EAAAsiB,QAAA,EAAAL,EAAA,GAAAjiB,EAAAsiB,QAAA,EAAAJ,EAAA,GAAAC,GACAP,EAAA5xB,EAAA,GAAAvQ,EAAAugB,EAAAsiB,QAAA,EAAAL,EAAA,GAAAjiB,EAAAsiB,QAAA,EAAAJ,EAAA,GAAAC,GAGA,SAAAS,EAAAp4B,GACA,IAAAq4B,EAAA,EAAAr4B,EAEA,IAAAwV,EAAAqiB,aAAAQ,KACA7iB,EAAAqiB,aAAAQ,EAAA,GAAA7iB,EAAA8iB,MAAAt4B,EAAA,GAAAwV,EAAA8iB,MAAAt4B,EAAA,GACAwV,EAAAqiB,aAAAQ,EAAA,GAAA7iB,EAAA8iB,MAAAt4B,EAAAwV,EAAAyiB,IAAAziB,EAAA8iB,MAAAt4B,EAAAwV,EAAAyiB,IACAziB,EAAAqiB,aAAAQ,EAAA,GAAA7iB,EAAA8iB,MAAAt4B,EAAAwV,EAAA2iB,IAAA3iB,EAAA8iB,MAAAt4B,EAAAwV,EAAA2iB,KAMA,SAAAI,EAAAC,EAAAC,EAAAC,EAAA14B,EAAAs3B,EAAAqB,GAEA,IAAA7X,EAAA9gB,EAAA,EACA8L,EAAA9L,EAAAwV,EAAAyiB,GACAlsB,EAAA/L,EAAAwV,EAAA2iB,GACAS,EAAA9X,EAAAtL,EAAAyiB,GACAY,EAAA/X,EAAAtL,EAAA2iB,GACAW,EAAA94B,EAAAwV,EAAAyiB,GAAAziB,EAAA2iB,GACAY,EAAAjY,EAAAtL,EAAAyiB,GAAAziB,EAAA2iB,GACAa,EAAA,EACAC,EAAAzjB,EAAA8iB,MAAAt4B,GACAk5B,EAAA1jB,EAAA8iB,MAAAxX,GACAqY,EAAA3jB,EAAA8iB,MAAAxsB,GACAstB,EAAA5jB,EAAA8iB,MAAAM,GACAS,EAAA7jB,EAAA8iB,MAAAvsB,GACAutB,EAAA9jB,EAAA8iB,MAAAO,GACAU,EAAA/jB,EAAA8iB,MAAAQ,GACAU,EAAAhkB,EAAA8iB,MAAAS,GACAE,EAAA3B,IAAA0B,GAAA,GACAE,EAAA5B,IAAA0B,GAAA,GACAG,EAAA7B,IAAA0B,GAAA,GACAI,EAAA9B,IAAA0B,GAAA,GACAK,EAAA/B,IAAA0B,GAAA,IACAM,EAAAhC,IAAA0B,GAAA,IACAO,EAAAjC,IAAA0B,GAAA,KACAQ,EAAAlC,IAAA0B,GAAA,IAEA,IAAAS,EAAAC,GAAAV,GACA,OAAAS,EAAA,SACA,IAAAjwC,EAAAgsB,EAAAlR,MACAq1B,EAAAnB,EAAAhvC,EACAowC,EAAAnB,EAAAjvC,EACAqwC,EAAAnB,EAAAlvC,EAEA,EAAAiwC,IACArB,EAAAp4B,GACAo4B,EAAAtX,GACAuW,EAAA,EAAAr3B,EAAA,EAAAs3B,EAAAkB,EAAAC,EAAAC,EAAAO,EAAAC,EAAAl5B,EAAA8gB,IAGA,EAAA2Y,IACArB,EAAAtX,GACAsX,EAAAQ,GACAb,EAAA,EAAAjX,EAAA,EAAAwW,EAAAqC,EAAAlB,EAAAC,EAAAQ,EAAAE,EAAAtY,EAAA8X,IAGA,EAAAa,IACArB,EAAAtsB,GACAssB,EAAAQ,GACAvB,EAAA,EAAAvrB,EAAA,EAAAwrB,EAAAkB,EAAAoB,EAAAlB,EAAAS,EAAAC,EAAAttB,EAAA8sB,IAGA,EAAAa,IACArB,EAAAp4B,GACAo4B,EAAAtsB,GACAisB,EAAA,EAAA/3B,EAAA,EAAAs3B,EAAAkB,EAAAC,EAAAC,EAAAO,EAAAE,EAAAn5B,EAAA8L,IAIA,GAAA2tB,IACArB,EAAArsB,GACAqsB,EAAAS,GACAxB,EAAA,EAAAtrB,EAAA,GAAAurB,EAAAkB,EAAAC,EAAAoB,EAAAR,EAAAC,EAAAvtB,EAAA8sB,IAGA,GAAAY,IACArB,EAAAS,GACAT,EAAAW,GACAhB,EAAA,EAAAc,EAAA,GAAAvB,EAAAqC,EAAAlB,EAAAoB,EAAAP,EAAAE,EAAAX,EAAAE,IAGA,GAAAU,IACArB,EAAAU,GACAV,EAAAW,GACA1B,EAAA,EAAAyB,EAAA,GAAAxB,EAAAkB,EAAAoB,EAAAC,EAAAN,EAAAC,EAAAV,EAAAC,IAGA,IAAAU,IACArB,EAAArsB,GACAqsB,EAAAU,GACAf,EAAA,EAAAhsB,EAAA,GAAAurB,EAAAkB,EAAAC,EAAAoB,EAAAR,EAAAE,EAAAxtB,EAAA+sB,IAIA,IAAAW,IACArB,EAAAp4B,GACAo4B,EAAArsB,GACAmsB,EAAA,EAAAl4B,EAAA,GAAAs3B,EAAAkB,EAAAC,EAAAC,EAAAO,EAAAI,EAAAr5B,EAAA+L,IAGA,IAAA0tB,IACArB,EAAAtX,GACAsX,EAAAS,GACAX,EAAA,EAAApX,EAAA,GAAAwW,EAAAqC,EAAAlB,EAAAC,EAAAQ,EAAAI,EAAAxY,EAAA+X,IAGA,KAAAY,IACArB,EAAAQ,GACAR,EAAAW,GACAb,EAAA,EAAAU,EAAA,GAAAtB,EAAAqC,EAAAC,EAAAlB,EAAAU,EAAAI,EAAAZ,EAAAG,IAGA,KAAAU,IACArB,EAAAtsB,GACAssB,EAAAU,GACAZ,EAAA,EAAApsB,EAAA,GAAAwrB,EAAAkB,EAAAoB,EAAAlB,EAAAS,EAAAI,EAAAztB,EAAAgtB,IAGAE,IAAA,EAQA,IANA,IAAAc,EACAC,EACAC,EACAC,EAAA,EACA/wC,EAAA,GAEA,GAAAgxC,GAAAlB,EAAA9vC,IAEA6wC,GADAD,EAAAd,EAAA9vC,GACA,EACA8wC,EAAAF,EAAA,EACAK,EAAAjD,EAAAC,EAAAC,EAAA,EAAA8C,GAAAJ,GAAA,EAAAI,GAAAH,GAAA,EAAAG,GAAAF,GAAArB,GACAzvC,GAAA,EACA+wC,IAGA,OAAAA,EAMA,SAAAE,EAAAC,EAAAC,EAAAvV,EAAAgV,EAAAC,EAAAC,EAAArB,GACA,IAAApvC,EAAA,EAAAisB,EAAAxE,MAYA,GAVAwE,EAAA8kB,cAAA/wC,EAAA,GAAA6wC,EAAAN,GACAtkB,EAAA8kB,cAAA/wC,EAAA,GAAA6wC,EAAAN,EAAA,GACAtkB,EAAA8kB,cAAA/wC,EAAA,GAAA6wC,EAAAN,EAAA,GACAtkB,EAAA8kB,cAAA/wC,EAAA,GAAA6wC,EAAAL,GACAvkB,EAAA8kB,cAAA/wC,EAAA,GAAA6wC,EAAAL,EAAA,GACAvkB,EAAA8kB,cAAA/wC,EAAA,GAAA6wC,EAAAL,EAAA,GACAvkB,EAAA8kB,cAAA/wC,EAAA,GAAA6wC,EAAAJ,GACAxkB,EAAA8kB,cAAA/wC,EAAA,GAAA6wC,EAAAJ,EAAA,GACAxkB,EAAA8kB,cAAA/wC,EAAA,GAAA6wC,EAAAJ,EAAA,IAEA,IAAAxkB,EAAA4O,SAAA0H,YAAA,CACA,IAAAyO,GAAAF,EAAAP,EAAA,GAAAO,EAAAN,EAAA,GAAAM,EAAAL,EAAA,MACAQ,GAAAH,EAAAP,EAAA,GAAAO,EAAAN,EAAA,GAAAM,EAAAL,EAAA,MACAS,GAAAJ,EAAAP,EAAA,GAAAO,EAAAN,EAAA,GAAAM,EAAAL,EAAA,MACAxkB,EAAAklB,YAAAnxC,EAAA,GAAAgxC,EACA/kB,EAAAklB,YAAAnxC,EAAA,GAAAixC,EACAhlB,EAAAklB,YAAAnxC,EAAA,GAAAkxC,EACAjlB,EAAAklB,YAAAnxC,EAAA,GAAAgxC,EACA/kB,EAAAklB,YAAAnxC,EAAA,GAAAixC,EACAhlB,EAAAklB,YAAAnxC,EAAA,GAAAkxC,EACAjlB,EAAAklB,YAAAnxC,EAAA,GAAAgxC,EACA/kB,EAAAklB,YAAAnxC,EAAA,GAAAixC,EACAhlB,EAAAklB,YAAAnxC,EAAA,GAAAkxC,OAEAjlB,EAAAklB,YAAAnxC,EAAA,GAAA8wC,EAAAP,EAAA,GACAtkB,EAAAklB,YAAAnxC,EAAA,GAAA8wC,EAAAP,EAAA,GACAtkB,EAAAklB,YAAAnxC,EAAA,GAAA8wC,EAAAP,EAAA,GACAtkB,EAAAklB,YAAAnxC,EAAA,GAAA8wC,EAAAN,EAAA,GACAvkB,EAAAklB,YAAAnxC,EAAA,GAAA8wC,EAAAN,EAAA,GACAvkB,EAAAklB,YAAAnxC,EAAA,GAAA8wC,EAAAN,EAAA,GACAvkB,EAAAklB,YAAAnxC,EAAA,GAAA8wC,EAAAL,EAAA,GACAxkB,EAAAklB,YAAAnxC,EAAA,GAAA8wC,EAAAL,EAAA,GACAxkB,EAAAklB,YAAAnxC,EAAA,GAAA8wC,EAAAL,EAAA,GAIA,GAAAxkB,EAAAwhB,UAAA,CACA,IAAAxtC,EAAA,EAAAgsB,EAAAxE,MACAwE,EAAAmlB,QAAAnxC,EAAA,GAAA4wC,EAAAN,EAAA,GACAtkB,EAAAmlB,QAAAnxC,EAAA,GAAA4wC,EAAAN,EAAA,GACAtkB,EAAAmlB,QAAAnxC,EAAA,GAAA4wC,EAAAL,EAAA,GACAvkB,EAAAmlB,QAAAnxC,EAAA,GAAA4wC,EAAAL,EAAA,GACAvkB,EAAAmlB,QAAAnxC,EAAA,GAAA4wC,EAAAJ,EAAA,GACAxkB,EAAAmlB,QAAAnxC,EAAA,GAAA4wC,EAAAJ,EAAA,GAIAxkB,EAAAyhB,eACAzhB,EAAAolB,WAAArxC,EAAA,GAAAu7B,EAAAgV,EAAA,GACAtkB,EAAAolB,WAAArxC,EAAA,GAAAu7B,EAAAgV,EAAA,GACAtkB,EAAAolB,WAAArxC,EAAA,GAAAu7B,EAAAgV,EAAA,GACAtkB,EAAAolB,WAAArxC,EAAA,GAAAu7B,EAAAiV,EAAA,GACAvkB,EAAAolB,WAAArxC,EAAA,GAAAu7B,EAAAiV,EAAA,GACAvkB,EAAAolB,WAAArxC,EAAA,GAAAu7B,EAAAiV,EAAA,GACAvkB,EAAAolB,WAAArxC,EAAA,GAAAu7B,EAAAkV,EAAA,GACAxkB,EAAAolB,WAAArxC,EAAA,GAAAu7B,EAAAkV,EAAA,GACAxkB,EAAAolB,WAAArxC,EAAA,GAAAu7B,EAAAkV,EAAA,IAGAxkB,EAAAxE,OAAA,EAEAwE,EAAAxE,OAAAwE,EAAAqlB,SAAA,IACArlB,EAAAslB,cAAA,EACAtlB,EAAAulB,YAAA,EAEAvlB,EAAAwhB,YACAxhB,EAAAwlB,QAAA,GAGAxlB,EAAAyhB,eACAzhB,EAAAylB,WAAA,GAGAtC,EAAAnjB,IAmTA,SAAA0lB,EAAAx6B,EAAAd,EAAAzT,GACA,IAAAgvC,EAAA,IAAAnuC,aAAA0T,EAAAvU,UAGA,OAFAgvC,EAAAt7B,IAAAa,EAAA,GACAy6B,EAAAt7B,IAAAD,EAAAhM,MAAA,EAAAzH,GAAAuU,EAAAvU,QACAgvC,EA9mBA1uC,KAAAuqC,eAAAzlC,IAAAylC,KACAvqC,KAAAwqC,kBAAA1lC,IAAA0lC,KAIAxqC,KAAA2uC,KAAA,SAAArE,GACAtqC,KAAAsqC,aAEAtqC,KAAA4uC,UAAA,GAEA5uC,KAAAyW,KAAA6zB,EACAtqC,KAAA6uC,MAAA7uC,KAAAyW,KAAAzW,KAAAyW,KACAzW,KAAA8uC,MAAA9uC,KAAA6uC,MAAA7uC,KAAAyW,KACAzW,KAAA+uC,SAAA/uC,KAAAyW,KAAA,EAEAzW,KAAA6X,MAAA,EAAA7X,KAAAyW,KACAzW,KAAAwrC,GAAAxrC,KAAAyW,KACAzW,KAAA0rC,GAAA1rC,KAAA6uC,MACA7uC,KAAA6rC,MAAA,IAAAtrC,aAAAP,KAAA8uC,OACA9uC,KAAAorC,aAAA,IAAA7qC,aAAA,EAAAP,KAAA8uC,OACA9uC,KAAAqrC,QAAA,IAAA9qC,aAAA,EAAAP,KAAA8uC,OAEA9uC,KAAAouC,SAAA,KAEApuC,KAAAukB,MAAA,EACAvkB,KAAAquC,cAAA,EACAruC,KAAAsuC,YAAA,EACAtuC,KAAAwuC,WAAA,EACAxuC,KAAAuuC,QAAA,EACAvuC,KAAA6tC,cAAA,IAAAttC,aAAA,EAAAP,KAAAouC,UACApuC,KAAAiuC,YAAA,IAAA1tC,aAAA,EAAAP,KAAAouC,UAEApuC,KAAAuqC,YACAvqC,KAAAkuC,QAAA,IAAA3tC,aAAA,EAAAP,KAAAouC,WAGApuC,KAAAwqC,eACAxqC,KAAAmuC,WAAA,IAAA5tC,aAAA,EAAAP,KAAAouC,YAsRApuC,KAAAgvC,MAAA,WACAhvC,KAAAukB,MAAA,EACAvkB,KAAAquC,cAAA,EACAruC,KAAAsuC,YAAA,EACAtuC,KAAAuuC,QAAA,EACAvuC,KAAAwuC,WAAA,GAGAxuC,KAAAivC,IAAA,SAAA/C,GACA,OAAAlsC,KAAAukB,MAAA,CAEA,QAAA9nB,EAAA,EAAAuD,KAAAukB,MAAgC9nB,EAAAuD,KAAA6tC,cAAAnuC,OAA+BjD,IAC/DuD,KAAA6tC,cAAApxC,GAAA,EAGAuD,KAAAquC,cAAA,EACAruC,KAAAsuC,YAAA,EAEAtuC,KAAAuqC,WAAAvqC,KAAA23B,SAAAsM,MACAjkC,KAAAuuC,QAAA,GAGAvuC,KAAAwqC,cAAAxqC,KAAA23B,SAAAnjB,eAA4D0d,IAC5DlyB,KAAAwuC,WAAA,GAGAtC,EAAAlsC,QAQAA,KAAAkvC,QAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAlX,GACA,IAAAmX,EAAA7wC,KAAA6wC,KAAAF,GACAA,EAAA3wC,KAAA6d,IAAA8yB,GACA,IAAAG,SAAA3qC,IAAAuzB,GAAA,OAAAA,GACAqX,EAAA,IAAwBz8B,EAAKk8B,EAAAC,EAAAC,GAE7B,GAAAI,EACA,IACAC,EAAArX,aAAsCplB,EAAKolB,EAAApzB,MAAAC,QAAAmzB,GAAA,IAAwCplB,EAAKtU,KAAAqJ,IAAArJ,KAAA6d,IAAA6b,EAAA,OAAA15B,KAAAqJ,IAAArJ,KAAA6d,IAAA6b,EAAA,OAAA15B,KAAAqJ,IAAArJ,KAAA6d,IAAA6b,EAAA,YAA6GplB,EAAKolB,GACnM,MAAAvyB,GACP4pC,EAAA,IAAwBz8B,EAAKk8B,EAAAC,EAAAC,GAU7B,IAAAp6B,EAAAjV,KAAAyW,KAAA9X,KAAAC,KAAA0wC,EAAAC,GACAI,EAAAN,EAAArvC,KAAAyW,KACAm5B,EAAAR,EAAApvC,KAAAyW,KACAo5B,EAAAV,EAAAnvC,KAAAyW,KACAq5B,EAAAnxC,KAAAsC,MAAA0uC,EAAA16B,GACA66B,EAAA,IAAAA,EAAA,GACA,IAAAC,EAAApxC,KAAAsC,MAAA0uC,EAAA16B,GACA86B,EAAA/vC,KAAAyW,KAAA,IAAAs5B,EAAA/vC,KAAAyW,KAAA,GACA,IAAAu5B,EAAArxC,KAAAsC,MAAA2uC,EAAA36B,GACA+6B,EAAA,IAAAA,EAAA,GACA,IAAAC,EAAAtxC,KAAAsC,MAAA2uC,EAAA36B,GACAg7B,EAAAjwC,KAAAyW,KAAA,IAAAw5B,EAAAjwC,KAAAyW,KAAA,GACA,IAAAy5B,EAAAvxC,KAAAsC,MAAA4uC,EAAA56B,GACAi7B,EAAA,IAAAA,EAAA,GACA,IAIA/sC,EAAAC,EAAAC,EAAA8sC,EAAAC,EAAArE,EAAAC,EAAAC,EAAAmB,EAAAD,EAAAkD,EAJAC,EAAA3xC,KAAAsC,MAAA4uC,EAAA56B,GAMA,IALAq7B,EAAAtwC,KAAAyW,KAAA,IAAA65B,EAAAtwC,KAAAyW,KAAA,GAKApT,EAAAysC,EAAmBzsC,EAAA0sC,EAAW1sC,IAK9B,IAJA+sC,EAAApwC,KAAA6uC,MAAAxrC,EAEA+pC,GADAnB,EAAA5oC,EAAArD,KAAAyW,KAAA44B,GACApD,EAEA7oC,EAAA4sC,EAAqB5sC,EAAA6sC,EAAW7sC,IAKhC,IAJA+sC,EAAAC,EAAApwC,KAAAyW,KAAArT,EAEA+pC,GADAnB,EAAA5oC,EAAApD,KAAAyW,KAAA24B,GACApD,EAEA7oC,EAAA+sC,EAAuB/sC,EAAAmtC,EAAWntC,IAIlC,IAFAktC,EAAAf,GAAA,MADAvD,EAAA5oC,EAAAnD,KAAAyW,KAAA04B,GACApD,EAAAoB,EAAAC,GAAAmC,GAEA,GACAvvC,KAAA6rC,MAAAsE,EAAAhtC,IAAAktC,EAAAb,EAGA,IAAAe,EAAA5xC,KAAAC,MAAAuE,EAAA0sC,IAAA1sC,EAAA0sC,IAAAzsC,EAAAwsC,IAAAxsC,EAAAwsC,IAAAvsC,EAAAssC,IAAAtsC,EAAAssC,IAAA16B,EACAu7B,EAAA,EAAAD,UAAA,EAAAA,EAAA,QACAvwC,KAAAqrC,QAAA,GAAA8E,EAAAhtC,GAAA,IAAAusC,EAAAnyC,EAAAizC,EACAxwC,KAAAqrC,QAAA,GAAA8E,EAAAhtC,GAAA,IAAAusC,EAAAx8B,EAAAs9B,EACAxwC,KAAAqrC,QAAA,GAAA8E,EAAAhtC,GAAA,IAAAusC,EAAAv8B,EAAAq9B,IAOAxwC,KAAAywC,UAAA,SAAAnB,EAAAC,GACA,IAAApsC,EACAC,EACAC,EAEAgtC,EACAK,EACAC,EAEAl6B,EAAAzW,KAAAyW,KACA+0B,EAAAxrC,KAAAwrC,GACAE,EAAA1rC,KAAA0rC,GACAG,EAAA7rC,KAAA6rC,MACA+E,EAAAn6B,EAAA9X,KAAAC,KAAA0wC,EAAAC,GAGA,IAFAqB,EAAAn6B,IAAAm6B,EAAAn6B,GAEAtT,EAAA,EAAeA,EAAAytC,EAAUztC,IAKzB,IAFAktC,EAAAf,GAAA,MAFAoB,EAAAvtC,EAAAsT,GACAi6B,GACAnB,GAEA,EACA,IAAAnsC,EAAA,EAAmBA,EAAAqT,EAAUrT,IAG7B,IAFAutC,EAAAxtC,EAAAC,EAAAooC,EAEAnoC,EAAA,EAAqBA,EAAAoT,EAAUpT,IAC/BwoC,EAAAH,EAAAroC,EAAAstC,IAAAN,GAOArwC,KAAA6wC,UAAA,SAAAvB,EAAAC,GACA,IAAApsC,EACAC,EACAC,EAEAgtC,EACAS,EACA3pB,EACAwpB,EAEAl6B,EAAAzW,KAAAyW,KACA+0B,EAAAxrC,KAAAwrC,GACAE,EAAA1rC,KAAA0rC,GACAG,EAAA7rC,KAAA6rC,MACA+E,EAAAn6B,EAAA9X,KAAAC,KAAA0wC,EAAAC,GAGA,IAFAqB,EAAAn6B,IAAAm6B,EAAAn6B,GAEArT,EAAA,EAAeA,EAAAwtC,EAAUxtC,IAKzB,IAFAitC,EAAAf,GAAA,MAFAwB,EAAA1tC,EAAAqT,GACAq6B,GACAvB,GAEA,EAGA,IAFApoB,EAAA/jB,EAAAooC,EAEAroC,EAAA,EAAmBA,EAAAsT,EAAUtT,IAG7B,IAFAwtC,EAAAxpB,EAAAhkB,EAEAE,EAAA,EAAqBA,EAAAoT,EAAUpT,IAC/BwoC,EAAAH,EAAAroC,EAAAstC,IAAAN,GAOArwC,KAAA+wC,UAAA,SAAAzB,EAAAC,GACA,IAAApsC,EACAC,EACAC,EAEAgtC,EACAW,EACAC,EACAC,EAEAz6B,EAAAzW,KAAAyW,KACA+0B,EAAAxrC,KAAAwrC,GACAE,EAAA1rC,KAAA0rC,GACAG,EAAA7rC,KAAA6rC,MACA+E,EAAAn6B,EAAA9X,KAAAC,KAAA0wC,EAAAC,GAGA,IAFAqB,EAAAn6B,IAAAm6B,EAAAn6B,GAEApT,EAAA,EAAeA,EAAAutC,EAAUvtC,IAKzB,IAFAgtC,EAAAf,GAAA,MAFA0B,EAAA3tC,EAAAoT,GACAu6B,GACAzB,GAEA,EAGA,IAFA0B,EAAAvF,EAAAroC,EAEAD,EAAA,EAAmBA,EAAAqT,EAAUrT,IAG7B,IAFA8tC,EAAAD,EAAA7tC,EAAAooC,EAEAroC,EAAA,EAAqBA,EAAAsT,EAAUtT,IAC/B0oC,EAAAqF,EAAA/tC,IAAAktC,GAUArwC,KAAAmxC,QAAA,SAAAhuC,EAAAC,EAAAC,EAAA3F,GACA,IAAAmJ,EAAA7G,KAAA6uC,MAAAxrC,EAAArD,KAAAyW,KAAArT,EAAAD,EACAnD,KAAA6rC,MAAAhlC,GAAAnJ,GAGAsC,KAAAoxC,QAAA,SAAAjuC,EAAAC,EAAAC,GACA,IAAAwD,EAAA7G,KAAA6uC,MAAAxrC,EAAArD,KAAAyW,KAAArT,EAAAD,EACA,OAAAnD,KAAA6rC,MAAAhlC,IAGA7G,KAAAqxC,KAAA,SAAAC,QACAxsC,IAAAwsC,IACAA,EAAA,GAQA,IALA,IAAAzF,EAAA7rC,KAAA6rC,MACA0F,EAAA1F,EAAA1kC,QACAsP,EAAAzW,KAAAyW,KACAo4B,EAAA7uC,KAAA6uC,MAEA1rC,EAAA,EAAmBA,EAAAsT,EAAUtT,IAC7B,QAAAC,EAAA,EAAqBA,EAAAqT,EAAUrT,IAC/B,QAAAC,EAAA,EAAuBA,EAAAoT,EAAUpT,IAAA,CAKjC,IAJA,IAAAwD,EAAAgoC,EAAAxrC,EAAAoT,EAAArT,EAAAD,EACAktC,EAAAkB,EAAA1qC,GACA0d,EAAA,EAEAhjB,GAAA,EAA2BA,GAAA,EAASA,GAAA,GACpC,IAAAqB,EAAArB,EAAA4B,EACA,KAAAP,EAAA,GAAAA,GAAA6T,GAEA,QAAAjV,GAAA,EAA6BA,GAAA,EAASA,GAAA,GACtC,IAAAqB,EAAArB,EAAA4B,EACA,KAAAP,EAAA,GAAAA,GAAA4T,GAEA,QAAA9T,GAAA,EAA+BA,GAAA,EAASA,GAAA,GACxC,IAAAG,EAAAH,EAAAU,EACA,KAAAP,EAAA,GAAAA,GAAA2T,GAIA45B,GAAAiB,GAFAC,EADA1C,EAAA/rC,EAAA2T,EAAA5T,EAAAD,GAGAytC,KADA9rB,IAMAsnB,EAAAhlC,GAAAwpC,IAMArwC,KAAAwxC,MAAA,WACA,IAAA/0C,EAEA,IAAAA,EAAA,EAAeA,EAAAuD,KAAA8uC,MAAgBryC,IAC/BuD,KAAAorC,aAAA,EAAA3uC,GAAA,EACAuD,KAAA6rC,MAAApvC,GAAA,EACAuD,KAAAqrC,QAAA,EAAA5uC,GAAAuD,KAAAqrC,QAAA,EAAA5uC,EAAA,GAAAuD,KAAAqrC,QAAA,EAAA5uC,EAAA,MAIAuD,KAAA4hC,OAAA,SAAAsK,GACAlsC,KAAAgvC,QAIA,IAFA,IAAAyC,EAAAzxC,KAAAyW,KAAA,EAEApT,EAAA,EAAmBA,EAAAouC,EAAWpuC,IAI9B,IAHA,IAAA+sC,EAAApwC,KAAA6uC,MAAAxrC,EACA4oC,GAAA5oC,EAAArD,KAAA+uC,UAAA/uC,KAAA+uC,SAEA3rC,EAAA,EAAqBA,EAAAquC,EAAWruC,IAIhC,IAHA,IAAA+sC,EAAAC,EAAApwC,KAAAyW,KAAArT,EACA4oC,GAAA5oC,EAAApD,KAAA+uC,UAAA/uC,KAAA+uC,SAEA5rC,EAAA,EAAuBA,EAAAsuC,EAAWtuC,IAAA,CAIlC2oC,GAHA3oC,EAAAnD,KAAA+uC,UAAA/uC,KAAA+uC,SAGA/C,EAAAC,EADAkE,EAAAhtC,EACAnD,KAAA4uC,UAAA1C,GAKAlsC,KAAAivC,IAAA/C,IAGAlsC,KAAA0xC,iBAAA,WAEA,OADA/8B,QAAA0B,KAAA,gEACArW,KAAA2xC,0BAUA3xC,KAAA2xC,uBAAA,WACA,IAAAC,EAAA,IAAkBhK,EAClBiK,EAAA,IAAAtxC,aACAuxC,EAAA,IAAAvxC,aACA4tC,EAAA,IAAA5tC,aACA2tC,EAAA,IAAA3tC,aACAwoB,EAAA/oB,KAeA,OALAA,KAAA4hC,OARA,SAAAzjC,GACA4qB,EAAAslB,eAAAwD,EAAApD,EAAAoD,EAAA1zC,EAAA0vC,cAAA,EAAA1vC,EAAAomB,QACAwE,EAAAulB,aAAAwD,EAAArD,EAAAqD,EAAA3zC,EAAA8vC,YAAA,EAAA9vC,EAAAomB,QACAwE,EAAAylB,YAAAL,EAAAM,EAAAN,EAAAhwC,EAAAgwC,WAAA,EAAAhwC,EAAAomB,QACAwE,EAAAwlB,SAAAL,EAAAO,EAAAP,EAAA/vC,EAAA+vC,QAAA,EAAA/vC,EAAAomB,QACApmB,EAAAomB,MAAA,IAIAvkB,KAAAquC,cAAAuD,EAAA1J,aAAA,eAA4DpG,EAAe+P,EAAA,IAC3E7xC,KAAAsuC,YAAAsD,EAAA1J,aAAA,aAAwDpG,EAAegQ,EAAA,IACvE9xC,KAAAwuC,WAAAoD,EAAA1J,aAAA,YAAsDpG,EAAeqM,EAAA,IACrEnuC,KAAAuuC,QAAAqD,EAAA1J,aAAA,SAAgDpG,EAAeoM,EAAA,IAC/D0D,GAGA5xC,KAAA2uC,KAAArE,KAGAD,EAAahsC,UAAAlB,OAAAY,OAA2B4jC,EAAqBtjC,YAChDuY,YAAyByzB,EAOtC,IAAA4C,GAAA,IAAApK,WAAA,6rCACA4K,GAAA,IAAA5K,WAAA,q/TCzpBAkP,GAAA,cAEA,WACA,IAAAvX,EAAA,IAAezmB,EACf0mB,EAAA,IAAe1mB,EAMf,SAAAi+B,EAAA9qC,EAAA/I,GACA,IAAAqE,EAAA0E,EAAAT,QAAAtI,GACAqE,GAAA,GAAA0E,EAAAJ,OAAAtE,EAAA,GAGA,SAAAyvC,EAAAC,EAAAl1B,GAGA,IAGAvgB,EAEA68B,EACA6Y,EANAC,EAAAp1B,EAAAuM,SAAAvH,WAAAkwB,EAAA3oB,UACA8oB,EAAA,EACAC,EAAA,GAEA9uB,EAAA0uB,EAAA5Z,MAAA54B,OAIA,IAAAjD,EAAA,EAAeA,EAAA+mB,EAAQ/mB,KACvB68B,EAAA4Y,EAAA5Z,MAAA77B,IAEA81C,UAAAv1B,IACAs1B,EAAAzsC,KAAAyzB,GAMA,IAAA78B,EAAA,EAAeA,EAAA+mB,EAAQ/mB,IAAA,CACvB,IAAA+1C,EAAA,EACAlZ,EAAA4Y,EAAA5Z,MAAA77B,GAEA,QAAAyE,EAAA,EAAqBA,EAAAoxC,EAAA5yC,OAAsBwB,IAAA,CAC3CixC,EAAAG,EAAApxC,GAEA,IAAAuxC,EAAAnZ,EAAAplB,OAAAqI,IAAA41B,EAAAj+B,QACAs+B,EAAA7zC,KAAAqJ,IAAAwqC,GAAA,MAAAC,GAAA,GAGAJ,EAAA1zC,KAAAsJ,IAAAoqC,EAAAG,GAcA,OAPAF,EAAA5yC,OAAA,IAGA2yC,EAAA,GAGAD,EAAAC,EARA,EAYA,SAAAK,EAAA11B,GAOA,OAAAA,EAAA21B,UAAAjzC,OAIA,OAFAsd,EAAA41B,iBAAA,UACA51B,EAAA61B,cAAA,KAIA71B,EAAA61B,aAAA,IACA71B,EAAA41B,iBAAA,KAEA,QAAAn2C,EAAA,EAAmBA,EAAAugB,EAAA21B,UAAAjzC,OAAwBjD,IAAA,CAC3C,IAAAo2C,EAAAZ,EAAAj1B,IAAA21B,UAAAl2C,IAEAugB,EAAA41B,mBACA51B,EAAA41B,iBAAA51B,EAAA21B,UAAAl2C,GACAugB,EAAA61B,eACA71B,EAAA81B,QAAAD,EACA71B,EAAA+1B,UAAA,EACA/1B,EAAAg2B,UAAA,GAGAh2B,EAAAg2B,YACAh2B,EAAA+1B,WAAAF,EAEAA,EAAA71B,EAAA81B,UACA91B,EAAA41B,iBAAA51B,EAAA21B,UAAAl2C,GACAugB,EAAA81B,QAAAD,GAKA71B,EAAA61B,aAAA71B,EAAA+1B,UAAA/1B,EAAAg2B,UAGA,SAAAC,EAAAj2B,EAAAoM,GAGA,IAFAzU,QAAAu+B,OAAA,IAAAl2B,EAAAsb,MAAA54B,QAEAsd,EAAA21B,UAAAjzC,QAAA,CAEAsyC,EADAh1B,EAAA21B,UAAAQ,MACAR,UAAA31B,GAGAg1B,EAAA5oB,EAAApM,GAGA,SAAAo2B,EAAA94B,EAAAge,GACA0Z,EAAA1Z,EAAAhe,GACAA,EAAA0G,IAAAgxB,EAAA13B,EAAA0G,GAAAsX,MAAAhe,GACAA,EAAA2G,IAAA+wB,EAAA13B,EAAA2G,GAAAqX,MAAAhe,GACAA,EAAA+4B,IAAArB,EAAA13B,EAAA+4B,GAAA/a,MAAAhe,GAKA,IAHA,IACA0G,EAAAC,EADAqyB,EAAA,CAAAh5B,EAAA0G,GAAA1G,EAAA2G,GAAA3G,EAAA+4B,IAGA52C,EAAA,EAAmBA,EAAA,EAAOA,IAE1BwkB,EAAAqyB,GAAA72C,EAAA,OADAukB,EAAAsyB,EAAA72C,KAEAwkB,IACAD,EAAAuyB,oBAAAtyB,GACAA,EAAAsyB,oBAAAvyB,IAIA,SAAAwyB,EAAApqB,EAAAkP,EAAA4Z,EAAAl1B,GAGA,GAAAA,EAAA,CAMA,IAAAvgB,EACAg3C,EAAA,GAEA,IAAAh3C,EAAA,EAAeA,EAAAy1C,EAAAS,UAAAjzC,OAAwBjD,IACvCg3C,EAAA5tC,KAAAqsC,EAAAS,UAAAl2C,IAIA,IAAAA,EAAAy1C,EAAA5Z,MAAA54B,OAAA,EAAgCjD,GAAA,EAAQA,IACxCy1C,EAAA5Z,MAAA77B,GAAA81C,UAAAv1B,IACAo2B,EAAAlB,EAAA5Z,MAAA77B,GAAA67B,GAKA,IAAA77B,EAAAy1C,EAAA5Z,MAAA54B,OAAA,EAAgCjD,GAAA,EAAQA,IACxCy1C,EAAA5Z,MAAA77B,GAAAi3C,cAAAxB,EAAAl1B,GAKA,IAFAi2B,EAAAf,EAAA9oB,GAEA3sB,EAAA,EAAeA,EAAAg3C,EAAA/zC,OAAwBjD,IACvCi2C,EAAAe,EAAAh3C,SA1BAw2C,EAAAf,EAAA9oB,GA8BA,SAAAuqB,EAAAvqB,GAIA,IAFA,IAAAwqB,EAAAxqB,EAAA,GAEA3sB,EAAA,EAAmBA,EAAA2sB,EAAA1pB,OAAqBjD,IACxC2sB,EAAA3sB,GAAAo2C,aAAAe,EAAAf,eACAe,EAAAxqB,EAAA3sB,IAIA,OAAAm3C,EAIA,SAAAC,EAAA7yB,EAAAC,EAAAoyB,EAAAp/B,EAAAd,EAAArW,GACAkD,KAAAiU,IACAjU,KAAAmT,IACAnT,KAAAlD,IACAkD,KAAAghB,KACAhhB,KAAAihB,KACAjhB,KAAAqzC,KACArzC,KAAAkU,OAAA,IAAsBH,EACtB/T,KAAA8zC,gBACA9yB,EAAAsX,MAAAzyB,KAAA7F,MACAghB,EAAA+yB,kBAAA9yB,GACAD,EAAA+yB,kBAAAV,GACApyB,EAAAqX,MAAAzyB,KAAA7F,MACAihB,EAAA8yB,kBAAA/yB,GACAC,EAAA8yB,kBAAAV,GACAA,EAAA/a,MAAAzyB,KAAA7F,MACAqzC,EAAAU,kBAAA/yB,GACAqyB,EAAAU,kBAAA9yB,GAoCA,SAAA+yB,EAAAh3B,EAAAwY,GACAx1B,KAAAupB,SAAAvM,EACAhd,KAAAw1B,KAEAx1B,KAAAs4B,MAAA,GAEAt4B,KAAA2yC,UAAA,GAGA3yC,KAAA6yC,aAAA,EAEA7yC,KAAA4yC,iBAAA,KA5CAiB,EAAAx1C,UAAAy1C,cAAA,WACA,IAAAnZ,EAAA36B,KAAAghB,GAAAuI,SACAqR,EAAA56B,KAAAihB,GAAAsI,SACAsR,EAAA76B,KAAAqzC,GAAA9pB,SACAiR,EAAA7b,WAAAkc,EAAAD,GACAH,EAAA9b,WAAAgc,EAAAC,GACAJ,EAAAtZ,MAAAuZ,GAAAhe,YACAzc,KAAAkU,OAAAwB,KAAA8kB,IAGAqZ,EAAAx1C,UAAAk0C,UAAA,SAAAv1B,GACA,OAAAA,IAAAhd,KAAAghB,IAAAhE,IAAAhd,KAAAihB,IAAAjE,IAAAhd,KAAAqzC,IAGAQ,EAAAx1C,UAAAq1C,cAAA,SAAAO,EAAAC,GACAD,IAAAj0C,KAAAghB,GAAAhhB,KAAAghB,GAAAkzB,EAAyCD,IAAAj0C,KAAAihB,GAAAjhB,KAAAihB,GAAAizB,EAA0CD,IAAAj0C,KAAAqzC,KAAArzC,KAAAqzC,GAAAa,GACnFlC,EAAAiC,EAAA3b,MAAAt4B,MACAk0C,EAAA5b,MAAAzyB,KAAA7F,MACAi0C,EAAAV,oBAAAvzC,KAAAghB,IACAhhB,KAAAghB,GAAAuyB,oBAAAU,GACAA,EAAAV,oBAAAvzC,KAAAihB,IACAjhB,KAAAihB,GAAAsyB,oBAAAU,GACAA,EAAAV,oBAAAvzC,KAAAqzC,IACArzC,KAAAqzC,GAAAE,oBAAAU,GACAj0C,KAAAghB,GAAA+yB,kBAAA/zC,KAAAihB,IACAjhB,KAAAghB,GAAA+yB,kBAAA/zC,KAAAqzC,IACArzC,KAAAihB,GAAA8yB,kBAAA/zC,KAAAghB,IACAhhB,KAAAihB,GAAA8yB,kBAAA/zC,KAAAqzC,IACArzC,KAAAqzC,GAAAU,kBAAA/zC,KAAAghB,IACAhhB,KAAAqzC,GAAAU,kBAAA/zC,KAAAihB,IACAjhB,KAAA8zC,iBAiBAE,EAAA31C,UAAA01C,kBAAA,SAAAvW,GApPA,IAAAt2B,EAAA/I,EAAA+I,EAqPAlH,KAAA2yC,UArPAx0C,EAqPAq/B,GApPA,IAAAt2B,EAAAT,QAAAtI,IAAA+I,EAAArB,KAAA1H,IAuPA61C,EAAA31C,UAAAk1C,oBAAA,SAAAr1C,GACA,IAAAy0C,EAAA3yC,KAAA2yC,UACAra,EAAAt4B,KAAAs4B,MACAvf,EAAA45B,EAAAlsC,QAAAvI,GACA,QAAA6a,EAAA,CAEA,QAAAtc,EAAA,EAAmBA,EAAA67B,EAAA54B,OAAkBjD,IACrC,GAAA67B,EAAA77B,GAAA81C,UAAAr0C,GAAA,OAGAy0C,EAAA7rC,OAAAiS,EAAA,KAGAg5B,GAAA1zC,UAAA81C,OAAA,SAAAjrB,EAAA3E,GACA2E,EAAAG,mBACAH,GAAA,IAAqBkP,GAAQuB,mBAAAzQ,IAG7BA,EAAAyT,gBACA,IAOAlgC,EAAA+mB,EAyBA4wB,EAhCAC,EAAAnrB,EAAAE,SAEAkrB,EAAAprB,EAAAoP,MAGAlP,EAAA,GACAkP,EAAA,GAMA,IAAA77B,EAAA,EAAA+mB,EAAA6wB,EAAA30C,OAAwCjD,EAAA+mB,EAAQ/mB,IAAA,CAChD,IAAA+gC,EAAA,IAAAwW,EAAAK,EAAA53C,MACA2sB,EAAAvjB,KAAA23B,GAIA,IAAA/gC,EAAA,EAAA+mB,EAAA8wB,EAAA50C,OAAqCjD,EAAA+mB,EAAQ/mB,IAAA,CAC7C,IACAwX,GADAqlB,EAAAgb,EAAA73C,IACAwX,EACAd,EAAAmmB,EAAAnmB,EACArW,EAAAw8B,EAAAx8B,EACAmuB,EAAA,IAAA4oB,EAAAzqB,EAAAnV,GAAAmV,EAAAjW,GAAAiW,EAAAtsB,GAAAmX,EAAAd,EAAArW,GACAw7B,EAAAzyB,KAAAolB,GAIA,IAAAxuB,EAAA,EAAA+mB,EAAA4F,EAAA1pB,OAAqCjD,EAAA+mB,EAAQ/mB,IAC7Ci2C,EAAAtpB,EAAA3sB,IAMA,IAFA,IAAA4G,EAAAkhB,EAEAlhB,KAAA,CAGA,KAFA+wC,EAAAT,EAAAvqB,IAEA,CACAzU,QAAAlL,IAAA,0CACA,MAGA+pC,EAAApqB,EAAAkP,EAAA8b,IAAAxB,kBAIA,IAAA2B,EAAA,IAAiC3M,EACjCre,EAAA,GACA1iB,EAAA,GAEA,IAAApK,EAAA,EAAeA,EAAA2sB,EAAA1pB,OAAqBjD,IAAA,CACpC+gC,EAAApU,EAAA3sB,GAAA8sB,SACAA,EAAA1jB,KAAA23B,EAAAr6B,EAAAq6B,EAAAp6B,EAAAo6B,EAAAn6B,GAIA,IAAA5G,EAAA,EAAeA,EAAA67B,EAAA54B,OAAkBjD,IAAA,CACjC,IAAA68B,EAAAhB,EAAA77B,GACAwX,EAAAmV,EAAA3iB,QAAA6yB,EAAAtY,IACA7N,EAAAiW,EAAA3iB,QAAA6yB,EAAArY,IACAnkB,EAAAssB,EAAA3iB,QAAA6yB,EAAA+Z,IACAxsC,EAAAhB,KAAAoO,EAAAd,EAAArW,GAMA,OAFAy3C,EAAArM,aAAA,eAAoDlF,EAAsBzZ,EAAA,IAC1EgrB,EAAAvM,SAAAnhC,GACA0tC,GAnVA,GCbA,ICSMC,GAAS,IAAIzC,GACb0C,GAAQ,IAAIx1C,IAAa,OAmH/By1C,UAAY,SAAUC,GAAM,IAAAC,EAAA7vC,EACF4vC,EAAKn1C,KADH,IAjHL,SAAC/C,EAAGyE,EAAGsB,EAAGqyC,GAC/BlgC,QAAQmgC,KAAK,CAACr4C,EAAGyE,EAAGsB,GAAG/C,YACvB,IAGIypB,EAMA6rB,EAAMC,EAAK/wB,EAAKgxB,EAAKC,EAAI3xC,EATzBrF,EAAI,EACJi3C,GAAa,EAIXtb,EAAY,IAAIt5B,aAAa60C,OAC7BC,EAAS,IAAIC,EAFT,GAE4B,IAAIxU,GAAsB,GAAO,GACvEuU,EAAOzG,UAAY,EAmBnB,IAhBA,IAeIvtC,EAAIC,EAAIoB,EAAInB,EAAIC,EAAImB,EAflB4yC,EAAM,SAACpyC,EAAGC,EAAGC,GACjB0xC,EAAON,GAAMxyC,QAAQkB,EAAI,IAAKC,EAAI,IAAKC,EAAI,KAC3C2xC,EAAMP,GAAMxyC,QAAQkB,EAAI,GAAIC,EAAI,GAAIC,EAAI,IACxC4gB,EAAMwwB,GAAMxyC,QAAQkB,EAAI,GAAIC,EAAI,GAAIC,EAAI,IACxC4xC,EAAMR,GAAMxyC,QAAQkB,EAAI,GAAIC,EAAI,GAAIC,EAAI,IACxC6xC,EAAKT,GAAMxyC,QAAQkB,EAAI,EAAGC,EAAI,EAAGC,EAAI,GACrCE,EAAKkxC,GAAMxyC,QAAQkB,EAAI,EAAGC,EAAI,EAAGC,EAAI,GACrC,IAAI3F,EAAQ,GAAK,GAAMiB,KAAK6d,IAAIu4B,IAAS,GAMzC,OALAr3C,GAAS,GAAK,GAAMiB,KAAK6d,IAAIw4B,IAAQ,IACrCt3C,GAAS,GAAK,GAAMiB,KAAK6d,IAAIyH,IAAQ,KACrCvmB,GAAS,GAAK,GAAMiB,KAAK6d,IAAIy4B,IAAQ,MAASF,EAC9Cr3C,GAAS,GAAK,GAAMiB,KAAK6d,IAAI04B,IAAO,OAAUF,EAC9Ct3C,GAAS,GAAK,GAAMiB,KAAK6d,IAAIjZ,IAAO,QAAW0gB,GAIxC5gB,EAAK,GAADb,EAAea,EAAK,GAADb,EAtBtB,GAsB2Ca,IACnD,IAAK,IAAID,EAAK,GAADlC,EAAekC,EAAK,GAADlC,EAvBxB,GAuB6CkC,IACnD,IAAK,IAAID,EAAK,GAAD1G,EAAe0G,EAAK,GAAD1G,EAxB1B,GAwB+C0G,IAAKjF,IAAK,CAC7DmD,EAAK8B,EAAI,GAAKoyC,EAAIpyC,EAAGC,EAAGC,GACxB/B,EAAK8B,EAAI,GAAKmyC,EAAIpyC,EAAI,OAAQC,EAAI,OAAQC,EAAI,QAC9CX,EAAKW,EAAI,GAAKkyC,EAAIpyC,EAAI,OAAQC,EAAI,OAAQC,EAAI,QAC9C9B,EAAK4B,EAAI,GAAKoyC,EAAIl0C,EAAIC,EAAIoB,GAC1BlB,EAAK4B,EAAI,GAAKmyC,EAAIl0C,EAAK,OAAQC,EAAK,OAAQoB,EAAK,QACjDC,EAAKU,EAAI,GAAKkyC,EAAIl0C,EAAK,OAAQC,EAAK,OAAQoB,EAAK,QAGjD,IAAI8yC,EAAU,EACdA,GAAwB,GAHXD,EAAIh0C,EAAIC,EAAImB,GAMzB6yC,GADiB,GAAMnyC,GAAS,GAAJwxC,GAG5Bhb,EAAU37B,GAAKs3C,EAEL,IAANt3C,IACJi3C,IAAaA,GAAax2C,KAAK6wC,KAAK3V,EAAU37B,MAAQS,KAAK6wC,KAAK3V,EAAU37B,EAAI,KAIpF,GAAIi3C,EACFM,YAAY,CACVC,aAAa,EACbj5C,IACAyE,IACAsB,WAQJ,GAHA6yC,EAAOxJ,MAAQhS,GACf3Q,EAAWmsB,EAAO1D,0BAEJroB,WAAWC,SAAzB,CAUAL,EAASsQ,qBAETtQ,EAAS9B,MDzFO,ICwFc,ODxFd,ICwFc,ODxFd,ICwFc,SAG9B8B,GAAW,IAAIkP,GAAWuB,mBAAmBzQ,IACpCyT,gBACT,IAAMgZ,EAAYnB,GAAOL,OACvBjrB,EACAvqB,KAAKsC,MAAMioB,EAASE,SAAS1pB,QAAUwpB,EAASE,SAAS1pB,OAAS,IAAM,GAAM,MAGhFi2C,EAAU7a,uBAMV,IAAM8a,EAAOD,EAAUrsB,WAAWC,SAASriB,MAAM2uC,OAE3CC,EAAWH,EAAUrsB,WAAWpV,OAAOhN,MAAM2uC,OAE7CvP,EAASqP,EAAU9uC,MAAMK,MAAM2uC,OAErClhC,QAAQohC,QAAQ,CAACt5C,EAAGyE,EAAGsB,GAAG/C,YAC1Bg2C,YAAY,CACVC,aAAa,EACbj5C,IACAyE,IACAsB,IACAozC,OACAE,WACAxP,UAIC,CAACsP,EAAME,EAAUxP,SA5ClBmP,YAAY,CACVC,aAAa,EACbj5C,IACAyE,IACAsB,MA6CJwzC,CAF0BpB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA","file":"static/js/voxel.worker.626df7dc.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function () {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    } else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n  }\n\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0, 1, 0, 1, -1, 0, 1, 1, 0, -1, -1, 0, -1, 0, 1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1, -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1, 1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1, -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function noise2D(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n\n      var n1 = 0;\n      var n2 = 0; // Skew the input space to determine which simplex cell we're in\n\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n\n      var y0 = yin - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n          i1 = 0;\n          j1 = 1;\n        } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n\n\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n      var y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n      var ii = i & 255;\n      var jj = j & 255; // Calculate the contribution from the three corners\n\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n\n\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function noise3D(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n\n      var y0 = yin - Y0;\n      var z0 = zin - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n            i1 = 1;\n            j1 = 0;\n            k1 = 0;\n            i2 = 1;\n            j2 = 0;\n            k2 = 1;\n          } // X Z Y order\n          else {\n              i1 = 0;\n              j1 = 0;\n              k1 = 1;\n              i2 = 1;\n              j2 = 0;\n              k2 = 1;\n            } // Z X Y order\n\n      } else {\n        // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n            i1 = 0;\n            j1 = 1;\n            k1 = 0;\n            i2 = 0;\n            j2 = 1;\n            k2 = 1;\n          } // Y Z X order\n          else {\n              i1 = 0;\n              j1 = 1;\n              k1 = 0;\n              i2 = 1;\n              j2 = 1;\n              k2 = 0;\n            } // Y X Z order\n\n      } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n\n\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255; // Calculate the contribution from the four corners\n\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function noise4D(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;else ranky++;\n      if (x0 > z0) rankx++;else rankz++;\n      if (x0 > w0) rankx++;else rankw++;\n      if (y0 > z0) ranky++;else rankz++;\n      if (y0 > w0) ranky++;else rankw++;\n      if (z0 > w0) rankz++;else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0; // Rank 2 denotes the second largest coordinate.\n\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0; // Rank 1 denotes the second smallest coordinate.\n\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\n\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255; // Calculate the contribution from the five corners\n\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;else {\n        var gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32 * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;else {\n        var gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32 * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;else {\n        var gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32 * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;else {\n        var gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32 * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;else {\n        var gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32 * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      } // Sum up and scale the result to cover the range [-1,1]\n\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n\n    return p;\n  }\n\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes Baagøe <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n\n      if (s0 < 0) {\n        s0 += 1;\n      }\n\n      s1 -= mash(arguments[i]);\n\n      if (s1 < 0) {\n        s1 += 1;\n      }\n\n      s2 -= mash(arguments[i]);\n\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n\n    mash = null;\n    return function () {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n\n  function masher() {\n    var n = 0xefc8249d;\n    return function (data) {\n      data = data.toString();\n\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  } // amd\n\n\n  if (typeof define !== 'undefined' && define.amd) define(function () {\n    return SimplexNoise;\n  }); // common js\n\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise; // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise; // nodejs\n\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n})();","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\nfunction EventDispatcher() {}\n\nObject.assign(EventDispatcher.prototype, {\n  addEventListener: function addEventListener(type, listener) {\n    if (this._listeners === undefined) this._listeners = {};\n    var listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n\n    if (listeners[type].indexOf(listener) === -1) {\n      listeners[type].push(listener);\n    }\n  },\n  hasEventListener: function hasEventListener(type, listener) {\n    if (this._listeners === undefined) return false;\n    var listeners = this._listeners;\n    return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n  },\n  removeEventListener: function removeEventListener(type, listener) {\n    if (this._listeners === undefined) return;\n    var listeners = this._listeners;\n    var listenerArray = listeners[type];\n\n    if (listenerArray !== undefined) {\n      var index = listenerArray.indexOf(listener);\n\n      if (index !== -1) {\n        listenerArray.splice(index, 1);\n      }\n    }\n  },\n  dispatchEvent: function dispatchEvent(event) {\n    if (this._listeners === undefined) return;\n    var listeners = this._listeners;\n    var listenerArray = listeners[event.type];\n\n    if (listenerArray !== undefined) {\n      event.target = this;\n      var array = listenerArray.slice(0);\n\n      for (var i = 0, l = array.length; i < l; i++) {\n        array[i].call(this, event);\n      }\n    }\n  }\n});\nexport { EventDispatcher };","/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\nvar _Math = {\n  DEG2RAD: Math.PI / 180,\n  RAD2DEG: 180 / Math.PI,\n  generateUUID: function () {\n    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n    var lut = [];\n\n    for (var i = 0; i < 256; i++) {\n      lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n    }\n\n    return function generateUUID() {\n      var d0 = Math.random() * 0xffffffff | 0;\n      var d1 = Math.random() * 0xffffffff | 0;\n      var d2 = Math.random() * 0xffffffff | 0;\n      var d3 = Math.random() * 0xffffffff | 0;\n      var uuid = lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n      return uuid.toUpperCase();\n    };\n  }(),\n  clamp: function clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n  },\n  // compute euclidian modulo of m % n\n  // https://en.wikipedia.org/wiki/Modulo_operation\n  euclideanModulo: function euclideanModulo(n, m) {\n    return (n % m + m) % m;\n  },\n  // Linear mapping from range <a1, a2> to range <b1, b2>\n  mapLinear: function mapLinear(x, a1, a2, b1, b2) {\n    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n  },\n  // https://en.wikipedia.org/wiki/Linear_interpolation\n  lerp: function lerp(x, y, t) {\n    return (1 - t) * x + t * y;\n  },\n  // http://en.wikipedia.org/wiki/Smoothstep\n  smoothstep: function smoothstep(x, min, max) {\n    if (x <= min) return 0;\n    if (x >= max) return 1;\n    x = (x - min) / (max - min);\n    return x * x * (3 - 2 * x);\n  },\n  smootherstep: function smootherstep(x, min, max) {\n    if (x <= min) return 0;\n    if (x >= max) return 1;\n    x = (x - min) / (max - min);\n    return x * x * x * (x * (x * 6 - 15) + 10);\n  },\n  // Random integer from <low, high> interval\n  randInt: function randInt(low, high) {\n    return low + Math.floor(Math.random() * (high - low + 1));\n  },\n  // Random float from <low, high> interval\n  randFloat: function randFloat(low, high) {\n    return low + Math.random() * (high - low);\n  },\n  // Random float from <-range/2, range/2> interval\n  randFloatSpread: function randFloatSpread(range) {\n    return range * (0.5 - Math.random());\n  },\n  degToRad: function degToRad(degrees) {\n    return degrees * _Math.DEG2RAD;\n  },\n  radToDeg: function radToDeg(radians) {\n    return radians * _Math.RAD2DEG;\n  },\n  isPowerOfTwo: function isPowerOfTwo(value) {\n    return (value & value - 1) === 0 && value !== 0;\n  },\n  ceilPowerOfTwo: function ceilPowerOfTwo(value) {\n    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n  },\n  floorPowerOfTwo: function floorPowerOfTwo(value) {\n    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n  }\n};\nexport { _Math };","import { _Math } from './Math.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar ColorKeywords = {\n  'aliceblue': 0xF0F8FF,\n  'antiquewhite': 0xFAEBD7,\n  'aqua': 0x00FFFF,\n  'aquamarine': 0x7FFFD4,\n  'azure': 0xF0FFFF,\n  'beige': 0xF5F5DC,\n  'bisque': 0xFFE4C4,\n  'black': 0x000000,\n  'blanchedalmond': 0xFFEBCD,\n  'blue': 0x0000FF,\n  'blueviolet': 0x8A2BE2,\n  'brown': 0xA52A2A,\n  'burlywood': 0xDEB887,\n  'cadetblue': 0x5F9EA0,\n  'chartreuse': 0x7FFF00,\n  'chocolate': 0xD2691E,\n  'coral': 0xFF7F50,\n  'cornflowerblue': 0x6495ED,\n  'cornsilk': 0xFFF8DC,\n  'crimson': 0xDC143C,\n  'cyan': 0x00FFFF,\n  'darkblue': 0x00008B,\n  'darkcyan': 0x008B8B,\n  'darkgoldenrod': 0xB8860B,\n  'darkgray': 0xA9A9A9,\n  'darkgreen': 0x006400,\n  'darkgrey': 0xA9A9A9,\n  'darkkhaki': 0xBDB76B,\n  'darkmagenta': 0x8B008B,\n  'darkolivegreen': 0x556B2F,\n  'darkorange': 0xFF8C00,\n  'darkorchid': 0x9932CC,\n  'darkred': 0x8B0000,\n  'darksalmon': 0xE9967A,\n  'darkseagreen': 0x8FBC8F,\n  'darkslateblue': 0x483D8B,\n  'darkslategray': 0x2F4F4F,\n  'darkslategrey': 0x2F4F4F,\n  'darkturquoise': 0x00CED1,\n  'darkviolet': 0x9400D3,\n  'deeppink': 0xFF1493,\n  'deepskyblue': 0x00BFFF,\n  'dimgray': 0x696969,\n  'dimgrey': 0x696969,\n  'dodgerblue': 0x1E90FF,\n  'firebrick': 0xB22222,\n  'floralwhite': 0xFFFAF0,\n  'forestgreen': 0x228B22,\n  'fuchsia': 0xFF00FF,\n  'gainsboro': 0xDCDCDC,\n  'ghostwhite': 0xF8F8FF,\n  'gold': 0xFFD700,\n  'goldenrod': 0xDAA520,\n  'gray': 0x808080,\n  'green': 0x008000,\n  'greenyellow': 0xADFF2F,\n  'grey': 0x808080,\n  'honeydew': 0xF0FFF0,\n  'hotpink': 0xFF69B4,\n  'indianred': 0xCD5C5C,\n  'indigo': 0x4B0082,\n  'ivory': 0xFFFFF0,\n  'khaki': 0xF0E68C,\n  'lavender': 0xE6E6FA,\n  'lavenderblush': 0xFFF0F5,\n  'lawngreen': 0x7CFC00,\n  'lemonchiffon': 0xFFFACD,\n  'lightblue': 0xADD8E6,\n  'lightcoral': 0xF08080,\n  'lightcyan': 0xE0FFFF,\n  'lightgoldenrodyellow': 0xFAFAD2,\n  'lightgray': 0xD3D3D3,\n  'lightgreen': 0x90EE90,\n  'lightgrey': 0xD3D3D3,\n  'lightpink': 0xFFB6C1,\n  'lightsalmon': 0xFFA07A,\n  'lightseagreen': 0x20B2AA,\n  'lightskyblue': 0x87CEFA,\n  'lightslategray': 0x778899,\n  'lightslategrey': 0x778899,\n  'lightsteelblue': 0xB0C4DE,\n  'lightyellow': 0xFFFFE0,\n  'lime': 0x00FF00,\n  'limegreen': 0x32CD32,\n  'linen': 0xFAF0E6,\n  'magenta': 0xFF00FF,\n  'maroon': 0x800000,\n  'mediumaquamarine': 0x66CDAA,\n  'mediumblue': 0x0000CD,\n  'mediumorchid': 0xBA55D3,\n  'mediumpurple': 0x9370DB,\n  'mediumseagreen': 0x3CB371,\n  'mediumslateblue': 0x7B68EE,\n  'mediumspringgreen': 0x00FA9A,\n  'mediumturquoise': 0x48D1CC,\n  'mediumvioletred': 0xC71585,\n  'midnightblue': 0x191970,\n  'mintcream': 0xF5FFFA,\n  'mistyrose': 0xFFE4E1,\n  'moccasin': 0xFFE4B5,\n  'navajowhite': 0xFFDEAD,\n  'navy': 0x000080,\n  'oldlace': 0xFDF5E6,\n  'olive': 0x808000,\n  'olivedrab': 0x6B8E23,\n  'orange': 0xFFA500,\n  'orangered': 0xFF4500,\n  'orchid': 0xDA70D6,\n  'palegoldenrod': 0xEEE8AA,\n  'palegreen': 0x98FB98,\n  'paleturquoise': 0xAFEEEE,\n  'palevioletred': 0xDB7093,\n  'papayawhip': 0xFFEFD5,\n  'peachpuff': 0xFFDAB9,\n  'peru': 0xCD853F,\n  'pink': 0xFFC0CB,\n  'plum': 0xDDA0DD,\n  'powderblue': 0xB0E0E6,\n  'purple': 0x800080,\n  'rebeccapurple': 0x663399,\n  'red': 0xFF0000,\n  'rosybrown': 0xBC8F8F,\n  'royalblue': 0x4169E1,\n  'saddlebrown': 0x8B4513,\n  'salmon': 0xFA8072,\n  'sandybrown': 0xF4A460,\n  'seagreen': 0x2E8B57,\n  'seashell': 0xFFF5EE,\n  'sienna': 0xA0522D,\n  'silver': 0xC0C0C0,\n  'skyblue': 0x87CEEB,\n  'slateblue': 0x6A5ACD,\n  'slategray': 0x708090,\n  'slategrey': 0x708090,\n  'snow': 0xFFFAFA,\n  'springgreen': 0x00FF7F,\n  'steelblue': 0x4682B4,\n  'tan': 0xD2B48C,\n  'teal': 0x008080,\n  'thistle': 0xD8BFD8,\n  'tomato': 0xFF6347,\n  'turquoise': 0x40E0D0,\n  'violet': 0xEE82EE,\n  'wheat': 0xF5DEB3,\n  'white': 0xFFFFFF,\n  'whitesmoke': 0xF5F5F5,\n  'yellow': 0xFFFF00,\n  'yellowgreen': 0x9ACD32\n};\n\nfunction Color(r, g, b) {\n  if (g === undefined && b === undefined) {\n    // r is THREE.Color, hex or string\n    return this.set(r);\n  }\n\n  return this.setRGB(r, g, b);\n}\n\nfunction hue2rgb(p, q, t) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n  return p;\n}\n\nfunction SRGBToLinear(c) {\n  return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n}\n\nfunction LinearToSRGB(c) {\n  return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n}\n\nObject.assign(Color.prototype, {\n  isColor: true,\n  r: 1,\n  g: 1,\n  b: 1,\n  set: function set(value) {\n    if (value && value.isColor) {\n      this.copy(value);\n    } else if (typeof value === 'number') {\n      this.setHex(value);\n    } else if (typeof value === 'string') {\n      this.setStyle(value);\n    }\n\n    return this;\n  },\n  setScalar: function setScalar(scalar) {\n    this.r = scalar;\n    this.g = scalar;\n    this.b = scalar;\n    return this;\n  },\n  setHex: function setHex(hex) {\n    hex = Math.floor(hex);\n    this.r = (hex >> 16 & 255) / 255;\n    this.g = (hex >> 8 & 255) / 255;\n    this.b = (hex & 255) / 255;\n    return this;\n  },\n  setRGB: function setRGB(r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    return this;\n  },\n  setHSL: function setHSL(h, s, l) {\n    // h,s,l ranges are in 0.0 - 1.0\n    h = _Math.euclideanModulo(h, 1);\n    s = _Math.clamp(s, 0, 1);\n    l = _Math.clamp(l, 0, 1);\n\n    if (s === 0) {\n      this.r = this.g = this.b = l;\n    } else {\n      var p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n      var q = 2 * l - p;\n      this.r = hue2rgb(q, p, h + 1 / 3);\n      this.g = hue2rgb(q, p, h);\n      this.b = hue2rgb(q, p, h - 1 / 3);\n    }\n\n    return this;\n  },\n  setStyle: function setStyle(style) {\n    function handleAlpha(string) {\n      if (string === undefined) return;\n\n      if (parseFloat(string) < 1) {\n        console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n      }\n    }\n\n    var m;\n\n    if (m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(style)) {\n      // rgb / hsl\n      var color;\n      var name = m[1];\n      var components = m[2];\n\n      switch (name) {\n        case 'rgb':\n        case 'rgba':\n          if (color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n            // rgb(255,0,0) rgba(255,0,0,0.5)\n            this.r = Math.min(255, parseInt(color[1], 10)) / 255;\n            this.g = Math.min(255, parseInt(color[2], 10)) / 255;\n            this.b = Math.min(255, parseInt(color[3], 10)) / 255;\n            handleAlpha(color[5]);\n            return this;\n          }\n\n          if (color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n            // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n            this.r = Math.min(100, parseInt(color[1], 10)) / 100;\n            this.g = Math.min(100, parseInt(color[2], 10)) / 100;\n            this.b = Math.min(100, parseInt(color[3], 10)) / 100;\n            handleAlpha(color[5]);\n            return this;\n          }\n\n          break;\n\n        case 'hsl':\n        case 'hsla':\n          if (color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n            // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n            var h = parseFloat(color[1]) / 360;\n            var s = parseInt(color[2], 10) / 100;\n            var l = parseInt(color[3], 10) / 100;\n            handleAlpha(color[5]);\n            return this.setHSL(h, s, l);\n          }\n\n          break;\n      }\n    } else if (m = /^\\#([A-Fa-f0-9]+)$/.exec(style)) {\n      // hex color\n      var hex = m[1];\n      var size = hex.length;\n\n      if (size === 3) {\n        // #ff0\n        this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n        this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n        this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n        return this;\n      } else if (size === 6) {\n        // #ff0000\n        this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n        this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n        this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n        return this;\n      }\n    }\n\n    if (style && style.length > 0) {\n      // color keywords\n      var hex = ColorKeywords[style];\n\n      if (hex !== undefined) {\n        // red\n        this.setHex(hex);\n      } else {\n        // unknown color\n        console.warn('THREE.Color: Unknown color ' + style);\n      }\n    }\n\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor(this.r, this.g, this.b);\n  },\n  copy: function copy(color) {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    return this;\n  },\n  copyGammaToLinear: function copyGammaToLinear(color, gammaFactor) {\n    if (gammaFactor === undefined) gammaFactor = 2.0;\n    this.r = Math.pow(color.r, gammaFactor);\n    this.g = Math.pow(color.g, gammaFactor);\n    this.b = Math.pow(color.b, gammaFactor);\n    return this;\n  },\n  copyLinearToGamma: function copyLinearToGamma(color, gammaFactor) {\n    if (gammaFactor === undefined) gammaFactor = 2.0;\n    var safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n    this.r = Math.pow(color.r, safeInverse);\n    this.g = Math.pow(color.g, safeInverse);\n    this.b = Math.pow(color.b, safeInverse);\n    return this;\n  },\n  convertGammaToLinear: function convertGammaToLinear(gammaFactor) {\n    this.copyGammaToLinear(this, gammaFactor);\n    return this;\n  },\n  convertLinearToGamma: function convertLinearToGamma(gammaFactor) {\n    this.copyLinearToGamma(this, gammaFactor);\n    return this;\n  },\n  copySRGBToLinear: function copySRGBToLinear(color) {\n    this.r = SRGBToLinear(color.r);\n    this.g = SRGBToLinear(color.g);\n    this.b = SRGBToLinear(color.b);\n    return this;\n  },\n  copyLinearToSRGB: function copyLinearToSRGB(color) {\n    this.r = LinearToSRGB(color.r);\n    this.g = LinearToSRGB(color.g);\n    this.b = LinearToSRGB(color.b);\n    return this;\n  },\n  convertSRGBToLinear: function convertSRGBToLinear() {\n    this.copySRGBToLinear(this);\n    return this;\n  },\n  convertLinearToSRGB: function convertLinearToSRGB() {\n    this.copyLinearToSRGB(this);\n    return this;\n  },\n  getHex: function getHex() {\n    return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n  },\n  getHexString: function getHexString() {\n    return ('000000' + this.getHex().toString(16)).slice(-6);\n  },\n  getHSL: function getHSL(target) {\n    // h,s,l ranges are in 0.0 - 1.0\n    if (target === undefined) {\n      console.warn('THREE.Color: .getHSL() target is now required');\n      target = {\n        h: 0,\n        s: 0,\n        l: 0\n      };\n    }\n\n    var r = this.r,\n        g = this.g,\n        b = this.b;\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var hue, saturation;\n    var lightness = (min + max) / 2.0;\n\n    if (min === max) {\n      hue = 0;\n      saturation = 0;\n    } else {\n      var delta = max - min;\n      saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n      switch (max) {\n        case r:\n          hue = (g - b) / delta + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          hue = (b - r) / delta + 2;\n          break;\n\n        case b:\n          hue = (r - g) / delta + 4;\n          break;\n      }\n\n      hue /= 6;\n    }\n\n    target.h = hue;\n    target.s = saturation;\n    target.l = lightness;\n    return target;\n  },\n  getStyle: function getStyle() {\n    return 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n  },\n  offsetHSL: function () {\n    var hsl = {};\n    return function (h, s, l) {\n      this.getHSL(hsl);\n      hsl.h += h;\n      hsl.s += s;\n      hsl.l += l;\n      this.setHSL(hsl.h, hsl.s, hsl.l);\n      return this;\n    };\n  }(),\n  add: function add(color) {\n    this.r += color.r;\n    this.g += color.g;\n    this.b += color.b;\n    return this;\n  },\n  addColors: function addColors(color1, color2) {\n    this.r = color1.r + color2.r;\n    this.g = color1.g + color2.g;\n    this.b = color1.b + color2.b;\n    return this;\n  },\n  addScalar: function addScalar(s) {\n    this.r += s;\n    this.g += s;\n    this.b += s;\n    return this;\n  },\n  sub: function sub(color) {\n    this.r = Math.max(0, this.r - color.r);\n    this.g = Math.max(0, this.g - color.g);\n    this.b = Math.max(0, this.b - color.b);\n    return this;\n  },\n  multiply: function multiply(color) {\n    this.r *= color.r;\n    this.g *= color.g;\n    this.b *= color.b;\n    return this;\n  },\n  multiplyScalar: function multiplyScalar(s) {\n    this.r *= s;\n    this.g *= s;\n    this.b *= s;\n    return this;\n  },\n  lerp: function lerp(color, alpha) {\n    this.r += (color.r - this.r) * alpha;\n    this.g += (color.g - this.g) * alpha;\n    this.b += (color.b - this.b) * alpha;\n    return this;\n  },\n  lerpHSL: function () {\n    var hslA = {\n      h: 0,\n      s: 0,\n      l: 0\n    };\n    var hslB = {\n      h: 0,\n      s: 0,\n      l: 0\n    };\n    return function lerpHSL(color, alpha) {\n      this.getHSL(hslA);\n      color.getHSL(hslB);\n\n      var h = _Math.lerp(hslA.h, hslB.h, alpha);\n\n      var s = _Math.lerp(hslA.s, hslB.s, alpha);\n\n      var l = _Math.lerp(hslA.l, hslB.l, alpha);\n\n      this.setHSL(h, s, l);\n      return this;\n    };\n  }(),\n  equals: function equals(c) {\n    return c.r === this.r && c.g === this.g && c.b === this.b;\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n    this.r = array[offset];\n    this.g = array[offset + 1];\n    this.b = array[offset + 2];\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this.r;\n    array[offset + 1] = this.g;\n    array[offset + 2] = this.b;\n    return array;\n  },\n  toJSON: function toJSON() {\n    return this.getHex();\n  }\n});\nexport { Color };","/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\nimport { _Math } from './Math.js';\n\nfunction Quaternion(x, y, z, w) {\n  this._x = x || 0;\n  this._y = y || 0;\n  this._z = z || 0;\n  this._w = w !== undefined ? w : 1;\n}\n\nObject.assign(Quaternion, {\n  slerp: function slerp(qa, qb, qm, t) {\n    return qm.copy(qa).slerp(qb, t);\n  },\n  slerpFlat: function slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n    // fuzz-free, array-based Quaternion SLERP operation\n    var x0 = src0[srcOffset0 + 0],\n        y0 = src0[srcOffset0 + 1],\n        z0 = src0[srcOffset0 + 2],\n        w0 = src0[srcOffset0 + 3],\n        x1 = src1[srcOffset1 + 0],\n        y1 = src1[srcOffset1 + 1],\n        z1 = src1[srcOffset1 + 2],\n        w1 = src1[srcOffset1 + 3];\n\n    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n      var s = 1 - t,\n          cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n          dir = cos >= 0 ? 1 : -1,\n          sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n      if (sqrSin > Number.EPSILON) {\n        var sin = Math.sqrt(sqrSin),\n            len = Math.atan2(sin, cos * dir);\n        s = Math.sin(s * len) / sin;\n        t = Math.sin(t * len) / sin;\n      }\n\n      var tDir = t * dir;\n      x0 = x0 * s + x1 * tDir;\n      y0 = y0 * s + y1 * tDir;\n      z0 = z0 * s + z1 * tDir;\n      w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n      if (s === 1 - t) {\n        var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n        x0 *= f;\n        y0 *= f;\n        z0 *= f;\n        w0 *= f;\n      }\n    }\n\n    dst[dstOffset] = x0;\n    dst[dstOffset + 1] = y0;\n    dst[dstOffset + 2] = z0;\n    dst[dstOffset + 3] = w0;\n  }\n});\nObject.defineProperties(Quaternion.prototype, {\n  x: {\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      this._x = value;\n\n      this._onChangeCallback();\n    }\n  },\n  y: {\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      this._y = value;\n\n      this._onChangeCallback();\n    }\n  },\n  z: {\n    get: function get() {\n      return this._z;\n    },\n    set: function set(value) {\n      this._z = value;\n\n      this._onChangeCallback();\n    }\n  },\n  w: {\n    get: function get() {\n      return this._w;\n    },\n    set: function set(value) {\n      this._w = value;\n\n      this._onChangeCallback();\n    }\n  }\n});\nObject.assign(Quaternion.prototype, {\n  isQuaternion: true,\n  set: function set(x, y, z, w) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor(this._x, this._y, this._z, this._w);\n  },\n  copy: function copy(quaternion) {\n    this._x = quaternion.x;\n    this._y = quaternion.y;\n    this._z = quaternion.z;\n    this._w = quaternion.w;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  setFromEuler: function setFromEuler(euler, update) {\n    if (!(euler && euler.isEuler)) {\n      throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n    }\n\n    var x = euler._x,\n        y = euler._y,\n        z = euler._z,\n        order = euler.order; // http://www.mathworks.com/matlabcentral/fileexchange/\n    // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    //\tcontent/SpinCalc.m\n\n    var cos = Math.cos;\n    var sin = Math.sin;\n    var c1 = cos(x / 2);\n    var c2 = cos(y / 2);\n    var c3 = cos(z / 2);\n    var s1 = sin(x / 2);\n    var s2 = sin(y / 2);\n    var s3 = sin(z / 2);\n\n    if (order === 'XYZ') {\n      this._x = s1 * c2 * c3 + c1 * s2 * s3;\n      this._y = c1 * s2 * c3 - s1 * c2 * s3;\n      this._z = c1 * c2 * s3 + s1 * s2 * c3;\n      this._w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'YXZ') {\n      this._x = s1 * c2 * c3 + c1 * s2 * s3;\n      this._y = c1 * s2 * c3 - s1 * c2 * s3;\n      this._z = c1 * c2 * s3 - s1 * s2 * c3;\n      this._w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'ZXY') {\n      this._x = s1 * c2 * c3 - c1 * s2 * s3;\n      this._y = c1 * s2 * c3 + s1 * c2 * s3;\n      this._z = c1 * c2 * s3 + s1 * s2 * c3;\n      this._w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'ZYX') {\n      this._x = s1 * c2 * c3 - c1 * s2 * s3;\n      this._y = c1 * s2 * c3 + s1 * c2 * s3;\n      this._z = c1 * c2 * s3 - s1 * s2 * c3;\n      this._w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'YZX') {\n      this._x = s1 * c2 * c3 + c1 * s2 * s3;\n      this._y = c1 * s2 * c3 + s1 * c2 * s3;\n      this._z = c1 * c2 * s3 - s1 * s2 * c3;\n      this._w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'XZY') {\n      this._x = s1 * c2 * c3 - c1 * s2 * s3;\n      this._y = c1 * s2 * c3 - s1 * c2 * s3;\n      this._z = c1 * c2 * s3 + s1 * s2 * c3;\n      this._w = c1 * c2 * c3 + s1 * s2 * s3;\n    }\n\n    if (update !== false) this._onChangeCallback();\n    return this;\n  },\n  setFromAxisAngle: function setFromAxisAngle(axis, angle) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n    // assumes axis is normalized\n    var halfAngle = angle / 2,\n        s = Math.sin(halfAngle);\n    this._x = axis.x * s;\n    this._y = axis.y * s;\n    this._z = axis.z * s;\n    this._w = Math.cos(halfAngle);\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  setFromRotationMatrix: function setFromRotationMatrix(m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    var te = m.elements,\n        m11 = te[0],\n        m12 = te[4],\n        m13 = te[8],\n        m21 = te[1],\n        m22 = te[5],\n        m23 = te[9],\n        m31 = te[2],\n        m32 = te[6],\n        m33 = te[10],\n        trace = m11 + m22 + m33,\n        s;\n\n    if (trace > 0) {\n      s = 0.5 / Math.sqrt(trace + 1.0);\n      this._w = 0.25 / s;\n      this._x = (m32 - m23) * s;\n      this._y = (m13 - m31) * s;\n      this._z = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n      this._w = (m32 - m23) / s;\n      this._x = 0.25 * s;\n      this._y = (m12 + m21) / s;\n      this._z = (m13 + m31) / s;\n    } else if (m22 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n      this._w = (m13 - m31) / s;\n      this._x = (m12 + m21) / s;\n      this._y = 0.25 * s;\n      this._z = (m23 + m32) / s;\n    } else {\n      s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n      this._w = (m21 - m12) / s;\n      this._x = (m13 + m31) / s;\n      this._y = (m23 + m32) / s;\n      this._z = 0.25 * s;\n    }\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  setFromUnitVectors: function setFromUnitVectors(vFrom, vTo) {\n    // assumes direction vectors vFrom and vTo are normalized\n    var EPS = 0.000001;\n    var r = vFrom.dot(vTo) + 1;\n\n    if (r < EPS) {\n      r = 0;\n\n      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n        this._x = -vFrom.y;\n        this._y = vFrom.x;\n        this._z = 0;\n        this._w = r;\n      } else {\n        this._x = 0;\n        this._y = -vFrom.z;\n        this._z = vFrom.y;\n        this._w = r;\n      }\n    } else {\n      // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n      this._w = r;\n    }\n\n    return this.normalize();\n  },\n  angleTo: function angleTo(q) {\n    return 2 * Math.acos(Math.abs(_Math.clamp(this.dot(q), -1, 1)));\n  },\n  rotateTowards: function rotateTowards(q, step) {\n    var angle = this.angleTo(q);\n    if (angle === 0) return this;\n    var t = Math.min(1, step / angle);\n    this.slerp(q, t);\n    return this;\n  },\n  inverse: function inverse() {\n    // quaternion is assumed to have unit length\n    return this.conjugate();\n  },\n  conjugate: function conjugate() {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  dot: function dot(v) {\n    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n  },\n  lengthSq: function lengthSq() {\n    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n  },\n  length: function length() {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n  },\n  normalize: function normalize() {\n    var l = this.length();\n\n    if (l === 0) {\n      this._x = 0;\n      this._y = 0;\n      this._z = 0;\n      this._w = 1;\n    } else {\n      l = 1 / l;\n      this._x = this._x * l;\n      this._y = this._y * l;\n      this._z = this._z * l;\n      this._w = this._w * l;\n    }\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  multiply: function multiply(q, p) {\n    if (p !== undefined) {\n      console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n      return this.multiplyQuaternions(q, p);\n    }\n\n    return this.multiplyQuaternions(this, q);\n  },\n  premultiply: function premultiply(q) {\n    return this.multiplyQuaternions(q, this);\n  },\n  multiplyQuaternions: function multiplyQuaternions(a, b) {\n    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n    var qax = a._x,\n        qay = a._y,\n        qaz = a._z,\n        qaw = a._w;\n    var qbx = b._x,\n        qby = b._y,\n        qbz = b._z,\n        qbw = b._w;\n    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  slerp: function slerp(qb, t) {\n    if (t === 0) return this;\n    if (t === 1) return this.copy(qb);\n    var x = this._x,\n        y = this._y,\n        z = this._z,\n        w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    if (cosHalfTheta < 0) {\n      this._w = -qb._w;\n      this._x = -qb._x;\n      this._y = -qb._y;\n      this._z = -qb._z;\n      cosHalfTheta = -cosHalfTheta;\n    } else {\n      this.copy(qb);\n    }\n\n    if (cosHalfTheta >= 1.0) {\n      this._w = w;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      return this;\n    }\n\n    var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n    if (sqrSinHalfTheta <= Number.EPSILON) {\n      var s = 1 - t;\n      this._w = s * w + t * this._w;\n      this._x = s * x + t * this._x;\n      this._y = s * y + t * this._y;\n      this._z = s * z + t * this._z;\n      this.normalize();\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    var sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n    var halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n    var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n        ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n    this._w = w * ratioA + this._w * ratioB;\n    this._x = x * ratioA + this._x * ratioB;\n    this._y = y * ratioA + this._y * ratioB;\n    this._z = z * ratioA + this._z * ratioB;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  equals: function equals(quaternion) {\n    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._w;\n    return array;\n  },\n  _onChange: function _onChange(callback) {\n    this._onChangeCallback = callback;\n    return this;\n  },\n  _onChangeCallback: function _onChangeCallback() {}\n});\nexport { Quaternion };","import { _Math } from './Math.js';\nimport { Quaternion } from './Quaternion.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Vector3(x, y, z) {\n  this.x = x || 0;\n  this.y = y || 0;\n  this.z = z || 0;\n}\n\nObject.assign(Vector3.prototype, {\n  isVector3: true,\n  set: function set(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  },\n  setScalar: function setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    this.z = scalar;\n    return this;\n  },\n  setX: function setX(x) {\n    this.x = x;\n    return this;\n  },\n  setY: function setY(y) {\n    this.y = y;\n    return this;\n  },\n  setZ: function setZ(z) {\n    this.z = z;\n    return this;\n  },\n  setComponent: function setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n\n      case 1:\n        this.y = value;\n        break;\n\n      case 2:\n        this.z = value;\n        break;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n\n    return this;\n  },\n  getComponent: function getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n\n      case 1:\n        return this.y;\n\n      case 2:\n        return this.z;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  },\n  clone: function clone() {\n    return new this.constructor(this.x, this.y, this.z);\n  },\n  copy: function copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n    return this;\n  },\n  add: function add(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n    return this;\n  },\n  addScalar: function addScalar(s) {\n    this.x += s;\n    this.y += s;\n    this.z += s;\n    return this;\n  },\n  addVectors: function addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    this.z = a.z + b.z;\n    return this;\n  },\n  addScaledVector: function addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    this.z += v.z * s;\n    return this;\n  },\n  sub: function sub(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n    return this;\n  },\n  subScalar: function subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    this.z -= s;\n    return this;\n  },\n  subVectors: function subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    this.z = a.z - b.z;\n    return this;\n  },\n  multiply: function multiply(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n      return this.multiplyVectors(v, w);\n    }\n\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z;\n    return this;\n  },\n  multiplyScalar: function multiplyScalar(scalar) {\n    this.x *= scalar;\n    this.y *= scalar;\n    this.z *= scalar;\n    return this;\n  },\n  multiplyVectors: function multiplyVectors(a, b) {\n    this.x = a.x * b.x;\n    this.y = a.y * b.y;\n    this.z = a.z * b.z;\n    return this;\n  },\n  applyEuler: function () {\n    var quaternion = new Quaternion();\n    return function applyEuler(euler) {\n      if (!(euler && euler.isEuler)) {\n        console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n      }\n\n      return this.applyQuaternion(quaternion.setFromEuler(euler));\n    };\n  }(),\n  applyAxisAngle: function () {\n    var quaternion = new Quaternion();\n    return function applyAxisAngle(axis, angle) {\n      return this.applyQuaternion(quaternion.setFromAxisAngle(axis, angle));\n    };\n  }(),\n  applyMatrix3: function applyMatrix3(m) {\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    var e = m.elements;\n    this.x = e[0] * x + e[3] * y + e[6] * z;\n    this.y = e[1] * x + e[4] * y + e[7] * z;\n    this.z = e[2] * x + e[5] * y + e[8] * z;\n    return this;\n  },\n  applyMatrix4: function applyMatrix4(m) {\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    var e = m.elements;\n    var w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n    return this;\n  },\n  applyQuaternion: function applyQuaternion(q) {\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    var qx = q.x,\n        qy = q.y,\n        qz = q.z,\n        qw = q.w; // calculate quat * vector\n\n    var ix = qw * x + qy * z - qz * y;\n    var iy = qw * y + qz * x - qx * z;\n    var iz = qw * z + qx * y - qy * x;\n    var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return this;\n  },\n  project: function project(camera) {\n    return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n  },\n  unproject: function unproject(camera) {\n    return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n  },\n  transformDirection: function transformDirection(m) {\n    // input: THREE.Matrix4 affine matrix\n    // vector interpreted as a direction\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    var e = m.elements;\n    this.x = e[0] * x + e[4] * y + e[8] * z;\n    this.y = e[1] * x + e[5] * y + e[9] * z;\n    this.z = e[2] * x + e[6] * y + e[10] * z;\n    return this.normalize();\n  },\n  divide: function divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z;\n    return this;\n  },\n  divideScalar: function divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  },\n  min: function min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    this.z = Math.min(this.z, v.z);\n    return this;\n  },\n  max: function max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    this.z = Math.max(this.z, v.z);\n    return this;\n  },\n  clamp: function clamp(min, max) {\n    // assumes min < max, componentwise\n    this.x = Math.max(min.x, Math.min(max.x, this.x));\n    this.y = Math.max(min.y, Math.min(max.y, this.y));\n    this.z = Math.max(min.z, Math.min(max.z, this.z));\n    return this;\n  },\n  clampScalar: function clampScalar(minVal, maxVal) {\n    this.x = Math.max(minVal, Math.min(maxVal, this.x));\n    this.y = Math.max(minVal, Math.min(maxVal, this.y));\n    this.z = Math.max(minVal, Math.min(maxVal, this.z));\n    return this;\n  },\n  clampLength: function clampLength(min, max) {\n    var length = this.length();\n    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n  },\n  floor: function floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    this.z = Math.floor(this.z);\n    return this;\n  },\n  ceil: function ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    this.z = Math.ceil(this.z);\n    return this;\n  },\n  round: function round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.z = Math.round(this.z);\n    return this;\n  },\n  roundToZero: function roundToZero() {\n    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n    return this;\n  },\n  negate: function negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  },\n  dot: function dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n  },\n  // TODO lengthSquared?\n  lengthSq: function lengthSq() {\n    return this.x * this.x + this.y * this.y + this.z * this.z;\n  },\n  length: function length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  },\n  manhattanLength: function manhattanLength() {\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n  },\n  normalize: function normalize() {\n    return this.divideScalar(this.length() || 1);\n  },\n  setLength: function setLength(length) {\n    return this.normalize().multiplyScalar(length);\n  },\n  lerp: function lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    this.z += (v.z - this.z) * alpha;\n    return this;\n  },\n  lerpVectors: function lerpVectors(v1, v2, alpha) {\n    return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n  },\n  cross: function cross(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n      return this.crossVectors(v, w);\n    }\n\n    return this.crossVectors(this, v);\n  },\n  crossVectors: function crossVectors(a, b) {\n    var ax = a.x,\n        ay = a.y,\n        az = a.z;\n    var bx = b.x,\n        by = b.y,\n        bz = b.z;\n    this.x = ay * bz - az * by;\n    this.y = az * bx - ax * bz;\n    this.z = ax * by - ay * bx;\n    return this;\n  },\n  projectOnVector: function projectOnVector(vector) {\n    var scalar = vector.dot(this) / vector.lengthSq();\n    return this.copy(vector).multiplyScalar(scalar);\n  },\n  projectOnPlane: function () {\n    var v1 = new Vector3();\n    return function projectOnPlane(planeNormal) {\n      v1.copy(this).projectOnVector(planeNormal);\n      return this.sub(v1);\n    };\n  }(),\n  reflect: function () {\n    // reflect incident vector off plane orthogonal to normal\n    // normal is assumed to have unit length\n    var v1 = new Vector3();\n    return function reflect(normal) {\n      return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));\n    };\n  }(),\n  angleTo: function angleTo(v) {\n    var theta = this.dot(v) / Math.sqrt(this.lengthSq() * v.lengthSq()); // clamp, to handle numerical problems\n\n    return Math.acos(_Math.clamp(theta, -1, 1));\n  },\n  distanceTo: function distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  },\n  distanceToSquared: function distanceToSquared(v) {\n    var dx = this.x - v.x,\n        dy = this.y - v.y,\n        dz = this.z - v.z;\n    return dx * dx + dy * dy + dz * dz;\n  },\n  manhattanDistanceTo: function manhattanDistanceTo(v) {\n    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n  },\n  setFromSpherical: function setFromSpherical(s) {\n    return this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n  },\n  setFromSphericalCoords: function setFromSphericalCoords(radius, phi, theta) {\n    var sinPhiRadius = Math.sin(phi) * radius;\n    this.x = sinPhiRadius * Math.sin(theta);\n    this.y = Math.cos(phi) * radius;\n    this.z = sinPhiRadius * Math.cos(theta);\n    return this;\n  },\n  setFromCylindrical: function setFromCylindrical(c) {\n    return this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n  },\n  setFromCylindricalCoords: function setFromCylindricalCoords(radius, theta, y) {\n    this.x = radius * Math.sin(theta);\n    this.y = y;\n    this.z = radius * Math.cos(theta);\n    return this;\n  },\n  setFromMatrixPosition: function setFromMatrixPosition(m) {\n    var e = m.elements;\n    this.x = e[12];\n    this.y = e[13];\n    this.z = e[14];\n    return this;\n  },\n  setFromMatrixScale: function setFromMatrixScale(m) {\n    var sx = this.setFromMatrixColumn(m, 0).length();\n    var sy = this.setFromMatrixColumn(m, 1).length();\n    var sz = this.setFromMatrixColumn(m, 2).length();\n    this.x = sx;\n    this.y = sy;\n    this.z = sz;\n    return this;\n  },\n  setFromMatrixColumn: function setFromMatrixColumn(m, index) {\n    return this.fromArray(m.elements, index * 4);\n  },\n  equals: function equals(v) {\n    return v.x === this.x && v.y === this.y && v.z === this.z;\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    array[offset + 2] = this.z;\n    return array;\n  },\n  fromBufferAttribute: function fromBufferAttribute(attribute, index, offset) {\n    if (offset !== undefined) {\n      console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n    }\n\n    this.x = attribute.getX(index);\n    this.y = attribute.getY(index);\n    this.z = attribute.getZ(index);\n    return this;\n  }\n});\nexport { Vector3 };","import { Color } from '../math/Color.js';\nimport { Vector3 } from '../math/Vector3.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Face3(a, b, c, normal, color, materialIndex) {\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.normal = normal && normal.isVector3 ? normal : new Vector3();\n  this.vertexNormals = Array.isArray(normal) ? normal : [];\n  this.color = color && color.isColor ? color : new Color();\n  this.vertexColors = Array.isArray(color) ? color : [];\n  this.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n}\n\nObject.assign(Face3.prototype, {\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(source) {\n    this.a = source.a;\n    this.b = source.b;\n    this.c = source.c;\n    this.normal.copy(source.normal);\n    this.color.copy(source.color);\n    this.materialIndex = source.materialIndex;\n\n    for (var i = 0, il = source.vertexNormals.length; i < il; i++) {\n      this.vertexNormals[i] = source.vertexNormals[i].clone();\n    }\n\n    for (var i = 0, il = source.vertexColors.length; i < il; i++) {\n      this.vertexColors[i] = source.vertexColors[i].clone();\n    }\n\n    return this;\n  }\n});\nexport { Face3 };","import { Vector3 } from './Vector3.js';\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n * @author tschw\n */\n\nfunction Matrix3() {\n  this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n  if (arguments.length > 0) {\n    console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n  }\n}\n\nObject.assign(Matrix3.prototype, {\n  isMatrix3: true,\n  set: function set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n    var te = this.elements;\n    te[0] = n11;\n    te[1] = n21;\n    te[2] = n31;\n    te[3] = n12;\n    te[4] = n22;\n    te[5] = n32;\n    te[6] = n13;\n    te[7] = n23;\n    te[8] = n33;\n    return this;\n  },\n  identity: function identity() {\n    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().fromArray(this.elements);\n  },\n  copy: function copy(m) {\n    var te = this.elements;\n    var me = m.elements;\n    te[0] = me[0];\n    te[1] = me[1];\n    te[2] = me[2];\n    te[3] = me[3];\n    te[4] = me[4];\n    te[5] = me[5];\n    te[6] = me[6];\n    te[7] = me[7];\n    te[8] = me[8];\n    return this;\n  },\n  setFromMatrix4: function setFromMatrix4(m) {\n    var me = m.elements;\n    this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n    return this;\n  },\n  applyToBufferAttribute: function () {\n    var v1 = new Vector3();\n    return function applyToBufferAttribute(attribute) {\n      for (var i = 0, l = attribute.count; i < l; i++) {\n        v1.x = attribute.getX(i);\n        v1.y = attribute.getY(i);\n        v1.z = attribute.getZ(i);\n        v1.applyMatrix3(this);\n        attribute.setXYZ(i, v1.x, v1.y, v1.z);\n      }\n\n      return attribute;\n    };\n  }(),\n  multiply: function multiply(m) {\n    return this.multiplyMatrices(this, m);\n  },\n  premultiply: function premultiply(m) {\n    return this.multiplyMatrices(m, this);\n  },\n  multiplyMatrices: function multiplyMatrices(a, b) {\n    var ae = a.elements;\n    var be = b.elements;\n    var te = this.elements;\n    var a11 = ae[0],\n        a12 = ae[3],\n        a13 = ae[6];\n    var a21 = ae[1],\n        a22 = ae[4],\n        a23 = ae[7];\n    var a31 = ae[2],\n        a32 = ae[5],\n        a33 = ae[8];\n    var b11 = be[0],\n        b12 = be[3],\n        b13 = be[6];\n    var b21 = be[1],\n        b22 = be[4],\n        b23 = be[7];\n    var b31 = be[2],\n        b32 = be[5],\n        b33 = be[8];\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31;\n    te[3] = a11 * b12 + a12 * b22 + a13 * b32;\n    te[6] = a11 * b13 + a12 * b23 + a13 * b33;\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31;\n    te[4] = a21 * b12 + a22 * b22 + a23 * b32;\n    te[7] = a21 * b13 + a22 * b23 + a23 * b33;\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31;\n    te[5] = a31 * b12 + a32 * b22 + a33 * b32;\n    te[8] = a31 * b13 + a32 * b23 + a33 * b33;\n    return this;\n  },\n  multiplyScalar: function multiplyScalar(s) {\n    var te = this.elements;\n    te[0] *= s;\n    te[3] *= s;\n    te[6] *= s;\n    te[1] *= s;\n    te[4] *= s;\n    te[7] *= s;\n    te[2] *= s;\n    te[5] *= s;\n    te[8] *= s;\n    return this;\n  },\n  determinant: function determinant() {\n    var te = this.elements;\n    var a = te[0],\n        b = te[1],\n        c = te[2],\n        d = te[3],\n        e = te[4],\n        f = te[5],\n        g = te[6],\n        h = te[7],\n        i = te[8];\n    return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n  },\n  getInverse: function getInverse(matrix, throwOnDegenerate) {\n    if (matrix && matrix.isMatrix4) {\n      console.error(\"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\");\n    }\n\n    var me = matrix.elements,\n        te = this.elements,\n        n11 = me[0],\n        n21 = me[1],\n        n31 = me[2],\n        n12 = me[3],\n        n22 = me[4],\n        n32 = me[5],\n        n13 = me[6],\n        n23 = me[7],\n        n33 = me[8],\n        t11 = n33 * n22 - n32 * n23,\n        t12 = n32 * n13 - n33 * n12,\n        t13 = n23 * n12 - n22 * n13,\n        det = n11 * t11 + n21 * t12 + n31 * t13;\n\n    if (det === 0) {\n      var msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n\n      if (throwOnDegenerate === true) {\n        throw new Error(msg);\n      } else {\n        console.warn(msg);\n      }\n\n      return this.identity();\n    }\n\n    var detInv = 1 / det;\n    te[0] = t11 * detInv;\n    te[1] = (n31 * n23 - n33 * n21) * detInv;\n    te[2] = (n32 * n21 - n31 * n22) * detInv;\n    te[3] = t12 * detInv;\n    te[4] = (n33 * n11 - n31 * n13) * detInv;\n    te[5] = (n31 * n12 - n32 * n11) * detInv;\n    te[6] = t13 * detInv;\n    te[7] = (n21 * n13 - n23 * n11) * detInv;\n    te[8] = (n22 * n11 - n21 * n12) * detInv;\n    return this;\n  },\n  transpose: function transpose() {\n    var tmp,\n        m = this.elements;\n    tmp = m[1];\n    m[1] = m[3];\n    m[3] = tmp;\n    tmp = m[2];\n    m[2] = m[6];\n    m[6] = tmp;\n    tmp = m[5];\n    m[5] = m[7];\n    m[7] = tmp;\n    return this;\n  },\n  getNormalMatrix: function getNormalMatrix(matrix4) {\n    return this.setFromMatrix4(matrix4).getInverse(this).transpose();\n  },\n  transposeIntoArray: function transposeIntoArray(r) {\n    var m = this.elements;\n    r[0] = m[0];\n    r[1] = m[3];\n    r[2] = m[6];\n    r[3] = m[1];\n    r[4] = m[4];\n    r[5] = m[7];\n    r[6] = m[2];\n    r[7] = m[5];\n    r[8] = m[8];\n    return this;\n  },\n  setUvTransform: function setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n    var c = Math.cos(rotation);\n    var s = Math.sin(rotation);\n    this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n  },\n  scale: function scale(sx, sy) {\n    var te = this.elements;\n    te[0] *= sx;\n    te[3] *= sx;\n    te[6] *= sx;\n    te[1] *= sy;\n    te[4] *= sy;\n    te[7] *= sy;\n    return this;\n  },\n  rotate: function rotate(theta) {\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var te = this.elements;\n    var a11 = te[0],\n        a12 = te[3],\n        a13 = te[6];\n    var a21 = te[1],\n        a22 = te[4],\n        a23 = te[7];\n    te[0] = c * a11 + s * a21;\n    te[3] = c * a12 + s * a22;\n    te[6] = c * a13 + s * a23;\n    te[1] = -s * a11 + c * a21;\n    te[4] = -s * a12 + c * a22;\n    te[7] = -s * a13 + c * a23;\n    return this;\n  },\n  translate: function translate(tx, ty) {\n    var te = this.elements;\n    te[0] += tx * te[2];\n    te[3] += tx * te[5];\n    te[6] += tx * te[8];\n    te[1] += ty * te[2];\n    te[4] += ty * te[5];\n    te[7] += ty * te[8];\n    return this;\n  },\n  equals: function equals(matrix) {\n    var te = this.elements;\n    var me = matrix.elements;\n\n    for (var i = 0; i < 9; i++) {\n      if (te[i] !== me[i]) return false;\n    }\n\n    return true;\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n\n    for (var i = 0; i < 9; i++) {\n      this.elements[i] = array[i + offset];\n    }\n\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    var te = this.elements;\n    array[offset] = te[0];\n    array[offset + 1] = te[1];\n    array[offset + 2] = te[2];\n    array[offset + 3] = te[3];\n    array[offset + 4] = te[4];\n    array[offset + 5] = te[5];\n    array[offset + 6] = te[6];\n    array[offset + 7] = te[7];\n    array[offset + 8] = te[8];\n    return array;\n  }\n});\nexport { Matrix3 };","import { Vector3 } from './Vector3.js';\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Box3(min, max) {\n  this.min = min !== undefined ? min : new Vector3(+Infinity, +Infinity, +Infinity);\n  this.max = max !== undefined ? max : new Vector3(-Infinity, -Infinity, -Infinity);\n}\n\nObject.assign(Box3.prototype, {\n  isBox3: true,\n  set: function set(min, max) {\n    this.min.copy(min);\n    this.max.copy(max);\n    return this;\n  },\n  setFromArray: function setFromArray(array) {\n    var minX = +Infinity;\n    var minY = +Infinity;\n    var minZ = +Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n    var maxZ = -Infinity;\n\n    for (var i = 0, l = array.length; i < l; i += 3) {\n      var x = array[i];\n      var y = array[i + 1];\n      var z = array[i + 2];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (z < minZ) minZ = z;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      if (z > maxZ) maxZ = z;\n    }\n\n    this.min.set(minX, minY, minZ);\n    this.max.set(maxX, maxY, maxZ);\n    return this;\n  },\n  setFromBufferAttribute: function setFromBufferAttribute(attribute) {\n    var minX = +Infinity;\n    var minY = +Infinity;\n    var minZ = +Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n    var maxZ = -Infinity;\n\n    for (var i = 0, l = attribute.count; i < l; i++) {\n      var x = attribute.getX(i);\n      var y = attribute.getY(i);\n      var z = attribute.getZ(i);\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (z < minZ) minZ = z;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      if (z > maxZ) maxZ = z;\n    }\n\n    this.min.set(minX, minY, minZ);\n    this.max.set(maxX, maxY, maxZ);\n    return this;\n  },\n  setFromPoints: function setFromPoints(points) {\n    this.makeEmpty();\n\n    for (var i = 0, il = points.length; i < il; i++) {\n      this.expandByPoint(points[i]);\n    }\n\n    return this;\n  },\n  setFromCenterAndSize: function () {\n    var v1 = new Vector3();\n    return function setFromCenterAndSize(center, size) {\n      var halfSize = v1.copy(size).multiplyScalar(0.5);\n      this.min.copy(center).sub(halfSize);\n      this.max.copy(center).add(halfSize);\n      return this;\n    };\n  }(),\n  setFromObject: function setFromObject(object) {\n    this.makeEmpty();\n    return this.expandByObject(object);\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(box) {\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n    return this;\n  },\n  makeEmpty: function makeEmpty() {\n    this.min.x = this.min.y = this.min.z = +Infinity;\n    this.max.x = this.max.y = this.max.z = -Infinity;\n    return this;\n  },\n  isEmpty: function isEmpty() {\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n  },\n  getCenter: function getCenter(target) {\n    if (target === undefined) {\n      console.warn('THREE.Box3: .getCenter() target is now required');\n      target = new Vector3();\n    }\n\n    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n  },\n  getSize: function getSize(target) {\n    if (target === undefined) {\n      console.warn('THREE.Box3: .getSize() target is now required');\n      target = new Vector3();\n    }\n\n    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n  },\n  expandByPoint: function expandByPoint(point) {\n    this.min.min(point);\n    this.max.max(point);\n    return this;\n  },\n  expandByVector: function expandByVector(vector) {\n    this.min.sub(vector);\n    this.max.add(vector);\n    return this;\n  },\n  expandByScalar: function expandByScalar(scalar) {\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n    return this;\n  },\n  expandByObject: function () {\n    // Computes the world-axis-aligned bounding box of an object (including its children),\n    // accounting for both the object's, and children's, world transforms\n    var scope, i, l;\n    var v1 = new Vector3();\n\n    function traverse(node) {\n      var geometry = node.geometry;\n\n      if (geometry !== undefined) {\n        if (geometry.isGeometry) {\n          var vertices = geometry.vertices;\n\n          for (i = 0, l = vertices.length; i < l; i++) {\n            v1.copy(vertices[i]);\n            v1.applyMatrix4(node.matrixWorld);\n            scope.expandByPoint(v1);\n          }\n        } else if (geometry.isBufferGeometry) {\n          var attribute = geometry.attributes.position;\n\n          if (attribute !== undefined) {\n            for (i = 0, l = attribute.count; i < l; i++) {\n              v1.fromBufferAttribute(attribute, i).applyMatrix4(node.matrixWorld);\n              scope.expandByPoint(v1);\n            }\n          }\n        }\n      }\n    }\n\n    return function expandByObject(object) {\n      scope = this;\n      object.updateMatrixWorld(true);\n      object.traverse(traverse);\n      return this;\n    };\n  }(),\n  containsPoint: function containsPoint(point) {\n    return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n  },\n  containsBox: function containsBox(box) {\n    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n  },\n  getParameter: function getParameter(point, target) {\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n    if (target === undefined) {\n      console.warn('THREE.Box3: .getParameter() target is now required');\n      target = new Vector3();\n    }\n\n    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n  },\n  intersectsBox: function intersectsBox(box) {\n    // using 6 splitting planes to rule out intersections.\n    return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n  },\n  intersectsSphere: function () {\n    var closestPoint = new Vector3();\n    return function intersectsSphere(sphere) {\n      // Find the point on the AABB closest to the sphere center.\n      this.clampPoint(sphere.center, closestPoint); // If that point is inside the sphere, the AABB and sphere intersect.\n\n      return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n    };\n  }(),\n  intersectsPlane: function intersectsPlane(plane) {\n    // We compute the minimum and maximum dot product values. If those values\n    // are on the same side (back or front) of the plane, then there is no intersection.\n    var min, max;\n\n    if (plane.normal.x > 0) {\n      min = plane.normal.x * this.min.x;\n      max = plane.normal.x * this.max.x;\n    } else {\n      min = plane.normal.x * this.max.x;\n      max = plane.normal.x * this.min.x;\n    }\n\n    if (plane.normal.y > 0) {\n      min += plane.normal.y * this.min.y;\n      max += plane.normal.y * this.max.y;\n    } else {\n      min += plane.normal.y * this.max.y;\n      max += plane.normal.y * this.min.y;\n    }\n\n    if (plane.normal.z > 0) {\n      min += plane.normal.z * this.min.z;\n      max += plane.normal.z * this.max.z;\n    } else {\n      min += plane.normal.z * this.max.z;\n      max += plane.normal.z * this.min.z;\n    }\n\n    return min <= -plane.constant && max >= -plane.constant;\n  },\n  intersectsTriangle: function () {\n    // triangle centered vertices\n    var v0 = new Vector3();\n    var v1 = new Vector3();\n    var v2 = new Vector3(); // triangle edge vectors\n\n    var f0 = new Vector3();\n    var f1 = new Vector3();\n    var f2 = new Vector3();\n    var testAxis = new Vector3();\n    var center = new Vector3();\n    var extents = new Vector3();\n    var triangleNormal = new Vector3();\n\n    function satForAxes(axes) {\n      var i, j;\n\n      for (i = 0, j = axes.length - 3; i <= j; i += 3) {\n        testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n        var r = extents.x * Math.abs(testAxis.x) + extents.y * Math.abs(testAxis.y) + extents.z * Math.abs(testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n        var p0 = v0.dot(testAxis);\n        var p1 = v1.dot(testAxis);\n        var p2 = v2.dot(testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n        if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n          // points of the projected triangle are outside the projected half-length of the aabb\n          // the axis is seperating and we can exit\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return function intersectsTriangle(triangle) {\n      if (this.isEmpty()) {\n        return false;\n      } // compute box center and extents\n\n\n      this.getCenter(center);\n      extents.subVectors(this.max, center); // translate triangle to aabb origin\n\n      v0.subVectors(triangle.a, center);\n      v1.subVectors(triangle.b, center);\n      v2.subVectors(triangle.c, center); // compute edge vectors for triangle\n\n      f0.subVectors(v1, v0);\n      f1.subVectors(v2, v1);\n      f2.subVectors(v0, v2); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n      // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n      // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n      var axes = [0, -f0.z, f0.y, 0, -f1.z, f1.y, 0, -f2.z, f2.y, f0.z, 0, -f0.x, f1.z, 0, -f1.x, f2.z, 0, -f2.x, -f0.y, f0.x, 0, -f1.y, f1.x, 0, -f2.y, f2.x, 0];\n\n      if (!satForAxes(axes)) {\n        return false;\n      } // test 3 face normals from the aabb\n\n\n      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n      if (!satForAxes(axes)) {\n        return false;\n      } // finally testing the face normal of the triangle\n      // use already existing triangle edge vectors here\n\n\n      triangleNormal.crossVectors(f0, f1);\n      axes = [triangleNormal.x, triangleNormal.y, triangleNormal.z];\n      return satForAxes(axes);\n    };\n  }(),\n  clampPoint: function clampPoint(point, target) {\n    if (target === undefined) {\n      console.warn('THREE.Box3: .clampPoint() target is now required');\n      target = new Vector3();\n    }\n\n    return target.copy(point).clamp(this.min, this.max);\n  },\n  distanceToPoint: function () {\n    var v1 = new Vector3();\n    return function distanceToPoint(point) {\n      var clampedPoint = v1.copy(point).clamp(this.min, this.max);\n      return clampedPoint.sub(point).length();\n    };\n  }(),\n  getBoundingSphere: function () {\n    var v1 = new Vector3();\n    return function getBoundingSphere(target) {\n      if (target === undefined) {\n        console.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n      }\n\n      this.getCenter(target.center);\n      target.radius = this.getSize(v1).length() * 0.5;\n      return target;\n    };\n  }(),\n  intersect: function intersect(box) {\n    this.min.max(box.min);\n    this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n    if (this.isEmpty()) this.makeEmpty();\n    return this;\n  },\n  union: function union(box) {\n    this.min.min(box.min);\n    this.max.max(box.max);\n    return this;\n  },\n  applyMatrix4: function () {\n    var points = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n    return function applyMatrix4(matrix) {\n      // transform of empty box is an empty box.\n      if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n      points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n      points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n      points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n      points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n      points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n      points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n      points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n      points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n      this.setFromPoints(points);\n      return this;\n    };\n  }(),\n  translate: function translate(offset) {\n    this.min.add(offset);\n    this.max.add(offset);\n    return this;\n  },\n  equals: function equals(box) {\n    return box.min.equals(this.min) && box.max.equals(this.max);\n  }\n});\nexport { Box3 };","import { Box3 } from './Box3.js';\nimport { Vector3 } from './Vector3.js';\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Sphere(center, radius) {\n  this.center = center !== undefined ? center : new Vector3();\n  this.radius = radius !== undefined ? radius : 0;\n}\n\nObject.assign(Sphere.prototype, {\n  set: function set(center, radius) {\n    this.center.copy(center);\n    this.radius = radius;\n    return this;\n  },\n  setFromPoints: function () {\n    var box = new Box3();\n    return function setFromPoints(points, optionalCenter) {\n      var center = this.center;\n\n      if (optionalCenter !== undefined) {\n        center.copy(optionalCenter);\n      } else {\n        box.setFromPoints(points).getCenter(center);\n      }\n\n      var maxRadiusSq = 0;\n\n      for (var i = 0, il = points.length; i < il; i++) {\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n      }\n\n      this.radius = Math.sqrt(maxRadiusSq);\n      return this;\n    };\n  }(),\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(sphere) {\n    this.center.copy(sphere.center);\n    this.radius = sphere.radius;\n    return this;\n  },\n  empty: function empty() {\n    return this.radius <= 0;\n  },\n  containsPoint: function containsPoint(point) {\n    return point.distanceToSquared(this.center) <= this.radius * this.radius;\n  },\n  distanceToPoint: function distanceToPoint(point) {\n    return point.distanceTo(this.center) - this.radius;\n  },\n  intersectsSphere: function intersectsSphere(sphere) {\n    var radiusSum = this.radius + sphere.radius;\n    return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n  },\n  intersectsBox: function intersectsBox(box) {\n    return box.intersectsSphere(this);\n  },\n  intersectsPlane: function intersectsPlane(plane) {\n    return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n  },\n  clampPoint: function clampPoint(point, target) {\n    var deltaLengthSq = this.center.distanceToSquared(point);\n\n    if (target === undefined) {\n      console.warn('THREE.Sphere: .clampPoint() target is now required');\n      target = new Vector3();\n    }\n\n    target.copy(point);\n\n    if (deltaLengthSq > this.radius * this.radius) {\n      target.sub(this.center).normalize();\n      target.multiplyScalar(this.radius).add(this.center);\n    }\n\n    return target;\n  },\n  getBoundingBox: function getBoundingBox(target) {\n    if (target === undefined) {\n      console.warn('THREE.Sphere: .getBoundingBox() target is now required');\n      target = new Box3();\n    }\n\n    target.set(this.center, this.center);\n    target.expandByScalar(this.radius);\n    return target;\n  },\n  applyMatrix4: function applyMatrix4(matrix) {\n    this.center.applyMatrix4(matrix);\n    this.radius = this.radius * matrix.getMaxScaleOnAxis();\n    return this;\n  },\n  translate: function translate(offset) {\n    this.center.add(offset);\n    return this;\n  },\n  equals: function equals(sphere) {\n    return sphere.center.equals(this.center) && sphere.radius === this.radius;\n  }\n});\nexport { Sphere };","import { Vector3 } from './Vector3.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Matrix4() {\n  this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n  if (arguments.length > 0) {\n    console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n  }\n}\n\nObject.assign(Matrix4.prototype, {\n  isMatrix4: true,\n  set: function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n    var te = this.elements;\n    te[0] = n11;\n    te[4] = n12;\n    te[8] = n13;\n    te[12] = n14;\n    te[1] = n21;\n    te[5] = n22;\n    te[9] = n23;\n    te[13] = n24;\n    te[2] = n31;\n    te[6] = n32;\n    te[10] = n33;\n    te[14] = n34;\n    te[3] = n41;\n    te[7] = n42;\n    te[11] = n43;\n    te[15] = n44;\n    return this;\n  },\n  identity: function identity() {\n    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    return this;\n  },\n  clone: function clone() {\n    return new Matrix4().fromArray(this.elements);\n  },\n  copy: function copy(m) {\n    var te = this.elements;\n    var me = m.elements;\n    te[0] = me[0];\n    te[1] = me[1];\n    te[2] = me[2];\n    te[3] = me[3];\n    te[4] = me[4];\n    te[5] = me[5];\n    te[6] = me[6];\n    te[7] = me[7];\n    te[8] = me[8];\n    te[9] = me[9];\n    te[10] = me[10];\n    te[11] = me[11];\n    te[12] = me[12];\n    te[13] = me[13];\n    te[14] = me[14];\n    te[15] = me[15];\n    return this;\n  },\n  copyPosition: function copyPosition(m) {\n    var te = this.elements,\n        me = m.elements;\n    te[12] = me[12];\n    te[13] = me[13];\n    te[14] = me[14];\n    return this;\n  },\n  extractBasis: function extractBasis(xAxis, yAxis, zAxis) {\n    xAxis.setFromMatrixColumn(this, 0);\n    yAxis.setFromMatrixColumn(this, 1);\n    zAxis.setFromMatrixColumn(this, 2);\n    return this;\n  },\n  makeBasis: function makeBasis(xAxis, yAxis, zAxis) {\n    this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n    return this;\n  },\n  extractRotation: function () {\n    var v1 = new Vector3();\n    return function extractRotation(m) {\n      // this method does not support reflection matrices\n      var te = this.elements;\n      var me = m.elements;\n      var scaleX = 1 / v1.setFromMatrixColumn(m, 0).length();\n      var scaleY = 1 / v1.setFromMatrixColumn(m, 1).length();\n      var scaleZ = 1 / v1.setFromMatrixColumn(m, 2).length();\n      te[0] = me[0] * scaleX;\n      te[1] = me[1] * scaleX;\n      te[2] = me[2] * scaleX;\n      te[3] = 0;\n      te[4] = me[4] * scaleY;\n      te[5] = me[5] * scaleY;\n      te[6] = me[6] * scaleY;\n      te[7] = 0;\n      te[8] = me[8] * scaleZ;\n      te[9] = me[9] * scaleZ;\n      te[10] = me[10] * scaleZ;\n      te[11] = 0;\n      te[12] = 0;\n      te[13] = 0;\n      te[14] = 0;\n      te[15] = 1;\n      return this;\n    };\n  }(),\n  makeRotationFromEuler: function makeRotationFromEuler(euler) {\n    if (!(euler && euler.isEuler)) {\n      console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n    }\n\n    var te = this.elements;\n    var x = euler.x,\n        y = euler.y,\n        z = euler.z;\n    var a = Math.cos(x),\n        b = Math.sin(x);\n    var c = Math.cos(y),\n        d = Math.sin(y);\n    var e = Math.cos(z),\n        f = Math.sin(z);\n\n    if (euler.order === 'XYZ') {\n      var ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n      te[0] = c * e;\n      te[4] = -c * f;\n      te[8] = d;\n      te[1] = af + be * d;\n      te[5] = ae - bf * d;\n      te[9] = -b * c;\n      te[2] = bf - ae * d;\n      te[6] = be + af * d;\n      te[10] = a * c;\n    } else if (euler.order === 'YXZ') {\n      var ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n      te[0] = ce + df * b;\n      te[4] = de * b - cf;\n      te[8] = a * d;\n      te[1] = a * f;\n      te[5] = a * e;\n      te[9] = -b;\n      te[2] = cf * b - de;\n      te[6] = df + ce * b;\n      te[10] = a * c;\n    } else if (euler.order === 'ZXY') {\n      var ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n      te[0] = ce - df * b;\n      te[4] = -a * f;\n      te[8] = de + cf * b;\n      te[1] = cf + de * b;\n      te[5] = a * e;\n      te[9] = df - ce * b;\n      te[2] = -a * d;\n      te[6] = b;\n      te[10] = a * c;\n    } else if (euler.order === 'ZYX') {\n      var ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n      te[0] = c * e;\n      te[4] = be * d - af;\n      te[8] = ae * d + bf;\n      te[1] = c * f;\n      te[5] = bf * d + ae;\n      te[9] = af * d - be;\n      te[2] = -d;\n      te[6] = b * c;\n      te[10] = a * c;\n    } else if (euler.order === 'YZX') {\n      var ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n      te[0] = c * e;\n      te[4] = bd - ac * f;\n      te[8] = bc * f + ad;\n      te[1] = f;\n      te[5] = a * e;\n      te[9] = -b * e;\n      te[2] = -d * e;\n      te[6] = ad * f + bc;\n      te[10] = ac - bd * f;\n    } else if (euler.order === 'XZY') {\n      var ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n      te[0] = c * e;\n      te[4] = -f;\n      te[8] = d * e;\n      te[1] = ac * f + bd;\n      te[5] = a * e;\n      te[9] = ad * f - bc;\n      te[2] = bc * f - ad;\n      te[6] = b * e;\n      te[10] = bd * f + ac;\n    } // bottom row\n\n\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0; // last column\n\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return this;\n  },\n  makeRotationFromQuaternion: function () {\n    var zero = new Vector3(0, 0, 0);\n    var one = new Vector3(1, 1, 1);\n    return function makeRotationFromQuaternion(q) {\n      return this.compose(zero, q, one);\n    };\n  }(),\n  lookAt: function () {\n    var x = new Vector3();\n    var y = new Vector3();\n    var z = new Vector3();\n    return function lookAt(eye, target, up) {\n      var te = this.elements;\n      z.subVectors(eye, target);\n\n      if (z.lengthSq() === 0) {\n        // eye and target are in the same position\n        z.z = 1;\n      }\n\n      z.normalize();\n      x.crossVectors(up, z);\n\n      if (x.lengthSq() === 0) {\n        // up and z are parallel\n        if (Math.abs(up.z) === 1) {\n          z.x += 0.0001;\n        } else {\n          z.z += 0.0001;\n        }\n\n        z.normalize();\n        x.crossVectors(up, z);\n      }\n\n      x.normalize();\n      y.crossVectors(z, x);\n      te[0] = x.x;\n      te[4] = y.x;\n      te[8] = z.x;\n      te[1] = x.y;\n      te[5] = y.y;\n      te[9] = z.y;\n      te[2] = x.z;\n      te[6] = y.z;\n      te[10] = z.z;\n      return this;\n    };\n  }(),\n  multiply: function multiply(m, n) {\n    if (n !== undefined) {\n      console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n      return this.multiplyMatrices(m, n);\n    }\n\n    return this.multiplyMatrices(this, m);\n  },\n  premultiply: function premultiply(m) {\n    return this.multiplyMatrices(m, this);\n  },\n  multiplyMatrices: function multiplyMatrices(a, b) {\n    var ae = a.elements;\n    var be = b.elements;\n    var te = this.elements;\n    var a11 = ae[0],\n        a12 = ae[4],\n        a13 = ae[8],\n        a14 = ae[12];\n    var a21 = ae[1],\n        a22 = ae[5],\n        a23 = ae[9],\n        a24 = ae[13];\n    var a31 = ae[2],\n        a32 = ae[6],\n        a33 = ae[10],\n        a34 = ae[14];\n    var a41 = ae[3],\n        a42 = ae[7],\n        a43 = ae[11],\n        a44 = ae[15];\n    var b11 = be[0],\n        b12 = be[4],\n        b13 = be[8],\n        b14 = be[12];\n    var b21 = be[1],\n        b22 = be[5],\n        b23 = be[9],\n        b24 = be[13];\n    var b31 = be[2],\n        b32 = be[6],\n        b33 = be[10],\n        b34 = be[14];\n    var b41 = be[3],\n        b42 = be[7],\n        b43 = be[11],\n        b44 = be[15];\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n    return this;\n  },\n  multiplyScalar: function multiplyScalar(s) {\n    var te = this.elements;\n    te[0] *= s;\n    te[4] *= s;\n    te[8] *= s;\n    te[12] *= s;\n    te[1] *= s;\n    te[5] *= s;\n    te[9] *= s;\n    te[13] *= s;\n    te[2] *= s;\n    te[6] *= s;\n    te[10] *= s;\n    te[14] *= s;\n    te[3] *= s;\n    te[7] *= s;\n    te[11] *= s;\n    te[15] *= s;\n    return this;\n  },\n  applyToBufferAttribute: function () {\n    var v1 = new Vector3();\n    return function applyToBufferAttribute(attribute) {\n      for (var i = 0, l = attribute.count; i < l; i++) {\n        v1.x = attribute.getX(i);\n        v1.y = attribute.getY(i);\n        v1.z = attribute.getZ(i);\n        v1.applyMatrix4(this);\n        attribute.setXYZ(i, v1.x, v1.y, v1.z);\n      }\n\n      return attribute;\n    };\n  }(),\n  determinant: function determinant() {\n    var te = this.elements;\n    var n11 = te[0],\n        n12 = te[4],\n        n13 = te[8],\n        n14 = te[12];\n    var n21 = te[1],\n        n22 = te[5],\n        n23 = te[9],\n        n24 = te[13];\n    var n31 = te[2],\n        n32 = te[6],\n        n33 = te[10],\n        n34 = te[14];\n    var n41 = te[3],\n        n42 = te[7],\n        n43 = te[11],\n        n44 = te[15]; //TODO: make this more efficient\n    //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n    return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n  },\n  transpose: function transpose() {\n    var te = this.elements;\n    var tmp;\n    tmp = te[1];\n    te[1] = te[4];\n    te[4] = tmp;\n    tmp = te[2];\n    te[2] = te[8];\n    te[8] = tmp;\n    tmp = te[6];\n    te[6] = te[9];\n    te[9] = tmp;\n    tmp = te[3];\n    te[3] = te[12];\n    te[12] = tmp;\n    tmp = te[7];\n    te[7] = te[13];\n    te[13] = tmp;\n    tmp = te[11];\n    te[11] = te[14];\n    te[14] = tmp;\n    return this;\n  },\n  setPosition: function setPosition(x, y, z) {\n    var te = this.elements;\n\n    if (x.isVector3) {\n      te[12] = x.x;\n      te[13] = x.y;\n      te[14] = x.z;\n    } else {\n      te[12] = x;\n      te[13] = y;\n      te[14] = z;\n    }\n\n    return this;\n  },\n  getInverse: function getInverse(m, throwOnDegenerate) {\n    // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    var te = this.elements,\n        me = m.elements,\n        n11 = me[0],\n        n21 = me[1],\n        n31 = me[2],\n        n41 = me[3],\n        n12 = me[4],\n        n22 = me[5],\n        n32 = me[6],\n        n42 = me[7],\n        n13 = me[8],\n        n23 = me[9],\n        n33 = me[10],\n        n43 = me[11],\n        n14 = me[12],\n        n24 = me[13],\n        n34 = me[14],\n        n44 = me[15],\n        t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n        t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n        t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n        t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n    var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n    if (det === 0) {\n      var msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n\n      if (throwOnDegenerate === true) {\n        throw new Error(msg);\n      } else {\n        console.warn(msg);\n      }\n\n      return this.identity();\n    }\n\n    var detInv = 1 / det;\n    te[0] = t11 * detInv;\n    te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n    te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n    te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n    te[4] = t12 * detInv;\n    te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n    te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n    te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n    te[8] = t13 * detInv;\n    te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n    te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n    te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n    te[12] = t14 * detInv;\n    te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n    te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n    te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n    return this;\n  },\n  scale: function scale(v) {\n    var te = this.elements;\n    var x = v.x,\n        y = v.y,\n        z = v.z;\n    te[0] *= x;\n    te[4] *= y;\n    te[8] *= z;\n    te[1] *= x;\n    te[5] *= y;\n    te[9] *= z;\n    te[2] *= x;\n    te[6] *= y;\n    te[10] *= z;\n    te[3] *= x;\n    te[7] *= y;\n    te[11] *= z;\n    return this;\n  },\n  getMaxScaleOnAxis: function getMaxScaleOnAxis() {\n    var te = this.elements;\n    var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n    var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n    var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n  },\n  makeTranslation: function makeTranslation(x, y, z) {\n    this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n    return this;\n  },\n  makeRotationX: function makeRotationX(theta) {\n    var c = Math.cos(theta),\n        s = Math.sin(theta);\n    this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n    return this;\n  },\n  makeRotationY: function makeRotationY(theta) {\n    var c = Math.cos(theta),\n        s = Math.sin(theta);\n    this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n    return this;\n  },\n  makeRotationZ: function makeRotationZ(theta) {\n    var c = Math.cos(theta),\n        s = Math.sin(theta);\n    this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    return this;\n  },\n  makeRotationAxis: function makeRotationAxis(axis, angle) {\n    // Based on http://www.gamedev.net/reference/articles/article1199.asp\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    var t = 1 - c;\n    var x = axis.x,\n        y = axis.y,\n        z = axis.z;\n    var tx = t * x,\n        ty = t * y;\n    this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n    return this;\n  },\n  makeScale: function makeScale(x, y, z) {\n    this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n    return this;\n  },\n  makeShear: function makeShear(x, y, z) {\n    this.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);\n    return this;\n  },\n  compose: function compose(position, quaternion, scale) {\n    var te = this.elements;\n    var x = quaternion._x,\n        y = quaternion._y,\n        z = quaternion._z,\n        w = quaternion._w;\n    var x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n    var xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n    var yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n    var wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n    var sx = scale.x,\n        sy = scale.y,\n        sz = scale.z;\n    te[0] = (1 - (yy + zz)) * sx;\n    te[1] = (xy + wz) * sx;\n    te[2] = (xz - wy) * sx;\n    te[3] = 0;\n    te[4] = (xy - wz) * sy;\n    te[5] = (1 - (xx + zz)) * sy;\n    te[6] = (yz + wx) * sy;\n    te[7] = 0;\n    te[8] = (xz + wy) * sz;\n    te[9] = (yz - wx) * sz;\n    te[10] = (1 - (xx + yy)) * sz;\n    te[11] = 0;\n    te[12] = position.x;\n    te[13] = position.y;\n    te[14] = position.z;\n    te[15] = 1;\n    return this;\n  },\n  decompose: function () {\n    var vector = new Vector3();\n    var matrix = new Matrix4();\n    return function decompose(position, quaternion, scale) {\n      var te = this.elements;\n      var sx = vector.set(te[0], te[1], te[2]).length();\n      var sy = vector.set(te[4], te[5], te[6]).length();\n      var sz = vector.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n      var det = this.determinant();\n      if (det < 0) sx = -sx;\n      position.x = te[12];\n      position.y = te[13];\n      position.z = te[14]; // scale the rotation part\n\n      matrix.copy(this);\n      var invSX = 1 / sx;\n      var invSY = 1 / sy;\n      var invSZ = 1 / sz;\n      matrix.elements[0] *= invSX;\n      matrix.elements[1] *= invSX;\n      matrix.elements[2] *= invSX;\n      matrix.elements[4] *= invSY;\n      matrix.elements[5] *= invSY;\n      matrix.elements[6] *= invSY;\n      matrix.elements[8] *= invSZ;\n      matrix.elements[9] *= invSZ;\n      matrix.elements[10] *= invSZ;\n      quaternion.setFromRotationMatrix(matrix);\n      scale.x = sx;\n      scale.y = sy;\n      scale.z = sz;\n      return this;\n    };\n  }(),\n  makePerspective: function makePerspective(left, right, top, bottom, near, far) {\n    if (far === undefined) {\n      console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n    }\n\n    var te = this.elements;\n    var x = 2 * near / (right - left);\n    var y = 2 * near / (top - bottom);\n    var a = (right + left) / (right - left);\n    var b = (top + bottom) / (top - bottom);\n    var c = -(far + near) / (far - near);\n    var d = -2 * far * near / (far - near);\n    te[0] = x;\n    te[4] = 0;\n    te[8] = a;\n    te[12] = 0;\n    te[1] = 0;\n    te[5] = y;\n    te[9] = b;\n    te[13] = 0;\n    te[2] = 0;\n    te[6] = 0;\n    te[10] = c;\n    te[14] = d;\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = -1;\n    te[15] = 0;\n    return this;\n  },\n  makeOrthographic: function makeOrthographic(left, right, top, bottom, near, far) {\n    var te = this.elements;\n    var w = 1.0 / (right - left);\n    var h = 1.0 / (top - bottom);\n    var p = 1.0 / (far - near);\n    var x = (right + left) * w;\n    var y = (top + bottom) * h;\n    var z = (far + near) * p;\n    te[0] = 2 * w;\n    te[4] = 0;\n    te[8] = 0;\n    te[12] = -x;\n    te[1] = 0;\n    te[5] = 2 * h;\n    te[9] = 0;\n    te[13] = -y;\n    te[2] = 0;\n    te[6] = 0;\n    te[10] = -2 * p;\n    te[14] = -z;\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    te[15] = 1;\n    return this;\n  },\n  equals: function equals(matrix) {\n    var te = this.elements;\n    var me = matrix.elements;\n\n    for (var i = 0; i < 16; i++) {\n      if (te[i] !== me[i]) return false;\n    }\n\n    return true;\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n\n    for (var i = 0; i < 16; i++) {\n      this.elements[i] = array[i + offset];\n    }\n\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    var te = this.elements;\n    array[offset] = te[0];\n    array[offset + 1] = te[1];\n    array[offset + 2] = te[2];\n    array[offset + 3] = te[3];\n    array[offset + 4] = te[4];\n    array[offset + 5] = te[5];\n    array[offset + 6] = te[6];\n    array[offset + 7] = te[7];\n    array[offset + 8] = te[8];\n    array[offset + 9] = te[9];\n    array[offset + 10] = te[10];\n    array[offset + 11] = te[11];\n    array[offset + 12] = te[12];\n    array[offset + 13] = te[13];\n    array[offset + 14] = te[14];\n    array[offset + 15] = te[15];\n    return array;\n  }\n});\nexport { Matrix4 };","/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\nfunction Vector2(x, y) {\n  this.x = x || 0;\n  this.y = y || 0;\n}\n\nObject.defineProperties(Vector2.prototype, {\n  \"width\": {\n    get: function get() {\n      return this.x;\n    },\n    set: function set(value) {\n      this.x = value;\n    }\n  },\n  \"height\": {\n    get: function get() {\n      return this.y;\n    },\n    set: function set(value) {\n      this.y = value;\n    }\n  }\n});\nObject.assign(Vector2.prototype, {\n  isVector2: true,\n  set: function set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  },\n  setScalar: function setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    return this;\n  },\n  setX: function setX(x) {\n    this.x = x;\n    return this;\n  },\n  setY: function setY(y) {\n    this.y = y;\n    return this;\n  },\n  setComponent: function setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n\n      case 1:\n        this.y = value;\n        break;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n\n    return this;\n  },\n  getComponent: function getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n\n      case 1:\n        return this.y;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  },\n  clone: function clone() {\n    return new this.constructor(this.x, this.y);\n  },\n  copy: function copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    return this;\n  },\n  add: function add(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n    return this;\n  },\n  addScalar: function addScalar(s) {\n    this.x += s;\n    this.y += s;\n    return this;\n  },\n  addVectors: function addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    return this;\n  },\n  addScaledVector: function addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    return this;\n  },\n  sub: function sub(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n    return this;\n  },\n  subScalar: function subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    return this;\n  },\n  subVectors: function subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    return this;\n  },\n  multiply: function multiply(v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    return this;\n  },\n  multiplyScalar: function multiplyScalar(scalar) {\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  },\n  divide: function divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    return this;\n  },\n  divideScalar: function divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  },\n  applyMatrix3: function applyMatrix3(m) {\n    var x = this.x,\n        y = this.y;\n    var e = m.elements;\n    this.x = e[0] * x + e[3] * y + e[6];\n    this.y = e[1] * x + e[4] * y + e[7];\n    return this;\n  },\n  min: function min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    return this;\n  },\n  max: function max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    return this;\n  },\n  clamp: function clamp(min, max) {\n    // assumes min < max, componentwise\n    this.x = Math.max(min.x, Math.min(max.x, this.x));\n    this.y = Math.max(min.y, Math.min(max.y, this.y));\n    return this;\n  },\n  clampScalar: function clampScalar(minVal, maxVal) {\n    this.x = Math.max(minVal, Math.min(maxVal, this.x));\n    this.y = Math.max(minVal, Math.min(maxVal, this.y));\n    return this;\n  },\n  clampLength: function clampLength(min, max) {\n    var length = this.length();\n    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n  },\n  floor: function floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    return this;\n  },\n  ceil: function ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    return this;\n  },\n  round: function round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    return this;\n  },\n  roundToZero: function roundToZero() {\n    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n    return this;\n  },\n  negate: function negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    return this;\n  },\n  dot: function dot(v) {\n    return this.x * v.x + this.y * v.y;\n  },\n  cross: function cross(v) {\n    return this.x * v.y - this.y * v.x;\n  },\n  lengthSq: function lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  },\n  length: function length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  },\n  manhattanLength: function manhattanLength() {\n    return Math.abs(this.x) + Math.abs(this.y);\n  },\n  normalize: function normalize() {\n    return this.divideScalar(this.length() || 1);\n  },\n  angle: function angle() {\n    // computes the angle in radians with respect to the positive x-axis\n    var angle = Math.atan2(this.y, this.x);\n    if (angle < 0) angle += 2 * Math.PI;\n    return angle;\n  },\n  distanceTo: function distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  },\n  distanceToSquared: function distanceToSquared(v) {\n    var dx = this.x - v.x,\n        dy = this.y - v.y;\n    return dx * dx + dy * dy;\n  },\n  manhattanDistanceTo: function manhattanDistanceTo(v) {\n    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n  },\n  setLength: function setLength(length) {\n    return this.normalize().multiplyScalar(length);\n  },\n  lerp: function lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    return this;\n  },\n  lerpVectors: function lerpVectors(v1, v2, alpha) {\n    return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n  },\n  equals: function equals(v) {\n    return v.x === this.x && v.y === this.y;\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    return array;\n  },\n  fromBufferAttribute: function fromBufferAttribute(attribute, index, offset) {\n    if (offset !== undefined) {\n      console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n    }\n\n    this.x = attribute.getX(index);\n    this.y = attribute.getY(index);\n    return this;\n  },\n  rotateAround: function rotateAround(center, angle) {\n    var c = Math.cos(angle),\n        s = Math.sin(angle);\n    var x = this.x - center.x;\n    var y = this.y - center.y;\n    this.x = x * c - y * s + center.x;\n    this.y = x * s + y * c + center.y;\n    return this;\n  }\n});\nexport { Vector2 };","import { Quaternion } from './Quaternion.js';\nimport { Vector3 } from './Vector3.js';\nimport { Matrix4 } from './Matrix4.js';\nimport { _Math } from './Math.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nfunction Euler(x, y, z, order) {\n  this._x = x || 0;\n  this._y = y || 0;\n  this._z = z || 0;\n  this._order = order || Euler.DefaultOrder;\n}\n\nEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\nEuler.DefaultOrder = 'XYZ';\nObject.defineProperties(Euler.prototype, {\n  x: {\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      this._x = value;\n\n      this._onChangeCallback();\n    }\n  },\n  y: {\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      this._y = value;\n\n      this._onChangeCallback();\n    }\n  },\n  z: {\n    get: function get() {\n      return this._z;\n    },\n    set: function set(value) {\n      this._z = value;\n\n      this._onChangeCallback();\n    }\n  },\n  order: {\n    get: function get() {\n      return this._order;\n    },\n    set: function set(value) {\n      this._order = value;\n\n      this._onChangeCallback();\n    }\n  }\n});\nObject.assign(Euler.prototype, {\n  isEuler: true,\n  set: function set(x, y, z, order) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._order = order || this._order;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor(this._x, this._y, this._z, this._order);\n  },\n  copy: function copy(euler) {\n    this._x = euler._x;\n    this._y = euler._y;\n    this._z = euler._z;\n    this._order = euler._order;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  setFromRotationMatrix: function setFromRotationMatrix(m, order, update) {\n    var clamp = _Math.clamp; // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    var te = m.elements;\n    var m11 = te[0],\n        m12 = te[4],\n        m13 = te[8];\n    var m21 = te[1],\n        m22 = te[5],\n        m23 = te[9];\n    var m31 = te[2],\n        m32 = te[6],\n        m33 = te[10];\n    order = order || this._order;\n\n    if (order === 'XYZ') {\n      this._y = Math.asin(clamp(m13, -1, 1));\n\n      if (Math.abs(m13) < 0.99999) {\n        this._x = Math.atan2(-m23, m33);\n        this._z = Math.atan2(-m12, m11);\n      } else {\n        this._x = Math.atan2(m32, m22);\n        this._z = 0;\n      }\n    } else if (order === 'YXZ') {\n      this._x = Math.asin(-clamp(m23, -1, 1));\n\n      if (Math.abs(m23) < 0.99999) {\n        this._y = Math.atan2(m13, m33);\n        this._z = Math.atan2(m21, m22);\n      } else {\n        this._y = Math.atan2(-m31, m11);\n        this._z = 0;\n      }\n    } else if (order === 'ZXY') {\n      this._x = Math.asin(clamp(m32, -1, 1));\n\n      if (Math.abs(m32) < 0.99999) {\n        this._y = Math.atan2(-m31, m33);\n        this._z = Math.atan2(-m12, m22);\n      } else {\n        this._y = 0;\n        this._z = Math.atan2(m21, m11);\n      }\n    } else if (order === 'ZYX') {\n      this._y = Math.asin(-clamp(m31, -1, 1));\n\n      if (Math.abs(m31) < 0.99999) {\n        this._x = Math.atan2(m32, m33);\n        this._z = Math.atan2(m21, m11);\n      } else {\n        this._x = 0;\n        this._z = Math.atan2(-m12, m22);\n      }\n    } else if (order === 'YZX') {\n      this._z = Math.asin(clamp(m21, -1, 1));\n\n      if (Math.abs(m21) < 0.99999) {\n        this._x = Math.atan2(-m23, m22);\n        this._y = Math.atan2(-m31, m11);\n      } else {\n        this._x = 0;\n        this._y = Math.atan2(m13, m33);\n      }\n    } else if (order === 'XZY') {\n      this._z = Math.asin(-clamp(m12, -1, 1));\n\n      if (Math.abs(m12) < 0.99999) {\n        this._x = Math.atan2(m32, m22);\n        this._y = Math.atan2(m13, m11);\n      } else {\n        this._x = Math.atan2(-m23, m33);\n        this._y = 0;\n      }\n    } else {\n      console.warn('THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order);\n    }\n\n    this._order = order;\n    if (update !== false) this._onChangeCallback();\n    return this;\n  },\n  setFromQuaternion: function () {\n    var matrix = new Matrix4();\n    return function setFromQuaternion(q, order, update) {\n      matrix.makeRotationFromQuaternion(q);\n      return this.setFromRotationMatrix(matrix, order, update);\n    };\n  }(),\n  setFromVector3: function setFromVector3(v, order) {\n    return this.set(v.x, v.y, v.z, order || this._order);\n  },\n  reorder: function () {\n    // WARNING: this discards revolution information -bhouston\n    var q = new Quaternion();\n    return function reorder(newOrder) {\n      q.setFromEuler(this);\n      return this.setFromQuaternion(q, newOrder);\n    };\n  }(),\n  equals: function equals(euler) {\n    return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n  },\n  fromArray: function fromArray(array) {\n    this._x = array[0];\n    this._y = array[1];\n    this._z = array[2];\n    if (array[3] !== undefined) this._order = array[3];\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._order;\n    return array;\n  },\n  toVector3: function toVector3(optionalResult) {\n    if (optionalResult) {\n      return optionalResult.set(this._x, this._y, this._z);\n    } else {\n      return new Vector3(this._x, this._y, this._z);\n    }\n  },\n  _onChange: function _onChange(callback) {\n    this._onChangeCallback = callback;\n    return this;\n  },\n  _onChangeCallback: function _onChangeCallback() {}\n});\nexport { Euler };","/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction Layers() {\n  this.mask = 1 | 0;\n}\n\nObject.assign(Layers.prototype, {\n  set: function set(channel) {\n    this.mask = 1 << channel | 0;\n  },\n  enable: function enable(channel) {\n    this.mask |= 1 << channel | 0;\n  },\n  toggle: function toggle(channel) {\n    this.mask ^= 1 << channel | 0;\n  },\n  disable: function disable(channel) {\n    this.mask &= ~(1 << channel | 0);\n  },\n  test: function test(layers) {\n    return (this.mask & layers.mask) !== 0;\n  }\n});\nexport { Layers };","export var REVISION = '106';\nexport var MOUSE = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2\n};\nexport var CullFaceNone = 0;\nexport var CullFaceBack = 1;\nexport var CullFaceFront = 2;\nexport var CullFaceFrontBack = 3;\nexport var FrontFaceDirectionCW = 0;\nexport var FrontFaceDirectionCCW = 1;\nexport var BasicShadowMap = 0;\nexport var PCFShadowMap = 1;\nexport var PCFSoftShadowMap = 2;\nexport var FrontSide = 0;\nexport var BackSide = 1;\nexport var DoubleSide = 2;\nexport var FlatShading = 1;\nexport var SmoothShading = 2;\nexport var NoColors = 0;\nexport var FaceColors = 1;\nexport var VertexColors = 2;\nexport var NoBlending = 0;\nexport var NormalBlending = 1;\nexport var AdditiveBlending = 2;\nexport var SubtractiveBlending = 3;\nexport var MultiplyBlending = 4;\nexport var CustomBlending = 5;\nexport var AddEquation = 100;\nexport var SubtractEquation = 101;\nexport var ReverseSubtractEquation = 102;\nexport var MinEquation = 103;\nexport var MaxEquation = 104;\nexport var ZeroFactor = 200;\nexport var OneFactor = 201;\nexport var SrcColorFactor = 202;\nexport var OneMinusSrcColorFactor = 203;\nexport var SrcAlphaFactor = 204;\nexport var OneMinusSrcAlphaFactor = 205;\nexport var DstAlphaFactor = 206;\nexport var OneMinusDstAlphaFactor = 207;\nexport var DstColorFactor = 208;\nexport var OneMinusDstColorFactor = 209;\nexport var SrcAlphaSaturateFactor = 210;\nexport var NeverDepth = 0;\nexport var AlwaysDepth = 1;\nexport var LessDepth = 2;\nexport var LessEqualDepth = 3;\nexport var EqualDepth = 4;\nexport var GreaterEqualDepth = 5;\nexport var GreaterDepth = 6;\nexport var NotEqualDepth = 7;\nexport var MultiplyOperation = 0;\nexport var MixOperation = 1;\nexport var AddOperation = 2;\nexport var NoToneMapping = 0;\nexport var LinearToneMapping = 1;\nexport var ReinhardToneMapping = 2;\nexport var Uncharted2ToneMapping = 3;\nexport var CineonToneMapping = 4;\nexport var ACESFilmicToneMapping = 5;\nexport var UVMapping = 300;\nexport var CubeReflectionMapping = 301;\nexport var CubeRefractionMapping = 302;\nexport var EquirectangularReflectionMapping = 303;\nexport var EquirectangularRefractionMapping = 304;\nexport var SphericalReflectionMapping = 305;\nexport var CubeUVReflectionMapping = 306;\nexport var CubeUVRefractionMapping = 307;\nexport var RepeatWrapping = 1000;\nexport var ClampToEdgeWrapping = 1001;\nexport var MirroredRepeatWrapping = 1002;\nexport var NearestFilter = 1003;\nexport var NearestMipMapNearestFilter = 1004;\nexport var NearestMipMapLinearFilter = 1005;\nexport var LinearFilter = 1006;\nexport var LinearMipMapNearestFilter = 1007;\nexport var LinearMipMapLinearFilter = 1008;\nexport var UnsignedByteType = 1009;\nexport var ByteType = 1010;\nexport var ShortType = 1011;\nexport var UnsignedShortType = 1012;\nexport var IntType = 1013;\nexport var UnsignedIntType = 1014;\nexport var FloatType = 1015;\nexport var HalfFloatType = 1016;\nexport var UnsignedShort4444Type = 1017;\nexport var UnsignedShort5551Type = 1018;\nexport var UnsignedShort565Type = 1019;\nexport var UnsignedInt248Type = 1020;\nexport var AlphaFormat = 1021;\nexport var RGBFormat = 1022;\nexport var RGBAFormat = 1023;\nexport var LuminanceFormat = 1024;\nexport var LuminanceAlphaFormat = 1025;\nexport var RGBEFormat = RGBAFormat;\nexport var DepthFormat = 1026;\nexport var DepthStencilFormat = 1027;\nexport var RedFormat = 1028;\nexport var RGB_S3TC_DXT1_Format = 33776;\nexport var RGBA_S3TC_DXT1_Format = 33777;\nexport var RGBA_S3TC_DXT3_Format = 33778;\nexport var RGBA_S3TC_DXT5_Format = 33779;\nexport var RGB_PVRTC_4BPPV1_Format = 35840;\nexport var RGB_PVRTC_2BPPV1_Format = 35841;\nexport var RGBA_PVRTC_4BPPV1_Format = 35842;\nexport var RGBA_PVRTC_2BPPV1_Format = 35843;\nexport var RGB_ETC1_Format = 36196;\nexport var RGBA_ASTC_4x4_Format = 37808;\nexport var RGBA_ASTC_5x4_Format = 37809;\nexport var RGBA_ASTC_5x5_Format = 37810;\nexport var RGBA_ASTC_6x5_Format = 37811;\nexport var RGBA_ASTC_6x6_Format = 37812;\nexport var RGBA_ASTC_8x5_Format = 37813;\nexport var RGBA_ASTC_8x6_Format = 37814;\nexport var RGBA_ASTC_8x8_Format = 37815;\nexport var RGBA_ASTC_10x5_Format = 37816;\nexport var RGBA_ASTC_10x6_Format = 37817;\nexport var RGBA_ASTC_10x8_Format = 37818;\nexport var RGBA_ASTC_10x10_Format = 37819;\nexport var RGBA_ASTC_12x10_Format = 37820;\nexport var RGBA_ASTC_12x12_Format = 37821;\nexport var LoopOnce = 2200;\nexport var LoopRepeat = 2201;\nexport var LoopPingPong = 2202;\nexport var InterpolateDiscrete = 2300;\nexport var InterpolateLinear = 2301;\nexport var InterpolateSmooth = 2302;\nexport var ZeroCurvatureEnding = 2400;\nexport var ZeroSlopeEnding = 2401;\nexport var WrapAroundEnding = 2402;\nexport var TrianglesDrawMode = 0;\nexport var TriangleStripDrawMode = 1;\nexport var TriangleFanDrawMode = 2;\nexport var LinearEncoding = 3000;\nexport var sRGBEncoding = 3001;\nexport var GammaEncoding = 3007;\nexport var RGBEEncoding = 3002;\nexport var LogLuvEncoding = 3003;\nexport var RGBM7Encoding = 3004;\nexport var RGBM16Encoding = 3005;\nexport var RGBDEncoding = 3006;\nexport var BasicDepthPacking = 3200;\nexport var RGBADepthPacking = 3201;\nexport var TangentSpaceNormalMap = 0;\nexport var ObjectSpaceNormalMap = 1;","import { Quaternion } from '../math/Quaternion.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { EventDispatcher } from './EventDispatcher.js';\nimport { Euler } from '../math/Euler.js';\nimport { Layers } from './Layers.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport { _Math } from '../math/Math.js';\nimport { TrianglesDrawMode } from '../constants.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author elephantatwork / www.elephantatwork.ch\n */\n\nvar object3DId = 0;\n\nfunction Object3D() {\n  Object.defineProperty(this, 'id', {\n    value: object3DId++\n  });\n  this.uuid = _Math.generateUUID();\n  this.name = '';\n  this.type = 'Object3D';\n  this.parent = null;\n  this.children = [];\n  this.up = Object3D.DefaultUp.clone();\n  var position = new Vector3();\n  var rotation = new Euler();\n  var quaternion = new Quaternion();\n  var scale = new Vector3(1, 1, 1);\n\n  function onRotationChange() {\n    quaternion.setFromEuler(rotation, false);\n  }\n\n  function onQuaternionChange() {\n    rotation.setFromQuaternion(quaternion, undefined, false);\n  }\n\n  rotation._onChange(onRotationChange);\n\n  quaternion._onChange(onQuaternionChange);\n\n  Object.defineProperties(this, {\n    position: {\n      configurable: true,\n      enumerable: true,\n      value: position\n    },\n    rotation: {\n      configurable: true,\n      enumerable: true,\n      value: rotation\n    },\n    quaternion: {\n      configurable: true,\n      enumerable: true,\n      value: quaternion\n    },\n    scale: {\n      configurable: true,\n      enumerable: true,\n      value: scale\n    },\n    modelViewMatrix: {\n      value: new Matrix4()\n    },\n    normalMatrix: {\n      value: new Matrix3()\n    }\n  });\n  this.matrix = new Matrix4();\n  this.matrixWorld = new Matrix4();\n  this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n  this.matrixWorldNeedsUpdate = false;\n  this.layers = new Layers();\n  this.visible = true;\n  this.castShadow = false;\n  this.receiveShadow = false;\n  this.frustumCulled = true;\n  this.renderOrder = 0;\n  this.userData = {};\n}\n\nObject3D.DefaultUp = new Vector3(0, 1, 0);\nObject3D.DefaultMatrixAutoUpdate = true;\nObject3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n  constructor: Object3D,\n  isObject3D: true,\n  onBeforeRender: function onBeforeRender() {},\n  onAfterRender: function onAfterRender() {},\n  applyMatrix: function applyMatrix(matrix) {\n    if (this.matrixAutoUpdate) this.updateMatrix();\n    this.matrix.premultiply(matrix);\n    this.matrix.decompose(this.position, this.quaternion, this.scale);\n  },\n  applyQuaternion: function applyQuaternion(q) {\n    this.quaternion.premultiply(q);\n    return this;\n  },\n  setRotationFromAxisAngle: function setRotationFromAxisAngle(axis, angle) {\n    // assumes axis is normalized\n    this.quaternion.setFromAxisAngle(axis, angle);\n  },\n  setRotationFromEuler: function setRotationFromEuler(euler) {\n    this.quaternion.setFromEuler(euler, true);\n  },\n  setRotationFromMatrix: function setRotationFromMatrix(m) {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    this.quaternion.setFromRotationMatrix(m);\n  },\n  setRotationFromQuaternion: function setRotationFromQuaternion(q) {\n    // assumes q is normalized\n    this.quaternion.copy(q);\n  },\n  rotateOnAxis: function () {\n    // rotate object on axis in object space\n    // axis is assumed to be normalized\n    var q1 = new Quaternion();\n    return function rotateOnAxis(axis, angle) {\n      q1.setFromAxisAngle(axis, angle);\n      this.quaternion.multiply(q1);\n      return this;\n    };\n  }(),\n  rotateOnWorldAxis: function () {\n    // rotate object on axis in world space\n    // axis is assumed to be normalized\n    // method assumes no rotated parent\n    var q1 = new Quaternion();\n    return function rotateOnWorldAxis(axis, angle) {\n      q1.setFromAxisAngle(axis, angle);\n      this.quaternion.premultiply(q1);\n      return this;\n    };\n  }(),\n  rotateX: function () {\n    var v1 = new Vector3(1, 0, 0);\n    return function rotateX(angle) {\n      return this.rotateOnAxis(v1, angle);\n    };\n  }(),\n  rotateY: function () {\n    var v1 = new Vector3(0, 1, 0);\n    return function rotateY(angle) {\n      return this.rotateOnAxis(v1, angle);\n    };\n  }(),\n  rotateZ: function () {\n    var v1 = new Vector3(0, 0, 1);\n    return function rotateZ(angle) {\n      return this.rotateOnAxis(v1, angle);\n    };\n  }(),\n  translateOnAxis: function () {\n    // translate object by distance along axis in object space\n    // axis is assumed to be normalized\n    var v1 = new Vector3();\n    return function translateOnAxis(axis, distance) {\n      v1.copy(axis).applyQuaternion(this.quaternion);\n      this.position.add(v1.multiplyScalar(distance));\n      return this;\n    };\n  }(),\n  translateX: function () {\n    var v1 = new Vector3(1, 0, 0);\n    return function translateX(distance) {\n      return this.translateOnAxis(v1, distance);\n    };\n  }(),\n  translateY: function () {\n    var v1 = new Vector3(0, 1, 0);\n    return function translateY(distance) {\n      return this.translateOnAxis(v1, distance);\n    };\n  }(),\n  translateZ: function () {\n    var v1 = new Vector3(0, 0, 1);\n    return function translateZ(distance) {\n      return this.translateOnAxis(v1, distance);\n    };\n  }(),\n  localToWorld: function localToWorld(vector) {\n    return vector.applyMatrix4(this.matrixWorld);\n  },\n  worldToLocal: function () {\n    var m1 = new Matrix4();\n    return function worldToLocal(vector) {\n      return vector.applyMatrix4(m1.getInverse(this.matrixWorld));\n    };\n  }(),\n  lookAt: function () {\n    // This method does not support objects having non-uniformly-scaled parent(s)\n    var q1 = new Quaternion();\n    var m1 = new Matrix4();\n    var target = new Vector3();\n    var position = new Vector3();\n    return function lookAt(x, y, z) {\n      if (x.isVector3) {\n        target.copy(x);\n      } else {\n        target.set(x, y, z);\n      }\n\n      var parent = this.parent;\n      this.updateWorldMatrix(true, false);\n      position.setFromMatrixPosition(this.matrixWorld);\n\n      if (this.isCamera || this.isLight) {\n        m1.lookAt(position, target, this.up);\n      } else {\n        m1.lookAt(target, position, this.up);\n      }\n\n      this.quaternion.setFromRotationMatrix(m1);\n\n      if (parent) {\n        m1.extractRotation(parent.matrixWorld);\n        q1.setFromRotationMatrix(m1);\n        this.quaternion.premultiply(q1.inverse());\n      }\n    };\n  }(),\n  add: function add(object) {\n    if (arguments.length > 1) {\n      for (var i = 0; i < arguments.length; i++) {\n        this.add(arguments[i]);\n      }\n\n      return this;\n    }\n\n    if (object === this) {\n      console.error(\"THREE.Object3D.add: object can't be added as a child of itself.\", object);\n      return this;\n    }\n\n    if (object && object.isObject3D) {\n      if (object.parent !== null) {\n        object.parent.remove(object);\n      }\n\n      object.parent = this;\n      this.children.push(object);\n      object.dispatchEvent({\n        type: 'added'\n      });\n    } else {\n      console.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object);\n    }\n\n    return this;\n  },\n  remove: function remove(object) {\n    if (arguments.length > 1) {\n      for (var i = 0; i < arguments.length; i++) {\n        this.remove(arguments[i]);\n      }\n\n      return this;\n    }\n\n    var index = this.children.indexOf(object);\n\n    if (index !== -1) {\n      object.parent = null;\n      this.children.splice(index, 1);\n      object.dispatchEvent({\n        type: 'removed'\n      });\n    }\n\n    return this;\n  },\n  attach: function () {\n    // adds object as a child of this, while maintaining the object's world transform\n    var m = new Matrix4();\n    return function attach(object) {\n      this.updateWorldMatrix(true, false);\n      m.getInverse(this.matrixWorld);\n\n      if (object.parent !== null) {\n        object.parent.updateWorldMatrix(true, false);\n        m.multiply(object.parent.matrixWorld);\n      }\n\n      object.applyMatrix(m);\n      object.updateWorldMatrix(false, false);\n      this.add(object);\n      return this;\n    };\n  }(),\n  getObjectById: function getObjectById(id) {\n    return this.getObjectByProperty('id', id);\n  },\n  getObjectByName: function getObjectByName(name) {\n    return this.getObjectByProperty('name', name);\n  },\n  getObjectByProperty: function getObjectByProperty(name, value) {\n    if (this[name] === value) return this;\n\n    for (var i = 0, l = this.children.length; i < l; i++) {\n      var child = this.children[i];\n      var object = child.getObjectByProperty(name, value);\n\n      if (object !== undefined) {\n        return object;\n      }\n    }\n\n    return undefined;\n  },\n  getWorldPosition: function getWorldPosition(target) {\n    if (target === undefined) {\n      console.warn('THREE.Object3D: .getWorldPosition() target is now required');\n      target = new Vector3();\n    }\n\n    this.updateMatrixWorld(true);\n    return target.setFromMatrixPosition(this.matrixWorld);\n  },\n  getWorldQuaternion: function () {\n    var position = new Vector3();\n    var scale = new Vector3();\n    return function getWorldQuaternion(target) {\n      if (target === undefined) {\n        console.warn('THREE.Object3D: .getWorldQuaternion() target is now required');\n        target = new Quaternion();\n      }\n\n      this.updateMatrixWorld(true);\n      this.matrixWorld.decompose(position, target, scale);\n      return target;\n    };\n  }(),\n  getWorldScale: function () {\n    var position = new Vector3();\n    var quaternion = new Quaternion();\n    return function getWorldScale(target) {\n      if (target === undefined) {\n        console.warn('THREE.Object3D: .getWorldScale() target is now required');\n        target = new Vector3();\n      }\n\n      this.updateMatrixWorld(true);\n      this.matrixWorld.decompose(position, quaternion, target);\n      return target;\n    };\n  }(),\n  getWorldDirection: function getWorldDirection(target) {\n    if (target === undefined) {\n      console.warn('THREE.Object3D: .getWorldDirection() target is now required');\n      target = new Vector3();\n    }\n\n    this.updateMatrixWorld(true);\n    var e = this.matrixWorld.elements;\n    return target.set(e[8], e[9], e[10]).normalize();\n  },\n  raycast: function raycast() {},\n  traverse: function traverse(callback) {\n    callback(this);\n    var children = this.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      children[i].traverse(callback);\n    }\n  },\n  traverseVisible: function traverseVisible(callback) {\n    if (this.visible === false) return;\n    callback(this);\n    var children = this.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      children[i].traverseVisible(callback);\n    }\n  },\n  traverseAncestors: function traverseAncestors(callback) {\n    var parent = this.parent;\n\n    if (parent !== null) {\n      callback(parent);\n      parent.traverseAncestors(callback);\n    }\n  },\n  updateMatrix: function updateMatrix() {\n    this.matrix.compose(this.position, this.quaternion, this.scale);\n    this.matrixWorldNeedsUpdate = true;\n  },\n  updateMatrixWorld: function updateMatrixWorld(force) {\n    if (this.matrixAutoUpdate) this.updateMatrix();\n\n    if (this.matrixWorldNeedsUpdate || force) {\n      if (this.parent === null) {\n        this.matrixWorld.copy(this.matrix);\n      } else {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n      }\n\n      this.matrixWorldNeedsUpdate = false;\n      force = true;\n    } // update children\n\n\n    var children = this.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      children[i].updateMatrixWorld(force);\n    }\n  },\n  updateWorldMatrix: function updateWorldMatrix(updateParents, updateChildren) {\n    var parent = this.parent;\n\n    if (updateParents === true && parent !== null) {\n      parent.updateWorldMatrix(true, false);\n    }\n\n    if (this.matrixAutoUpdate) this.updateMatrix();\n\n    if (this.parent === null) {\n      this.matrixWorld.copy(this.matrix);\n    } else {\n      this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n    } // update children\n\n\n    if (updateChildren === true) {\n      var children = this.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        children[i].updateWorldMatrix(false, true);\n      }\n    }\n  },\n  toJSON: function toJSON(meta) {\n    // meta is a string when called from JSON.stringify\n    var isRootObject = meta === undefined || typeof meta === 'string';\n    var output = {}; // meta is a hash used to collect geometries, materials.\n    // not providing it implies that this is the root object\n    // being serialized.\n\n    if (isRootObject) {\n      // initialize meta obj\n      meta = {\n        geometries: {},\n        materials: {},\n        textures: {},\n        images: {},\n        shapes: {}\n      };\n      output.metadata = {\n        version: 4.5,\n        type: 'Object',\n        generator: 'Object3D.toJSON'\n      };\n    } // standard Object3D serialization\n\n\n    var object = {};\n    object.uuid = this.uuid;\n    object.type = this.type;\n    if (this.name !== '') object.name = this.name;\n    if (this.castShadow === true) object.castShadow = true;\n    if (this.receiveShadow === true) object.receiveShadow = true;\n    if (this.visible === false) object.visible = false;\n    if (this.frustumCulled === false) object.frustumCulled = false;\n    if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n    if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n    object.layers = this.layers.mask;\n    object.matrix = this.matrix.toArray();\n    if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n    if (this.isMesh && this.drawMode !== TrianglesDrawMode) object.drawMode = this.drawMode; //\n\n    function serialize(library, element) {\n      if (library[element.uuid] === undefined) {\n        library[element.uuid] = element.toJSON(meta);\n      }\n\n      return element.uuid;\n    }\n\n    if (this.isMesh || this.isLine || this.isPoints) {\n      object.geometry = serialize(meta.geometries, this.geometry);\n      var parameters = this.geometry.parameters;\n\n      if (parameters !== undefined && parameters.shapes !== undefined) {\n        var shapes = parameters.shapes;\n\n        if (Array.isArray(shapes)) {\n          for (var i = 0, l = shapes.length; i < l; i++) {\n            var shape = shapes[i];\n            serialize(meta.shapes, shape);\n          }\n        } else {\n          serialize(meta.shapes, shapes);\n        }\n      }\n    }\n\n    if (this.material !== undefined) {\n      if (Array.isArray(this.material)) {\n        var uuids = [];\n\n        for (var i = 0, l = this.material.length; i < l; i++) {\n          uuids.push(serialize(meta.materials, this.material[i]));\n        }\n\n        object.material = uuids;\n      } else {\n        object.material = serialize(meta.materials, this.material);\n      }\n    } //\n\n\n    if (this.children.length > 0) {\n      object.children = [];\n\n      for (var i = 0; i < this.children.length; i++) {\n        object.children.push(this.children[i].toJSON(meta).object);\n      }\n    }\n\n    if (isRootObject) {\n      var geometries = extractFromCache(meta.geometries);\n      var materials = extractFromCache(meta.materials);\n      var textures = extractFromCache(meta.textures);\n      var images = extractFromCache(meta.images);\n      var shapes = extractFromCache(meta.shapes);\n      if (geometries.length > 0) output.geometries = geometries;\n      if (materials.length > 0) output.materials = materials;\n      if (textures.length > 0) output.textures = textures;\n      if (images.length > 0) output.images = images;\n      if (shapes.length > 0) output.shapes = shapes;\n    }\n\n    output.object = object;\n    return output; // extract data from the cache hash\n    // remove metadata on each item\n    // and return as array\n\n    function extractFromCache(cache) {\n      var values = [];\n\n      for (var key in cache) {\n        var data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n\n      return values;\n    }\n  },\n  clone: function clone(recursive) {\n    return new this.constructor().copy(this, recursive);\n  },\n  copy: function copy(source, recursive) {\n    if (recursive === undefined) recursive = true;\n    this.name = source.name;\n    this.up.copy(source.up);\n    this.position.copy(source.position);\n    this.quaternion.copy(source.quaternion);\n    this.scale.copy(source.scale);\n    this.matrix.copy(source.matrix);\n    this.matrixWorld.copy(source.matrixWorld);\n    this.matrixAutoUpdate = source.matrixAutoUpdate;\n    this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n    this.layers.mask = source.layers.mask;\n    this.visible = source.visible;\n    this.castShadow = source.castShadow;\n    this.receiveShadow = source.receiveShadow;\n    this.frustumCulled = source.frustumCulled;\n    this.renderOrder = source.renderOrder;\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n\n    if (recursive === true) {\n      for (var i = 0; i < source.children.length; i++) {\n        var child = source.children[i];\n        this.add(child.clone());\n      }\n    }\n\n    return this;\n  }\n});\nexport { Object3D };","import { EventDispatcher } from './EventDispatcher.js';\nimport { Face3 } from './Face3.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport { Sphere } from '../math/Sphere.js';\nimport { Box3 } from '../math/Box3.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\nimport { Object3D } from './Object3D.js';\nimport { _Math } from '../math/Math.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author bhouston / http://clara.io\n */\n\nvar geometryId = 0; // Geometry uses even numbers as Id\n\nfunction Geometry() {\n  Object.defineProperty(this, 'id', {\n    value: geometryId += 2\n  });\n  this.uuid = _Math.generateUUID();\n  this.name = '';\n  this.type = 'Geometry';\n  this.vertices = [];\n  this.colors = [];\n  this.faces = [];\n  this.faceVertexUvs = [[]];\n  this.morphTargets = [];\n  this.morphNormals = [];\n  this.skinWeights = [];\n  this.skinIndices = [];\n  this.lineDistances = [];\n  this.boundingBox = null;\n  this.boundingSphere = null; // update flags\n\n  this.elementsNeedUpdate = false;\n  this.verticesNeedUpdate = false;\n  this.uvsNeedUpdate = false;\n  this.normalsNeedUpdate = false;\n  this.colorsNeedUpdate = false;\n  this.lineDistancesNeedUpdate = false;\n  this.groupsNeedUpdate = false;\n}\n\nGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n  constructor: Geometry,\n  isGeometry: true,\n  applyMatrix: function applyMatrix(matrix) {\n    var normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\n    for (var i = 0, il = this.vertices.length; i < il; i++) {\n      var vertex = this.vertices[i];\n      vertex.applyMatrix4(matrix);\n    }\n\n    for (var i = 0, il = this.faces.length; i < il; i++) {\n      var face = this.faces[i];\n      face.normal.applyMatrix3(normalMatrix).normalize();\n\n      for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n        face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n      }\n    }\n\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n\n    this.verticesNeedUpdate = true;\n    this.normalsNeedUpdate = true;\n    return this;\n  },\n  rotateX: function () {\n    // rotate geometry around world x-axis\n    var m1 = new Matrix4();\n    return function rotateX(angle) {\n      m1.makeRotationX(angle);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  rotateY: function () {\n    // rotate geometry around world y-axis\n    var m1 = new Matrix4();\n    return function rotateY(angle) {\n      m1.makeRotationY(angle);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  rotateZ: function () {\n    // rotate geometry around world z-axis\n    var m1 = new Matrix4();\n    return function rotateZ(angle) {\n      m1.makeRotationZ(angle);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  translate: function () {\n    // translate geometry\n    var m1 = new Matrix4();\n    return function translate(x, y, z) {\n      m1.makeTranslation(x, y, z);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  scale: function () {\n    // scale geometry\n    var m1 = new Matrix4();\n    return function scale(x, y, z) {\n      m1.makeScale(x, y, z);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  lookAt: function () {\n    var obj = new Object3D();\n    return function lookAt(vector) {\n      obj.lookAt(vector);\n      obj.updateMatrix();\n      this.applyMatrix(obj.matrix);\n    };\n  }(),\n  fromBufferGeometry: function fromBufferGeometry(geometry) {\n    var scope = this;\n    var indices = geometry.index !== null ? geometry.index.array : undefined;\n    var attributes = geometry.attributes;\n    var positions = attributes.position.array;\n    var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n    var colors = attributes.color !== undefined ? attributes.color.array : undefined;\n    var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n    var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n    if (uvs2 !== undefined) this.faceVertexUvs[1] = [];\n\n    for (var i = 0; i < positions.length; i += 3) {\n      scope.vertices.push(new Vector3().fromArray(positions, i));\n\n      if (colors !== undefined) {\n        scope.colors.push(new Color().fromArray(colors, i));\n      }\n    }\n\n    function addFace(a, b, c, materialIndex) {\n      var vertexColors = colors === undefined ? [] : [scope.colors[a].clone(), scope.colors[b].clone(), scope.colors[c].clone()];\n      var vertexNormals = normals === undefined ? [] : [new Vector3().fromArray(normals, a * 3), new Vector3().fromArray(normals, b * 3), new Vector3().fromArray(normals, c * 3)];\n      var face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);\n      scope.faces.push(face);\n\n      if (uvs !== undefined) {\n        scope.faceVertexUvs[0].push([new Vector2().fromArray(uvs, a * 2), new Vector2().fromArray(uvs, b * 2), new Vector2().fromArray(uvs, c * 2)]);\n      }\n\n      if (uvs2 !== undefined) {\n        scope.faceVertexUvs[1].push([new Vector2().fromArray(uvs2, a * 2), new Vector2().fromArray(uvs2, b * 2), new Vector2().fromArray(uvs2, c * 2)]);\n      }\n    }\n\n    var groups = geometry.groups;\n\n    if (groups.length > 0) {\n      for (var i = 0; i < groups.length; i++) {\n        var group = groups[i];\n        var start = group.start;\n        var count = group.count;\n\n        for (var j = start, jl = start + count; j < jl; j += 3) {\n          if (indices !== undefined) {\n            addFace(indices[j], indices[j + 1], indices[j + 2], group.materialIndex);\n          } else {\n            addFace(j, j + 1, j + 2, group.materialIndex);\n          }\n        }\n      }\n    } else {\n      if (indices !== undefined) {\n        for (var i = 0; i < indices.length; i += 3) {\n          addFace(indices[i], indices[i + 1], indices[i + 2]);\n        }\n      } else {\n        for (var i = 0; i < positions.length / 3; i += 3) {\n          addFace(i, i + 1, i + 2);\n        }\n      }\n    }\n\n    this.computeFaceNormals();\n\n    if (geometry.boundingBox !== null) {\n      this.boundingBox = geometry.boundingBox.clone();\n    }\n\n    if (geometry.boundingSphere !== null) {\n      this.boundingSphere = geometry.boundingSphere.clone();\n    }\n\n    return this;\n  },\n  center: function () {\n    var offset = new Vector3();\n    return function center() {\n      this.computeBoundingBox();\n      this.boundingBox.getCenter(offset).negate();\n      this.translate(offset.x, offset.y, offset.z);\n      return this;\n    };\n  }(),\n  normalize: function normalize() {\n    this.computeBoundingSphere();\n    var center = this.boundingSphere.center;\n    var radius = this.boundingSphere.radius;\n    var s = radius === 0 ? 1 : 1.0 / radius;\n    var matrix = new Matrix4();\n    matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);\n    this.applyMatrix(matrix);\n    return this;\n  },\n  computeFaceNormals: function computeFaceNormals() {\n    var cb = new Vector3(),\n        ab = new Vector3();\n\n    for (var f = 0, fl = this.faces.length; f < fl; f++) {\n      var face = this.faces[f];\n      var vA = this.vertices[face.a];\n      var vB = this.vertices[face.b];\n      var vC = this.vertices[face.c];\n      cb.subVectors(vC, vB);\n      ab.subVectors(vA, vB);\n      cb.cross(ab);\n      cb.normalize();\n      face.normal.copy(cb);\n    }\n  },\n  computeVertexNormals: function computeVertexNormals(areaWeighted) {\n    if (areaWeighted === undefined) areaWeighted = true;\n    var v, vl, f, fl, face, vertices;\n    vertices = new Array(this.vertices.length);\n\n    for (v = 0, vl = this.vertices.length; v < vl; v++) {\n      vertices[v] = new Vector3();\n    }\n\n    if (areaWeighted) {\n      // vertex normals weighted by triangle areas\n      // http://www.iquilezles.org/www/articles/normals/normals.htm\n      var vA, vB, vC;\n      var cb = new Vector3(),\n          ab = new Vector3();\n\n      for (f = 0, fl = this.faces.length; f < fl; f++) {\n        face = this.faces[f];\n        vA = this.vertices[face.a];\n        vB = this.vertices[face.b];\n        vC = this.vertices[face.c];\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        vertices[face.a].add(cb);\n        vertices[face.b].add(cb);\n        vertices[face.c].add(cb);\n      }\n    } else {\n      this.computeFaceNormals();\n\n      for (f = 0, fl = this.faces.length; f < fl; f++) {\n        face = this.faces[f];\n        vertices[face.a].add(face.normal);\n        vertices[face.b].add(face.normal);\n        vertices[face.c].add(face.normal);\n      }\n    }\n\n    for (v = 0, vl = this.vertices.length; v < vl; v++) {\n      vertices[v].normalize();\n    }\n\n    for (f = 0, fl = this.faces.length; f < fl; f++) {\n      face = this.faces[f];\n      var vertexNormals = face.vertexNormals;\n\n      if (vertexNormals.length === 3) {\n        vertexNormals[0].copy(vertices[face.a]);\n        vertexNormals[1].copy(vertices[face.b]);\n        vertexNormals[2].copy(vertices[face.c]);\n      } else {\n        vertexNormals[0] = vertices[face.a].clone();\n        vertexNormals[1] = vertices[face.b].clone();\n        vertexNormals[2] = vertices[face.c].clone();\n      }\n    }\n\n    if (this.faces.length > 0) {\n      this.normalsNeedUpdate = true;\n    }\n  },\n  computeFlatVertexNormals: function computeFlatVertexNormals() {\n    var f, fl, face;\n    this.computeFaceNormals();\n\n    for (f = 0, fl = this.faces.length; f < fl; f++) {\n      face = this.faces[f];\n      var vertexNormals = face.vertexNormals;\n\n      if (vertexNormals.length === 3) {\n        vertexNormals[0].copy(face.normal);\n        vertexNormals[1].copy(face.normal);\n        vertexNormals[2].copy(face.normal);\n      } else {\n        vertexNormals[0] = face.normal.clone();\n        vertexNormals[1] = face.normal.clone();\n        vertexNormals[2] = face.normal.clone();\n      }\n    }\n\n    if (this.faces.length > 0) {\n      this.normalsNeedUpdate = true;\n    }\n  },\n  computeMorphNormals: function computeMorphNormals() {\n    var i, il, f, fl, face; // save original normals\n    // - create temp variables on first access\n    //   otherwise just copy (for faster repeated calls)\n\n    for (f = 0, fl = this.faces.length; f < fl; f++) {\n      face = this.faces[f];\n\n      if (!face.__originalFaceNormal) {\n        face.__originalFaceNormal = face.normal.clone();\n      } else {\n        face.__originalFaceNormal.copy(face.normal);\n      }\n\n      if (!face.__originalVertexNormals) face.__originalVertexNormals = [];\n\n      for (i = 0, il = face.vertexNormals.length; i < il; i++) {\n        if (!face.__originalVertexNormals[i]) {\n          face.__originalVertexNormals[i] = face.vertexNormals[i].clone();\n        } else {\n          face.__originalVertexNormals[i].copy(face.vertexNormals[i]);\n        }\n      }\n    } // use temp geometry to compute face and vertex normals for each morph\n\n\n    var tmpGeo = new Geometry();\n    tmpGeo.faces = this.faces;\n\n    for (i = 0, il = this.morphTargets.length; i < il; i++) {\n      // create on first access\n      if (!this.morphNormals[i]) {\n        this.morphNormals[i] = {};\n        this.morphNormals[i].faceNormals = [];\n        this.morphNormals[i].vertexNormals = [];\n        var dstNormalsFace = this.morphNormals[i].faceNormals;\n        var dstNormalsVertex = this.morphNormals[i].vertexNormals;\n        var faceNormal, vertexNormals;\n\n        for (f = 0, fl = this.faces.length; f < fl; f++) {\n          faceNormal = new Vector3();\n          vertexNormals = {\n            a: new Vector3(),\n            b: new Vector3(),\n            c: new Vector3()\n          };\n          dstNormalsFace.push(faceNormal);\n          dstNormalsVertex.push(vertexNormals);\n        }\n      }\n\n      var morphNormals = this.morphNormals[i]; // set vertices to morph target\n\n      tmpGeo.vertices = this.morphTargets[i].vertices; // compute morph normals\n\n      tmpGeo.computeFaceNormals();\n      tmpGeo.computeVertexNormals(); // store morph normals\n\n      var faceNormal, vertexNormals;\n\n      for (f = 0, fl = this.faces.length; f < fl; f++) {\n        face = this.faces[f];\n        faceNormal = morphNormals.faceNormals[f];\n        vertexNormals = morphNormals.vertexNormals[f];\n        faceNormal.copy(face.normal);\n        vertexNormals.a.copy(face.vertexNormals[0]);\n        vertexNormals.b.copy(face.vertexNormals[1]);\n        vertexNormals.c.copy(face.vertexNormals[2]);\n      }\n    } // restore original normals\n\n\n    for (f = 0, fl = this.faces.length; f < fl; f++) {\n      face = this.faces[f];\n      face.normal = face.__originalFaceNormal;\n      face.vertexNormals = face.__originalVertexNormals;\n    }\n  },\n  computeBoundingBox: function computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n\n    this.boundingBox.setFromPoints(this.vertices);\n  },\n  computeBoundingSphere: function computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n\n    this.boundingSphere.setFromPoints(this.vertices);\n  },\n  merge: function merge(geometry, matrix, materialIndexOffset) {\n    if (!(geometry && geometry.isGeometry)) {\n      console.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry);\n      return;\n    }\n\n    var normalMatrix,\n        vertexOffset = this.vertices.length,\n        vertices1 = this.vertices,\n        vertices2 = geometry.vertices,\n        faces1 = this.faces,\n        faces2 = geometry.faces,\n        uvs1 = this.faceVertexUvs[0],\n        uvs2 = geometry.faceVertexUvs[0],\n        colors1 = this.colors,\n        colors2 = geometry.colors;\n    if (materialIndexOffset === undefined) materialIndexOffset = 0;\n\n    if (matrix !== undefined) {\n      normalMatrix = new Matrix3().getNormalMatrix(matrix);\n    } // vertices\n\n\n    for (var i = 0, il = vertices2.length; i < il; i++) {\n      var vertex = vertices2[i];\n      var vertexCopy = vertex.clone();\n      if (matrix !== undefined) vertexCopy.applyMatrix4(matrix);\n      vertices1.push(vertexCopy);\n    } // colors\n\n\n    for (var i = 0, il = colors2.length; i < il; i++) {\n      colors1.push(colors2[i].clone());\n    } // faces\n\n\n    for (i = 0, il = faces2.length; i < il; i++) {\n      var face = faces2[i],\n          faceCopy,\n          normal,\n          color,\n          faceVertexNormals = face.vertexNormals,\n          faceVertexColors = face.vertexColors;\n      faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);\n      faceCopy.normal.copy(face.normal);\n\n      if (normalMatrix !== undefined) {\n        faceCopy.normal.applyMatrix3(normalMatrix).normalize();\n      }\n\n      for (var j = 0, jl = faceVertexNormals.length; j < jl; j++) {\n        normal = faceVertexNormals[j].clone();\n\n        if (normalMatrix !== undefined) {\n          normal.applyMatrix3(normalMatrix).normalize();\n        }\n\n        faceCopy.vertexNormals.push(normal);\n      }\n\n      faceCopy.color.copy(face.color);\n\n      for (var j = 0, jl = faceVertexColors.length; j < jl; j++) {\n        color = faceVertexColors[j];\n        faceCopy.vertexColors.push(color.clone());\n      }\n\n      faceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n      faces1.push(faceCopy);\n    } // uvs\n\n\n    for (i = 0, il = uvs2.length; i < il; i++) {\n      var uv = uvs2[i],\n          uvCopy = [];\n\n      if (uv === undefined) {\n        continue;\n      }\n\n      for (var j = 0, jl = uv.length; j < jl; j++) {\n        uvCopy.push(uv[j].clone());\n      }\n\n      uvs1.push(uvCopy);\n    }\n  },\n  mergeMesh: function mergeMesh(mesh) {\n    if (!(mesh && mesh.isMesh)) {\n      console.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh);\n      return;\n    }\n\n    if (mesh.matrixAutoUpdate) mesh.updateMatrix();\n    this.merge(mesh.geometry, mesh.matrix);\n  },\n\n  /*\n   * Checks for duplicate vertices with hashmap.\n   * Duplicated vertices are removed\n   * and faces' vertices are updated.\n   */\n  mergeVertices: function mergeVertices() {\n    var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\n    var unique = [],\n        changes = [];\n    var v, key;\n    var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\n    var precision = Math.pow(10, precisionPoints);\n    var i, il, face;\n    var indices, j, jl;\n\n    for (i = 0, il = this.vertices.length; i < il; i++) {\n      v = this.vertices[i];\n      key = Math.round(v.x * precision) + '_' + Math.round(v.y * precision) + '_' + Math.round(v.z * precision);\n\n      if (verticesMap[key] === undefined) {\n        verticesMap[key] = i;\n        unique.push(this.vertices[i]);\n        changes[i] = unique.length - 1;\n      } else {\n        //console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n        changes[i] = changes[verticesMap[key]];\n      }\n    } // if faces are completely degenerate after merging vertices, we\n    // have to remove them from the geometry.\n\n\n    var faceIndicesToRemove = [];\n\n    for (i = 0, il = this.faces.length; i < il; i++) {\n      face = this.faces[i];\n      face.a = changes[face.a];\n      face.b = changes[face.b];\n      face.c = changes[face.c];\n      indices = [face.a, face.b, face.c]; // if any duplicate vertices are found in a Face3\n      // we have to remove the face as nothing can be saved\n\n      for (var n = 0; n < 3; n++) {\n        if (indices[n] === indices[(n + 1) % 3]) {\n          faceIndicesToRemove.push(i);\n          break;\n        }\n      }\n    }\n\n    for (i = faceIndicesToRemove.length - 1; i >= 0; i--) {\n      var idx = faceIndicesToRemove[i];\n      this.faces.splice(idx, 1);\n\n      for (j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {\n        this.faceVertexUvs[j].splice(idx, 1);\n      }\n    } // Use unique set of vertices\n\n\n    var diff = this.vertices.length - unique.length;\n    this.vertices = unique;\n    return diff;\n  },\n  setFromPoints: function setFromPoints(points) {\n    this.vertices = [];\n\n    for (var i = 0, l = points.length; i < l; i++) {\n      var point = points[i];\n      this.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n    }\n\n    return this;\n  },\n  sortFacesByMaterialIndex: function sortFacesByMaterialIndex() {\n    var faces = this.faces;\n    var length = faces.length; // tag faces\n\n    for (var i = 0; i < length; i++) {\n      faces[i]._id = i;\n    } // sort faces\n\n\n    function materialIndexSort(a, b) {\n      return a.materialIndex - b.materialIndex;\n    }\n\n    faces.sort(materialIndexSort); // sort uvs\n\n    var uvs1 = this.faceVertexUvs[0];\n    var uvs2 = this.faceVertexUvs[1];\n    var newUvs1, newUvs2;\n    if (uvs1 && uvs1.length === length) newUvs1 = [];\n    if (uvs2 && uvs2.length === length) newUvs2 = [];\n\n    for (var i = 0; i < length; i++) {\n      var id = faces[i]._id;\n      if (newUvs1) newUvs1.push(uvs1[id]);\n      if (newUvs2) newUvs2.push(uvs2[id]);\n    }\n\n    if (newUvs1) this.faceVertexUvs[0] = newUvs1;\n    if (newUvs2) this.faceVertexUvs[1] = newUvs2;\n  },\n  toJSON: function toJSON() {\n    var data = {\n      metadata: {\n        version: 4.5,\n        type: 'Geometry',\n        generator: 'Geometry.toJSON'\n      }\n    }; // standard Geometry serialization\n\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n\n    if (this.parameters !== undefined) {\n      var parameters = this.parameters;\n\n      for (var key in parameters) {\n        if (parameters[key] !== undefined) data[key] = parameters[key];\n      }\n\n      return data;\n    }\n\n    var vertices = [];\n\n    for (var i = 0; i < this.vertices.length; i++) {\n      var vertex = this.vertices[i];\n      vertices.push(vertex.x, vertex.y, vertex.z);\n    }\n\n    var faces = [];\n    var normals = [];\n    var normalsHash = {};\n    var colors = [];\n    var colorsHash = {};\n    var uvs = [];\n    var uvsHash = {};\n\n    for (var i = 0; i < this.faces.length; i++) {\n      var face = this.faces[i];\n      var hasMaterial = true;\n      var hasFaceUv = false; // deprecated\n\n      var hasFaceVertexUv = this.faceVertexUvs[0][i] !== undefined;\n      var hasFaceNormal = face.normal.length() > 0;\n      var hasFaceVertexNormal = face.vertexNormals.length > 0;\n      var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n      var hasFaceVertexColor = face.vertexColors.length > 0;\n      var faceType = 0;\n      faceType = setBit(faceType, 0, 0); // isQuad\n\n      faceType = setBit(faceType, 1, hasMaterial);\n      faceType = setBit(faceType, 2, hasFaceUv);\n      faceType = setBit(faceType, 3, hasFaceVertexUv);\n      faceType = setBit(faceType, 4, hasFaceNormal);\n      faceType = setBit(faceType, 5, hasFaceVertexNormal);\n      faceType = setBit(faceType, 6, hasFaceColor);\n      faceType = setBit(faceType, 7, hasFaceVertexColor);\n      faces.push(faceType);\n      faces.push(face.a, face.b, face.c);\n      faces.push(face.materialIndex);\n\n      if (hasFaceVertexUv) {\n        var faceVertexUvs = this.faceVertexUvs[0][i];\n        faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));\n      }\n\n      if (hasFaceNormal) {\n        faces.push(getNormalIndex(face.normal));\n      }\n\n      if (hasFaceVertexNormal) {\n        var vertexNormals = face.vertexNormals;\n        faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));\n      }\n\n      if (hasFaceColor) {\n        faces.push(getColorIndex(face.color));\n      }\n\n      if (hasFaceVertexColor) {\n        var vertexColors = face.vertexColors;\n        faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));\n      }\n    }\n\n    function setBit(value, position, enabled) {\n      return enabled ? value | 1 << position : value & ~(1 << position);\n    }\n\n    function getNormalIndex(normal) {\n      var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n      if (normalsHash[hash] !== undefined) {\n        return normalsHash[hash];\n      }\n\n      normalsHash[hash] = normals.length / 3;\n      normals.push(normal.x, normal.y, normal.z);\n      return normalsHash[hash];\n    }\n\n    function getColorIndex(color) {\n      var hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n      if (colorsHash[hash] !== undefined) {\n        return colorsHash[hash];\n      }\n\n      colorsHash[hash] = colors.length;\n      colors.push(color.getHex());\n      return colorsHash[hash];\n    }\n\n    function getUvIndex(uv) {\n      var hash = uv.x.toString() + uv.y.toString();\n\n      if (uvsHash[hash] !== undefined) {\n        return uvsHash[hash];\n      }\n\n      uvsHash[hash] = uvs.length / 2;\n      uvs.push(uv.x, uv.y);\n      return uvsHash[hash];\n    }\n\n    data.data = {};\n    data.data.vertices = vertices;\n    data.data.normals = normals;\n    if (colors.length > 0) data.data.colors = colors;\n    if (uvs.length > 0) data.data.uvs = [uvs]; // temporal backward compatibility\n\n    data.data.faces = faces;\n    return data;\n  },\n  clone: function clone() {\n    /*\n     // Handle primitives\n    \t var parameters = this.parameters;\n    \t if ( parameters !== undefined ) {\n    \t var values = [];\n    \t for ( var key in parameters ) {\n    \t values.push( parameters[ key ] );\n    \t }\n    \t var geometry = Object.create( this.constructor.prototype );\n     this.constructor.apply( geometry, values );\n     return geometry;\n    \t }\n    \t return new this.constructor().copy( this );\n     */\n    return new Geometry().copy(this);\n  },\n  copy: function copy(source) {\n    var i, il, j, jl, k, kl; // reset\n\n    this.vertices = [];\n    this.colors = [];\n    this.faces = [];\n    this.faceVertexUvs = [[]];\n    this.morphTargets = [];\n    this.morphNormals = [];\n    this.skinWeights = [];\n    this.skinIndices = [];\n    this.lineDistances = [];\n    this.boundingBox = null;\n    this.boundingSphere = null; // name\n\n    this.name = source.name; // vertices\n\n    var vertices = source.vertices;\n\n    for (i = 0, il = vertices.length; i < il; i++) {\n      this.vertices.push(vertices[i].clone());\n    } // colors\n\n\n    var colors = source.colors;\n\n    for (i = 0, il = colors.length; i < il; i++) {\n      this.colors.push(colors[i].clone());\n    } // faces\n\n\n    var faces = source.faces;\n\n    for (i = 0, il = faces.length; i < il; i++) {\n      this.faces.push(faces[i].clone());\n    } // face vertex uvs\n\n\n    for (i = 0, il = source.faceVertexUvs.length; i < il; i++) {\n      var faceVertexUvs = source.faceVertexUvs[i];\n\n      if (this.faceVertexUvs[i] === undefined) {\n        this.faceVertexUvs[i] = [];\n      }\n\n      for (j = 0, jl = faceVertexUvs.length; j < jl; j++) {\n        var uvs = faceVertexUvs[j],\n            uvsCopy = [];\n\n        for (k = 0, kl = uvs.length; k < kl; k++) {\n          var uv = uvs[k];\n          uvsCopy.push(uv.clone());\n        }\n\n        this.faceVertexUvs[i].push(uvsCopy);\n      }\n    } // morph targets\n\n\n    var morphTargets = source.morphTargets;\n\n    for (i = 0, il = morphTargets.length; i < il; i++) {\n      var morphTarget = {};\n      morphTarget.name = morphTargets[i].name; // vertices\n\n      if (morphTargets[i].vertices !== undefined) {\n        morphTarget.vertices = [];\n\n        for (j = 0, jl = morphTargets[i].vertices.length; j < jl; j++) {\n          morphTarget.vertices.push(morphTargets[i].vertices[j].clone());\n        }\n      } // normals\n\n\n      if (morphTargets[i].normals !== undefined) {\n        morphTarget.normals = [];\n\n        for (j = 0, jl = morphTargets[i].normals.length; j < jl; j++) {\n          morphTarget.normals.push(morphTargets[i].normals[j].clone());\n        }\n      }\n\n      this.morphTargets.push(morphTarget);\n    } // morph normals\n\n\n    var morphNormals = source.morphNormals;\n\n    for (i = 0, il = morphNormals.length; i < il; i++) {\n      var morphNormal = {}; // vertex normals\n\n      if (morphNormals[i].vertexNormals !== undefined) {\n        morphNormal.vertexNormals = [];\n\n        for (j = 0, jl = morphNormals[i].vertexNormals.length; j < jl; j++) {\n          var srcVertexNormal = morphNormals[i].vertexNormals[j];\n          var destVertexNormal = {};\n          destVertexNormal.a = srcVertexNormal.a.clone();\n          destVertexNormal.b = srcVertexNormal.b.clone();\n          destVertexNormal.c = srcVertexNormal.c.clone();\n          morphNormal.vertexNormals.push(destVertexNormal);\n        }\n      } // face normals\n\n\n      if (morphNormals[i].faceNormals !== undefined) {\n        morphNormal.faceNormals = [];\n\n        for (j = 0, jl = morphNormals[i].faceNormals.length; j < jl; j++) {\n          morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());\n        }\n      }\n\n      this.morphNormals.push(morphNormal);\n    } // skin weights\n\n\n    var skinWeights = source.skinWeights;\n\n    for (i = 0, il = skinWeights.length; i < il; i++) {\n      this.skinWeights.push(skinWeights[i].clone());\n    } // skin indices\n\n\n    var skinIndices = source.skinIndices;\n\n    for (i = 0, il = skinIndices.length; i < il; i++) {\n      this.skinIndices.push(skinIndices[i].clone());\n    } // line distances\n\n\n    var lineDistances = source.lineDistances;\n\n    for (i = 0, il = lineDistances.length; i < il; i++) {\n      this.lineDistances.push(lineDistances[i]);\n    } // bounding box\n\n\n    var boundingBox = source.boundingBox;\n\n    if (boundingBox !== null) {\n      this.boundingBox = boundingBox.clone();\n    } // bounding sphere\n\n\n    var boundingSphere = source.boundingSphere;\n\n    if (boundingSphere !== null) {\n      this.boundingSphere = boundingSphere.clone();\n    } // update flags\n\n\n    this.elementsNeedUpdate = source.elementsNeedUpdate;\n    this.verticesNeedUpdate = source.verticesNeedUpdate;\n    this.uvsNeedUpdate = source.uvsNeedUpdate;\n    this.normalsNeedUpdate = source.normalsNeedUpdate;\n    this.colorsNeedUpdate = source.colorsNeedUpdate;\n    this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n    this.groupsNeedUpdate = source.groupsNeedUpdate;\n    return this;\n  },\n  dispose: function dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n});\nexport { Geometry };","import { EventDispatcher } from '../core/EventDispatcher.js';\nimport { NoColors, FrontSide, FlatShading, NormalBlending, LessEqualDepth, AddEquation, OneMinusSrcAlphaFactor, SrcAlphaFactor } from '../constants.js';\nimport { _Math } from '../math/Math.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar materialId = 0;\n\nfunction Material() {\n  Object.defineProperty(this, 'id', {\n    value: materialId++\n  });\n  this.uuid = _Math.generateUUID();\n  this.name = '';\n  this.type = 'Material';\n  this.fog = true;\n  this.lights = true;\n  this.blending = NormalBlending;\n  this.side = FrontSide;\n  this.flatShading = false;\n  this.vertexTangents = false;\n  this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n  this.opacity = 1;\n  this.transparent = false;\n  this.blendSrc = SrcAlphaFactor;\n  this.blendDst = OneMinusSrcAlphaFactor;\n  this.blendEquation = AddEquation;\n  this.blendSrcAlpha = null;\n  this.blendDstAlpha = null;\n  this.blendEquationAlpha = null;\n  this.depthFunc = LessEqualDepth;\n  this.depthTest = true;\n  this.depthWrite = true;\n  this.clippingPlanes = null;\n  this.clipIntersection = false;\n  this.clipShadows = false;\n  this.shadowSide = null;\n  this.colorWrite = true;\n  this.precision = null; // override the renderer's default precision for this material\n\n  this.polygonOffset = false;\n  this.polygonOffsetFactor = 0;\n  this.polygonOffsetUnits = 0;\n  this.dithering = false;\n  this.alphaTest = 0;\n  this.premultipliedAlpha = false;\n  this.visible = true;\n  this.userData = {};\n  this.needsUpdate = true;\n}\n\nMaterial.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n  constructor: Material,\n  isMaterial: true,\n  onBeforeCompile: function onBeforeCompile() {},\n  setValues: function setValues(values) {\n    if (values === undefined) return;\n\n    for (var key in values) {\n      var newValue = values[key];\n\n      if (newValue === undefined) {\n        console.warn(\"THREE.Material: '\" + key + \"' parameter is undefined.\");\n        continue;\n      } // for backward compatability if shading is set in the constructor\n\n\n      if (key === 'shading') {\n        console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n        this.flatShading = newValue === FlatShading ? true : false;\n        continue;\n      }\n\n      var currentValue = this[key];\n\n      if (currentValue === undefined) {\n        console.warn(\"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\");\n        continue;\n      }\n\n      if (currentValue && currentValue.isColor) {\n        currentValue.set(newValue);\n      } else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n        currentValue.copy(newValue);\n      } else {\n        this[key] = newValue;\n      }\n    }\n  },\n  toJSON: function toJSON(meta) {\n    var isRoot = meta === undefined || typeof meta === 'string';\n\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {}\n      };\n    }\n\n    var data = {\n      metadata: {\n        version: 4.5,\n        type: 'Material',\n        generator: 'Material.toJSON'\n      }\n    }; // standard Material serialization\n\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n    if (this.color && this.color.isColor) data.color = this.color.getHex();\n    if (this.roughness !== undefined) data.roughness = this.roughness;\n    if (this.metalness !== undefined) data.metalness = this.metalness;\n    if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n    if (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n    if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n    if (this.shininess !== undefined) data.shininess = this.shininess;\n    if (this.clearCoat !== undefined) data.clearCoat = this.clearCoat;\n    if (this.clearCoatRoughness !== undefined) data.clearCoatRoughness = this.clearCoatRoughness;\n    if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n    if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n    if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n    if (this.lightMap && this.lightMap.isTexture) data.lightMap = this.lightMap.toJSON(meta).uuid;\n\n    if (this.aoMap && this.aoMap.isTexture) {\n      data.aoMap = this.aoMap.toJSON(meta).uuid;\n      data.aoMapIntensity = this.aoMapIntensity;\n    }\n\n    if (this.bumpMap && this.bumpMap.isTexture) {\n      data.bumpMap = this.bumpMap.toJSON(meta).uuid;\n      data.bumpScale = this.bumpScale;\n    }\n\n    if (this.normalMap && this.normalMap.isTexture) {\n      data.normalMap = this.normalMap.toJSON(meta).uuid;\n      data.normalMapType = this.normalMapType;\n      data.normalScale = this.normalScale.toArray();\n    }\n\n    if (this.displacementMap && this.displacementMap.isTexture) {\n      data.displacementMap = this.displacementMap.toJSON(meta).uuid;\n      data.displacementScale = this.displacementScale;\n      data.displacementBias = this.displacementBias;\n    }\n\n    if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n    if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n    if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n    if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n    if (this.envMap && this.envMap.isTexture) {\n      data.envMap = this.envMap.toJSON(meta).uuid;\n      data.reflectivity = this.reflectivity; // Scale behind envMap\n\n      data.refractionRatio = this.refractionRatio;\n      if (this.combine !== undefined) data.combine = this.combine;\n      if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n    }\n\n    if (this.gradientMap && this.gradientMap.isTexture) {\n      data.gradientMap = this.gradientMap.toJSON(meta).uuid;\n    }\n\n    if (this.size !== undefined) data.size = this.size;\n    if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n    if (this.blending !== NormalBlending) data.blending = this.blending;\n    if (this.flatShading === true) data.flatShading = this.flatShading;\n    if (this.side !== FrontSide) data.side = this.side;\n    if (this.vertexColors !== NoColors) data.vertexColors = this.vertexColors;\n    if (this.opacity < 1) data.opacity = this.opacity;\n    if (this.transparent === true) data.transparent = this.transparent;\n    data.depthFunc = this.depthFunc;\n    data.depthTest = this.depthTest;\n    data.depthWrite = this.depthWrite; // rotation (SpriteMaterial)\n\n    if (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n    if (this.polygonOffset === true) data.polygonOffset = true;\n    if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n    if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n    if (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n    if (this.dashSize !== undefined) data.dashSize = this.dashSize;\n    if (this.gapSize !== undefined) data.gapSize = this.gapSize;\n    if (this.scale !== undefined) data.scale = this.scale;\n    if (this.dithering === true) data.dithering = true;\n    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n    if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n    if (this.wireframe === true) data.wireframe = this.wireframe;\n    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n    if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n    if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n    if (this.morphTargets === true) data.morphTargets = true;\n    if (this.morphNormals === true) data.morphNormals = true;\n    if (this.skinning === true) data.skinning = true;\n    if (this.visible === false) data.visible = false;\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n    function extractFromCache(cache) {\n      var values = [];\n\n      for (var key in cache) {\n        var data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n\n      return values;\n    }\n\n    if (isRoot) {\n      var textures = extractFromCache(meta.textures);\n      var images = extractFromCache(meta.images);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n    }\n\n    return data;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(source) {\n    this.name = source.name;\n    this.fog = source.fog;\n    this.lights = source.lights;\n    this.blending = source.blending;\n    this.side = source.side;\n    this.flatShading = source.flatShading;\n    this.vertexColors = source.vertexColors;\n    this.opacity = source.opacity;\n    this.transparent = source.transparent;\n    this.blendSrc = source.blendSrc;\n    this.blendDst = source.blendDst;\n    this.blendEquation = source.blendEquation;\n    this.blendSrcAlpha = source.blendSrcAlpha;\n    this.blendDstAlpha = source.blendDstAlpha;\n    this.blendEquationAlpha = source.blendEquationAlpha;\n    this.depthFunc = source.depthFunc;\n    this.depthTest = source.depthTest;\n    this.depthWrite = source.depthWrite;\n    this.colorWrite = source.colorWrite;\n    this.precision = source.precision;\n    this.polygonOffset = source.polygonOffset;\n    this.polygonOffsetFactor = source.polygonOffsetFactor;\n    this.polygonOffsetUnits = source.polygonOffsetUnits;\n    this.dithering = source.dithering;\n    this.alphaTest = source.alphaTest;\n    this.premultipliedAlpha = source.premultipliedAlpha;\n    this.visible = source.visible;\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n    this.clipShadows = source.clipShadows;\n    this.clipIntersection = source.clipIntersection;\n    var srcPlanes = source.clippingPlanes,\n        dstPlanes = null;\n\n    if (srcPlanes !== null) {\n      var n = srcPlanes.length;\n      dstPlanes = new Array(n);\n\n      for (var i = 0; i !== n; ++i) {\n        dstPlanes[i] = srcPlanes[i].clone();\n      }\n    }\n\n    this.clippingPlanes = dstPlanes;\n    this.shadowSide = source.shadowSide;\n    return this;\n  },\n  dispose: function dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n});\nexport { Material };","import { TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshNormalMaterial(parameters) {\n  Material.call(this);\n  this.type = 'MeshNormalMaterial';\n  this.bumpMap = null;\n  this.bumpScale = 1;\n  this.normalMap = null;\n  this.normalMapType = TangentSpaceNormalMap;\n  this.normalScale = new Vector2(1, 1);\n  this.displacementMap = null;\n  this.displacementScale = 1;\n  this.displacementBias = 0;\n  this.wireframe = false;\n  this.wireframeLinewidth = 1;\n  this.fog = false;\n  this.lights = false;\n  this.skinning = false;\n  this.morphTargets = false;\n  this.morphNormals = false;\n  this.setValues(parameters);\n}\n\nMeshNormalMaterial.prototype = Object.create(Material.prototype);\nMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\nMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\nMeshNormalMaterial.prototype.copy = function (source) {\n  Material.prototype.copy.call(this, source);\n  this.bumpMap = source.bumpMap;\n  this.bumpScale = source.bumpScale;\n  this.normalMap = source.normalMap;\n  this.normalMapType = source.normalMapType;\n  this.normalScale.copy(source.normalScale);\n  this.displacementMap = source.displacementMap;\n  this.displacementScale = source.displacementScale;\n  this.displacementBias = source.displacementBias;\n  this.wireframe = source.wireframe;\n  this.wireframeLinewidth = source.wireframeLinewidth;\n  this.skinning = source.skinning;\n  this.morphTargets = source.morphTargets;\n  this.morphNormals = source.morphNormals;\n  return this;\n};\n\nexport { MeshNormalMaterial };","import { Object3D } from '../../core/Object3D.js';\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction ImmediateRenderObject(material) {\n  Object3D.call(this);\n  this.material = material;\n\n  this.render = function ()\n  /* renderCallback */\n  {};\n}\n\nImmediateRenderObject.prototype = Object.create(Object3D.prototype);\nImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\nImmediateRenderObject.prototype.isImmediateRenderObject = true;\nexport { ImmediateRenderObject };","/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\nfunction Vector4(x, y, z, w) {\n  this.x = x || 0;\n  this.y = y || 0;\n  this.z = z || 0;\n  this.w = w !== undefined ? w : 1;\n}\n\nObject.defineProperties(Vector4.prototype, {\n  \"width\": {\n    get: function get() {\n      return this.z;\n    },\n    set: function set(value) {\n      this.z = value;\n    }\n  },\n  \"height\": {\n    get: function get() {\n      return this.w;\n    },\n    set: function set(value) {\n      this.w = value;\n    }\n  }\n});\nObject.assign(Vector4.prototype, {\n  isVector4: true,\n  set: function set(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  },\n  setScalar: function setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    this.z = scalar;\n    this.w = scalar;\n    return this;\n  },\n  setX: function setX(x) {\n    this.x = x;\n    return this;\n  },\n  setY: function setY(y) {\n    this.y = y;\n    return this;\n  },\n  setZ: function setZ(z) {\n    this.z = z;\n    return this;\n  },\n  setW: function setW(w) {\n    this.w = w;\n    return this;\n  },\n  setComponent: function setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n\n      case 1:\n        this.y = value;\n        break;\n\n      case 2:\n        this.z = value;\n        break;\n\n      case 3:\n        this.w = value;\n        break;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n\n    return this;\n  },\n  getComponent: function getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n\n      case 1:\n        return this.y;\n\n      case 2:\n        return this.z;\n\n      case 3:\n        return this.w;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  },\n  clone: function clone() {\n    return new this.constructor(this.x, this.y, this.z, this.w);\n  },\n  copy: function copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n    this.w = v.w !== undefined ? v.w : 1;\n    return this;\n  },\n  add: function add(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n    this.w += v.w;\n    return this;\n  },\n  addScalar: function addScalar(s) {\n    this.x += s;\n    this.y += s;\n    this.z += s;\n    this.w += s;\n    return this;\n  },\n  addVectors: function addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    this.z = a.z + b.z;\n    this.w = a.w + b.w;\n    return this;\n  },\n  addScaledVector: function addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    this.z += v.z * s;\n    this.w += v.w * s;\n    return this;\n  },\n  sub: function sub(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n    this.w -= v.w;\n    return this;\n  },\n  subScalar: function subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    this.z -= s;\n    this.w -= s;\n    return this;\n  },\n  subVectors: function subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    this.z = a.z - b.z;\n    this.w = a.w - b.w;\n    return this;\n  },\n  multiplyScalar: function multiplyScalar(scalar) {\n    this.x *= scalar;\n    this.y *= scalar;\n    this.z *= scalar;\n    this.w *= scalar;\n    return this;\n  },\n  applyMatrix4: function applyMatrix4(m) {\n    var x = this.x,\n        y = this.y,\n        z = this.z,\n        w = this.w;\n    var e = m.elements;\n    this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n    this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n    this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n    this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n    return this;\n  },\n  divideScalar: function divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  },\n  setAxisAngleFromQuaternion: function setAxisAngleFromQuaternion(q) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n    // q is assumed to be normalized\n    this.w = 2 * Math.acos(q.w);\n    var s = Math.sqrt(1 - q.w * q.w);\n\n    if (s < 0.0001) {\n      this.x = 1;\n      this.y = 0;\n      this.z = 0;\n    } else {\n      this.x = q.x / s;\n      this.y = q.y / s;\n      this.z = q.z / s;\n    }\n\n    return this;\n  },\n  setAxisAngleFromRotationMatrix: function setAxisAngleFromRotationMatrix(m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    var angle,\n        x,\n        y,\n        z,\n        // variables for result\n    epsilon = 0.01,\n        // margin to allow for rounding errors\n    epsilon2 = 0.1,\n        // margin to distinguish between 0 and 180 degrees\n    te = m.elements,\n        m11 = te[0],\n        m12 = te[4],\n        m13 = te[8],\n        m21 = te[1],\n        m22 = te[5],\n        m23 = te[9],\n        m31 = te[2],\n        m32 = te[6],\n        m33 = te[10];\n\n    if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n      // singularity found\n      // first check for identity matrix which must have +1 for all terms\n      // in leading diagonal and zero in other terms\n      if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n        // this singularity is identity matrix so angle = 0\n        this.set(1, 0, 0, 0);\n        return this; // zero angle, arbitrary axis\n      } // otherwise this singularity is angle = 180\n\n\n      angle = Math.PI;\n      var xx = (m11 + 1) / 2;\n      var yy = (m22 + 1) / 2;\n      var zz = (m33 + 1) / 2;\n      var xy = (m12 + m21) / 4;\n      var xz = (m13 + m31) / 4;\n      var yz = (m23 + m32) / 4;\n\n      if (xx > yy && xx > zz) {\n        // m11 is the largest diagonal term\n        if (xx < epsilon) {\n          x = 0;\n          y = 0.707106781;\n          z = 0.707106781;\n        } else {\n          x = Math.sqrt(xx);\n          y = xy / x;\n          z = xz / x;\n        }\n      } else if (yy > zz) {\n        // m22 is the largest diagonal term\n        if (yy < epsilon) {\n          x = 0.707106781;\n          y = 0;\n          z = 0.707106781;\n        } else {\n          y = Math.sqrt(yy);\n          x = xy / y;\n          z = yz / y;\n        }\n      } else {\n        // m33 is the largest diagonal term so base result on this\n        if (zz < epsilon) {\n          x = 0.707106781;\n          y = 0.707106781;\n          z = 0;\n        } else {\n          z = Math.sqrt(zz);\n          x = xz / z;\n          y = yz / z;\n        }\n      }\n\n      this.set(x, y, z, angle);\n      return this; // return 180 deg rotation\n    } // as we have reached here there are no singularities so we can handle normally\n\n\n    var s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n    if (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n    // caught by singularity test above, but I've left it in just in case\n\n    this.x = (m32 - m23) / s;\n    this.y = (m13 - m31) / s;\n    this.z = (m21 - m12) / s;\n    this.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n    return this;\n  },\n  min: function min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    this.z = Math.min(this.z, v.z);\n    this.w = Math.min(this.w, v.w);\n    return this;\n  },\n  max: function max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    this.z = Math.max(this.z, v.z);\n    this.w = Math.max(this.w, v.w);\n    return this;\n  },\n  clamp: function clamp(min, max) {\n    // assumes min < max, componentwise\n    this.x = Math.max(min.x, Math.min(max.x, this.x));\n    this.y = Math.max(min.y, Math.min(max.y, this.y));\n    this.z = Math.max(min.z, Math.min(max.z, this.z));\n    this.w = Math.max(min.w, Math.min(max.w, this.w));\n    return this;\n  },\n  clampScalar: function () {\n    var min, max;\n    return function clampScalar(minVal, maxVal) {\n      if (min === undefined) {\n        min = new Vector4();\n        max = new Vector4();\n      }\n\n      min.set(minVal, minVal, minVal, minVal);\n      max.set(maxVal, maxVal, maxVal, maxVal);\n      return this.clamp(min, max);\n    };\n  }(),\n  clampLength: function clampLength(min, max) {\n    var length = this.length();\n    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n  },\n  floor: function floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    this.z = Math.floor(this.z);\n    this.w = Math.floor(this.w);\n    return this;\n  },\n  ceil: function ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    this.z = Math.ceil(this.z);\n    this.w = Math.ceil(this.w);\n    return this;\n  },\n  round: function round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.z = Math.round(this.z);\n    this.w = Math.round(this.w);\n    return this;\n  },\n  roundToZero: function roundToZero() {\n    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n    this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n    return this;\n  },\n  negate: function negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    this.w = -this.w;\n    return this;\n  },\n  dot: function dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n  },\n  lengthSq: function lengthSq() {\n    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n  },\n  length: function length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  },\n  manhattanLength: function manhattanLength() {\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n  },\n  normalize: function normalize() {\n    return this.divideScalar(this.length() || 1);\n  },\n  setLength: function setLength(length) {\n    return this.normalize().multiplyScalar(length);\n  },\n  lerp: function lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    this.z += (v.z - this.z) * alpha;\n    this.w += (v.w - this.w) * alpha;\n    return this;\n  },\n  lerpVectors: function lerpVectors(v1, v2, alpha) {\n    return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n  },\n  equals: function equals(v) {\n    return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    this.w = array[offset + 3];\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    array[offset + 2] = this.z;\n    array[offset + 3] = this.w;\n    return array;\n  },\n  fromBufferAttribute: function fromBufferAttribute(attribute, index, offset) {\n    if (offset !== undefined) {\n      console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n    }\n\n    this.x = attribute.getX(index);\n    this.y = attribute.getY(index);\n    this.z = attribute.getZ(index);\n    this.w = attribute.getW(index);\n    return this;\n  }\n});\nexport { Vector4 };","import { Vector4 } from '../math/Vector4.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction BufferAttribute(array, itemSize, normalized) {\n  if (Array.isArray(array)) {\n    throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n  }\n\n  this.name = '';\n  this.array = array;\n  this.itemSize = itemSize;\n  this.count = array !== undefined ? array.length / itemSize : 0;\n  this.normalized = normalized === true;\n  this.dynamic = false;\n  this.updateRange = {\n    offset: 0,\n    count: -1\n  };\n  this.version = 0;\n}\n\nObject.defineProperty(BufferAttribute.prototype, 'needsUpdate', {\n  set: function set(value) {\n    if (value === true) this.version++;\n  }\n});\nObject.assign(BufferAttribute.prototype, {\n  isBufferAttribute: true,\n  onUploadCallback: function onUploadCallback() {},\n  setArray: function setArray(array) {\n    if (Array.isArray(array)) {\n      throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n    }\n\n    this.count = array !== undefined ? array.length / this.itemSize : 0;\n    this.array = array;\n    return this;\n  },\n  setDynamic: function setDynamic(value) {\n    this.dynamic = value;\n    return this;\n  },\n  copy: function copy(source) {\n    this.name = source.name;\n    this.array = new source.array.constructor(source.array);\n    this.itemSize = source.itemSize;\n    this.count = source.count;\n    this.normalized = source.normalized;\n    this.dynamic = source.dynamic;\n    return this;\n  },\n  copyAt: function copyAt(index1, attribute, index2) {\n    index1 *= this.itemSize;\n    index2 *= attribute.itemSize;\n\n    for (var i = 0, l = this.itemSize; i < l; i++) {\n      this.array[index1 + i] = attribute.array[index2 + i];\n    }\n\n    return this;\n  },\n  copyArray: function copyArray(array) {\n    this.array.set(array);\n    return this;\n  },\n  copyColorsArray: function copyColorsArray(colors) {\n    var array = this.array,\n        offset = 0;\n\n    for (var i = 0, l = colors.length; i < l; i++) {\n      var color = colors[i];\n\n      if (color === undefined) {\n        console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n        color = new Color();\n      }\n\n      array[offset++] = color.r;\n      array[offset++] = color.g;\n      array[offset++] = color.b;\n    }\n\n    return this;\n  },\n  copyVector2sArray: function copyVector2sArray(vectors) {\n    var array = this.array,\n        offset = 0;\n\n    for (var i = 0, l = vectors.length; i < l; i++) {\n      var vector = vectors[i];\n\n      if (vector === undefined) {\n        console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n        vector = new Vector2();\n      }\n\n      array[offset++] = vector.x;\n      array[offset++] = vector.y;\n    }\n\n    return this;\n  },\n  copyVector3sArray: function copyVector3sArray(vectors) {\n    var array = this.array,\n        offset = 0;\n\n    for (var i = 0, l = vectors.length; i < l; i++) {\n      var vector = vectors[i];\n\n      if (vector === undefined) {\n        console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n        vector = new Vector3();\n      }\n\n      array[offset++] = vector.x;\n      array[offset++] = vector.y;\n      array[offset++] = vector.z;\n    }\n\n    return this;\n  },\n  copyVector4sArray: function copyVector4sArray(vectors) {\n    var array = this.array,\n        offset = 0;\n\n    for (var i = 0, l = vectors.length; i < l; i++) {\n      var vector = vectors[i];\n\n      if (vector === undefined) {\n        console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n        vector = new Vector4();\n      }\n\n      array[offset++] = vector.x;\n      array[offset++] = vector.y;\n      array[offset++] = vector.z;\n      array[offset++] = vector.w;\n    }\n\n    return this;\n  },\n  set: function set(value, offset) {\n    if (offset === undefined) offset = 0;\n    this.array.set(value, offset);\n    return this;\n  },\n  getX: function getX(index) {\n    return this.array[index * this.itemSize];\n  },\n  setX: function setX(index, x) {\n    this.array[index * this.itemSize] = x;\n    return this;\n  },\n  getY: function getY(index) {\n    return this.array[index * this.itemSize + 1];\n  },\n  setY: function setY(index, y) {\n    this.array[index * this.itemSize + 1] = y;\n    return this;\n  },\n  getZ: function getZ(index) {\n    return this.array[index * this.itemSize + 2];\n  },\n  setZ: function setZ(index, z) {\n    this.array[index * this.itemSize + 2] = z;\n    return this;\n  },\n  getW: function getW(index) {\n    return this.array[index * this.itemSize + 3];\n  },\n  setW: function setW(index, w) {\n    this.array[index * this.itemSize + 3] = w;\n    return this;\n  },\n  setXY: function setXY(index, x, y) {\n    index *= this.itemSize;\n    this.array[index + 0] = x;\n    this.array[index + 1] = y;\n    return this;\n  },\n  setXYZ: function setXYZ(index, x, y, z) {\n    index *= this.itemSize;\n    this.array[index + 0] = x;\n    this.array[index + 1] = y;\n    this.array[index + 2] = z;\n    return this;\n  },\n  setXYZW: function setXYZW(index, x, y, z, w) {\n    index *= this.itemSize;\n    this.array[index + 0] = x;\n    this.array[index + 1] = y;\n    this.array[index + 2] = z;\n    this.array[index + 3] = w;\n    return this;\n  },\n  onUpload: function onUpload(callback) {\n    this.onUploadCallback = callback;\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor(this.array, this.itemSize).copy(this);\n  },\n  toJSON: function toJSON() {\n    return {\n      itemSize: this.itemSize,\n      type: this.array.constructor.name,\n      array: Array.prototype.slice.call(this.array),\n      normalized: this.normalized\n    };\n  }\n}); //\n\nfunction Int8BufferAttribute(array, itemSize, normalized) {\n  BufferAttribute.call(this, new Int8Array(array), itemSize, normalized);\n}\n\nInt8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\nfunction Uint8BufferAttribute(array, itemSize, normalized) {\n  BufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);\n}\n\nUint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\nfunction Uint8ClampedBufferAttribute(array, itemSize, normalized) {\n  BufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);\n}\n\nUint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\nfunction Int16BufferAttribute(array, itemSize, normalized) {\n  BufferAttribute.call(this, new Int16Array(array), itemSize, normalized);\n}\n\nInt16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\nfunction Uint16BufferAttribute(array, itemSize, normalized) {\n  BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n}\n\nUint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\nfunction Int32BufferAttribute(array, itemSize, normalized) {\n  BufferAttribute.call(this, new Int32Array(array), itemSize, normalized);\n}\n\nInt32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\nfunction Uint32BufferAttribute(array, itemSize, normalized) {\n  BufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);\n}\n\nUint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\nfunction Float32BufferAttribute(array, itemSize, normalized) {\n  BufferAttribute.call(this, new Float32Array(array), itemSize, normalized);\n}\n\nFloat32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\nfunction Float64BufferAttribute(array, itemSize, normalized) {\n  BufferAttribute.call(this, new Float64Array(array), itemSize, normalized);\n}\n\nFloat64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute; //\n\nexport { Float64BufferAttribute, Float32BufferAttribute, Uint32BufferAttribute, Int32BufferAttribute, Uint16BufferAttribute, Int16BufferAttribute, Uint8ClampedBufferAttribute, Uint8BufferAttribute, Int8BufferAttribute, BufferAttribute };","/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { Vector2 } from '../math/Vector2.js';\n\nfunction DirectGeometry() {\n  this.vertices = [];\n  this.normals = [];\n  this.colors = [];\n  this.uvs = [];\n  this.uvs2 = [];\n  this.groups = [];\n  this.morphTargets = {};\n  this.skinWeights = [];\n  this.skinIndices = []; // this.lineDistances = [];\n\n  this.boundingBox = null;\n  this.boundingSphere = null; // update flags\n\n  this.verticesNeedUpdate = false;\n  this.normalsNeedUpdate = false;\n  this.colorsNeedUpdate = false;\n  this.uvsNeedUpdate = false;\n  this.groupsNeedUpdate = false;\n}\n\nObject.assign(DirectGeometry.prototype, {\n  computeGroups: function computeGroups(geometry) {\n    var group;\n    var groups = [];\n    var materialIndex = undefined;\n    var faces = geometry.faces;\n\n    for (var i = 0; i < faces.length; i++) {\n      var face = faces[i]; // materials\n\n      if (face.materialIndex !== materialIndex) {\n        materialIndex = face.materialIndex;\n\n        if (group !== undefined) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n\n        group = {\n          start: i * 3,\n          materialIndex: materialIndex\n        };\n      }\n    }\n\n    if (group !== undefined) {\n      group.count = i * 3 - group.start;\n      groups.push(group);\n    }\n\n    this.groups = groups;\n  },\n  fromGeometry: function fromGeometry(geometry) {\n    var faces = geometry.faces;\n    var vertices = geometry.vertices;\n    var faceVertexUvs = geometry.faceVertexUvs;\n    var hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n    var hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0; // morphs\n\n    var morphTargets = geometry.morphTargets;\n    var morphTargetsLength = morphTargets.length;\n    var morphTargetsPosition;\n\n    if (morphTargetsLength > 0) {\n      morphTargetsPosition = [];\n\n      for (var i = 0; i < morphTargetsLength; i++) {\n        morphTargetsPosition[i] = {\n          name: morphTargets[i].name,\n          data: []\n        };\n      }\n\n      this.morphTargets.position = morphTargetsPosition;\n    }\n\n    var morphNormals = geometry.morphNormals;\n    var morphNormalsLength = morphNormals.length;\n    var morphTargetsNormal;\n\n    if (morphNormalsLength > 0) {\n      morphTargetsNormal = [];\n\n      for (var i = 0; i < morphNormalsLength; i++) {\n        morphTargetsNormal[i] = {\n          name: morphNormals[i].name,\n          data: []\n        };\n      }\n\n      this.morphTargets.normal = morphTargetsNormal;\n    } // skins\n\n\n    var skinIndices = geometry.skinIndices;\n    var skinWeights = geometry.skinWeights;\n    var hasSkinIndices = skinIndices.length === vertices.length;\n    var hasSkinWeights = skinWeights.length === vertices.length; //\n\n    if (vertices.length > 0 && faces.length === 0) {\n      console.error('THREE.DirectGeometry: Faceless geometries are not supported.');\n    }\n\n    for (var i = 0; i < faces.length; i++) {\n      var face = faces[i];\n      this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);\n      var vertexNormals = face.vertexNormals;\n\n      if (vertexNormals.length === 3) {\n        this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);\n      } else {\n        var normal = face.normal;\n        this.normals.push(normal, normal, normal);\n      }\n\n      var vertexColors = face.vertexColors;\n\n      if (vertexColors.length === 3) {\n        this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n      } else {\n        var color = face.color;\n        this.colors.push(color, color, color);\n      }\n\n      if (hasFaceVertexUv === true) {\n        var vertexUvs = faceVertexUvs[0][i];\n\n        if (vertexUvs !== undefined) {\n          this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n        } else {\n          console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i);\n          this.uvs.push(new Vector2(), new Vector2(), new Vector2());\n        }\n      }\n\n      if (hasFaceVertexUv2 === true) {\n        var vertexUvs = faceVertexUvs[1][i];\n\n        if (vertexUvs !== undefined) {\n          this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n        } else {\n          console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i);\n          this.uvs2.push(new Vector2(), new Vector2(), new Vector2());\n        }\n      } // morphs\n\n\n      for (var j = 0; j < morphTargetsLength; j++) {\n        var morphTarget = morphTargets[j].vertices;\n        morphTargetsPosition[j].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);\n      }\n\n      for (var j = 0; j < morphNormalsLength; j++) {\n        var morphNormal = morphNormals[j].vertexNormals[i];\n        morphTargetsNormal[j].data.push(morphNormal.a, morphNormal.b, morphNormal.c);\n      } // skins\n\n\n      if (hasSkinIndices) {\n        this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);\n      }\n\n      if (hasSkinWeights) {\n        this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);\n      }\n    }\n\n    this.computeGroups(geometry);\n    this.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    this.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    this.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    this.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    this.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n    if (geometry.boundingSphere !== null) {\n      this.boundingSphere = geometry.boundingSphere.clone();\n    }\n\n    if (geometry.boundingBox !== null) {\n      this.boundingBox = geometry.boundingBox.clone();\n    }\n\n    return this;\n  }\n});\nexport { DirectGeometry };","import { Vector3 } from '../math/Vector3.js';\nimport { Box3 } from '../math/Box3.js';\nimport { EventDispatcher } from './EventDispatcher.js';\nimport { BufferAttribute, Float32BufferAttribute, Uint16BufferAttribute, Uint32BufferAttribute } from './BufferAttribute.js';\nimport { Sphere } from '../math/Sphere.js';\nimport { DirectGeometry } from './DirectGeometry.js';\nimport { Object3D } from './Object3D.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport { _Math } from '../math/Math.js';\nimport { arrayMax } from '../utils.js';\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\nfunction BufferGeometry() {\n  Object.defineProperty(this, 'id', {\n    value: bufferGeometryId += 2\n  });\n  this.uuid = _Math.generateUUID();\n  this.name = '';\n  this.type = 'BufferGeometry';\n  this.index = null;\n  this.attributes = {};\n  this.morphAttributes = {};\n  this.groups = [];\n  this.boundingBox = null;\n  this.boundingSphere = null;\n  this.drawRange = {\n    start: 0,\n    count: Infinity\n  };\n  this.userData = {};\n}\n\nBufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n  constructor: BufferGeometry,\n  isBufferGeometry: true,\n  getIndex: function getIndex() {\n    return this.index;\n  },\n  setIndex: function setIndex(index) {\n    if (Array.isArray(index)) {\n      this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n    } else {\n      this.index = index;\n    }\n  },\n  addAttribute: function addAttribute(name, attribute) {\n    if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n      console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n      return this.addAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n    }\n\n    if (name === 'index') {\n      console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n      this.setIndex(attribute);\n      return this;\n    }\n\n    this.attributes[name] = attribute;\n    return this;\n  },\n  getAttribute: function getAttribute(name) {\n    return this.attributes[name];\n  },\n  removeAttribute: function removeAttribute(name) {\n    delete this.attributes[name];\n    return this;\n  },\n  addGroup: function addGroup(start, count, materialIndex) {\n    this.groups.push({\n      start: start,\n      count: count,\n      materialIndex: materialIndex !== undefined ? materialIndex : 0\n    });\n  },\n  clearGroups: function clearGroups() {\n    this.groups = [];\n  },\n  setDrawRange: function setDrawRange(start, count) {\n    this.drawRange.start = start;\n    this.drawRange.count = count;\n  },\n  applyMatrix: function applyMatrix(matrix) {\n    var position = this.attributes.position;\n\n    if (position !== undefined) {\n      matrix.applyToBufferAttribute(position);\n      position.needsUpdate = true;\n    }\n\n    var normal = this.attributes.normal;\n\n    if (normal !== undefined) {\n      var normalMatrix = new Matrix3().getNormalMatrix(matrix);\n      normalMatrix.applyToBufferAttribute(normal);\n      normal.needsUpdate = true;\n    }\n\n    var tangent = this.attributes.tangent;\n\n    if (tangent !== undefined) {\n      var normalMatrix = new Matrix3().getNormalMatrix(matrix); // Tangent is vec4, but the '.w' component is a sign value (+1/-1).\n\n      normalMatrix.applyToBufferAttribute(tangent);\n      tangent.needsUpdate = true;\n    }\n\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n\n    return this;\n  },\n  rotateX: function () {\n    // rotate geometry around world x-axis\n    var m1 = new Matrix4();\n    return function rotateX(angle) {\n      m1.makeRotationX(angle);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  rotateY: function () {\n    // rotate geometry around world y-axis\n    var m1 = new Matrix4();\n    return function rotateY(angle) {\n      m1.makeRotationY(angle);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  rotateZ: function () {\n    // rotate geometry around world z-axis\n    var m1 = new Matrix4();\n    return function rotateZ(angle) {\n      m1.makeRotationZ(angle);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  translate: function () {\n    // translate geometry\n    var m1 = new Matrix4();\n    return function translate(x, y, z) {\n      m1.makeTranslation(x, y, z);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  scale: function () {\n    // scale geometry\n    var m1 = new Matrix4();\n    return function scale(x, y, z) {\n      m1.makeScale(x, y, z);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  lookAt: function () {\n    var obj = new Object3D();\n    return function lookAt(vector) {\n      obj.lookAt(vector);\n      obj.updateMatrix();\n      this.applyMatrix(obj.matrix);\n    };\n  }(),\n  center: function () {\n    var offset = new Vector3();\n    return function center() {\n      this.computeBoundingBox();\n      this.boundingBox.getCenter(offset).negate();\n      this.translate(offset.x, offset.y, offset.z);\n      return this;\n    };\n  }(),\n  setFromObject: function setFromObject(object) {\n    // console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n    var geometry = object.geometry;\n\n    if (object.isPoints || object.isLine) {\n      var positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);\n      var colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);\n      this.addAttribute('position', positions.copyVector3sArray(geometry.vertices));\n      this.addAttribute('color', colors.copyColorsArray(geometry.colors));\n\n      if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {\n        var lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);\n        this.addAttribute('lineDistance', lineDistances.copyArray(geometry.lineDistances));\n      }\n\n      if (geometry.boundingSphere !== null) {\n        this.boundingSphere = geometry.boundingSphere.clone();\n      }\n\n      if (geometry.boundingBox !== null) {\n        this.boundingBox = geometry.boundingBox.clone();\n      }\n    } else if (object.isMesh) {\n      if (geometry && geometry.isGeometry) {\n        this.fromGeometry(geometry);\n      }\n    }\n\n    return this;\n  },\n  setFromPoints: function setFromPoints(points) {\n    var position = [];\n\n    for (var i = 0, l = points.length; i < l; i++) {\n      var point = points[i];\n      position.push(point.x, point.y, point.z || 0);\n    }\n\n    this.addAttribute('position', new Float32BufferAttribute(position, 3));\n    return this;\n  },\n  updateFromObject: function updateFromObject(object) {\n    var geometry = object.geometry;\n\n    if (object.isMesh) {\n      var direct = geometry.__directGeometry;\n\n      if (geometry.elementsNeedUpdate === true) {\n        direct = undefined;\n        geometry.elementsNeedUpdate = false;\n      }\n\n      if (direct === undefined) {\n        return this.fromGeometry(geometry);\n      }\n\n      direct.verticesNeedUpdate = geometry.verticesNeedUpdate;\n      direct.normalsNeedUpdate = geometry.normalsNeedUpdate;\n      direct.colorsNeedUpdate = geometry.colorsNeedUpdate;\n      direct.uvsNeedUpdate = geometry.uvsNeedUpdate;\n      direct.groupsNeedUpdate = geometry.groupsNeedUpdate;\n      geometry.verticesNeedUpdate = false;\n      geometry.normalsNeedUpdate = false;\n      geometry.colorsNeedUpdate = false;\n      geometry.uvsNeedUpdate = false;\n      geometry.groupsNeedUpdate = false;\n      geometry = direct;\n    }\n\n    var attribute;\n\n    if (geometry.verticesNeedUpdate === true) {\n      attribute = this.attributes.position;\n\n      if (attribute !== undefined) {\n        attribute.copyVector3sArray(geometry.vertices);\n        attribute.needsUpdate = true;\n      }\n\n      geometry.verticesNeedUpdate = false;\n    }\n\n    if (geometry.normalsNeedUpdate === true) {\n      attribute = this.attributes.normal;\n\n      if (attribute !== undefined) {\n        attribute.copyVector3sArray(geometry.normals);\n        attribute.needsUpdate = true;\n      }\n\n      geometry.normalsNeedUpdate = false;\n    }\n\n    if (geometry.colorsNeedUpdate === true) {\n      attribute = this.attributes.color;\n\n      if (attribute !== undefined) {\n        attribute.copyColorsArray(geometry.colors);\n        attribute.needsUpdate = true;\n      }\n\n      geometry.colorsNeedUpdate = false;\n    }\n\n    if (geometry.uvsNeedUpdate) {\n      attribute = this.attributes.uv;\n\n      if (attribute !== undefined) {\n        attribute.copyVector2sArray(geometry.uvs);\n        attribute.needsUpdate = true;\n      }\n\n      geometry.uvsNeedUpdate = false;\n    }\n\n    if (geometry.lineDistancesNeedUpdate) {\n      attribute = this.attributes.lineDistance;\n\n      if (attribute !== undefined) {\n        attribute.copyArray(geometry.lineDistances);\n        attribute.needsUpdate = true;\n      }\n\n      geometry.lineDistancesNeedUpdate = false;\n    }\n\n    if (geometry.groupsNeedUpdate) {\n      geometry.computeGroups(object.geometry);\n      this.groups = geometry.groups;\n      geometry.groupsNeedUpdate = false;\n    }\n\n    return this;\n  },\n  fromGeometry: function fromGeometry(geometry) {\n    geometry.__directGeometry = new DirectGeometry().fromGeometry(geometry);\n    return this.fromDirectGeometry(geometry.__directGeometry);\n  },\n  fromDirectGeometry: function fromDirectGeometry(geometry) {\n    var positions = new Float32Array(geometry.vertices.length * 3);\n    this.addAttribute('position', new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));\n\n    if (geometry.normals.length > 0) {\n      var normals = new Float32Array(geometry.normals.length * 3);\n      this.addAttribute('normal', new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));\n    }\n\n    if (geometry.colors.length > 0) {\n      var colors = new Float32Array(geometry.colors.length * 3);\n      this.addAttribute('color', new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));\n    }\n\n    if (geometry.uvs.length > 0) {\n      var uvs = new Float32Array(geometry.uvs.length * 2);\n      this.addAttribute('uv', new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));\n    }\n\n    if (geometry.uvs2.length > 0) {\n      var uvs2 = new Float32Array(geometry.uvs2.length * 2);\n      this.addAttribute('uv2', new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));\n    } // groups\n\n\n    this.groups = geometry.groups; // morphs\n\n    for (var name in geometry.morphTargets) {\n      var array = [];\n      var morphTargets = geometry.morphTargets[name];\n\n      for (var i = 0, l = morphTargets.length; i < l; i++) {\n        var morphTarget = morphTargets[i];\n        var attribute = new Float32BufferAttribute(morphTarget.data.length * 3, 3);\n        attribute.name = morphTarget.name;\n        array.push(attribute.copyVector3sArray(morphTarget.data));\n      }\n\n      this.morphAttributes[name] = array;\n    } // skinning\n\n\n    if (geometry.skinIndices.length > 0) {\n      var skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);\n      this.addAttribute('skinIndex', skinIndices.copyVector4sArray(geometry.skinIndices));\n    }\n\n    if (geometry.skinWeights.length > 0) {\n      var skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);\n      this.addAttribute('skinWeight', skinWeights.copyVector4sArray(geometry.skinWeights));\n    } //\n\n\n    if (geometry.boundingSphere !== null) {\n      this.boundingSphere = geometry.boundingSphere.clone();\n    }\n\n    if (geometry.boundingBox !== null) {\n      this.boundingBox = geometry.boundingBox.clone();\n    }\n\n    return this;\n  },\n  computeBoundingBox: function () {\n    var box = new Box3();\n    return function computeBoundingBox() {\n      if (this.boundingBox === null) {\n        this.boundingBox = new Box3();\n      }\n\n      var position = this.attributes.position;\n      var morphAttributesPosition = this.morphAttributes.position;\n\n      if (position !== undefined) {\n        this.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n        if (morphAttributesPosition) {\n          for (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n            var morphAttribute = morphAttributesPosition[i];\n            box.setFromBufferAttribute(morphAttribute);\n            this.boundingBox.expandByPoint(box.min);\n            this.boundingBox.expandByPoint(box.max);\n          }\n        }\n      } else {\n        this.boundingBox.makeEmpty();\n      }\n\n      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n        console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n      }\n    };\n  }(),\n  computeBoundingSphere: function () {\n    var box = new Box3();\n    var boxMorphTargets = new Box3();\n    var vector = new Vector3();\n    return function computeBoundingSphere() {\n      if (this.boundingSphere === null) {\n        this.boundingSphere = new Sphere();\n      }\n\n      var position = this.attributes.position;\n      var morphAttributesPosition = this.morphAttributes.position;\n\n      if (position) {\n        // first, find the center of the bounding sphere\n        var center = this.boundingSphere.center;\n        box.setFromBufferAttribute(position); // process morph attributes if present\n\n        if (morphAttributesPosition) {\n          for (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n            var morphAttribute = morphAttributesPosition[i];\n            boxMorphTargets.setFromBufferAttribute(morphAttribute);\n            box.expandByPoint(boxMorphTargets.min);\n            box.expandByPoint(boxMorphTargets.max);\n          }\n        }\n\n        box.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n        // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n        var maxRadiusSq = 0;\n\n        for (var i = 0, il = position.count; i < il; i++) {\n          vector.fromBufferAttribute(position, i);\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\n        } // process morph attributes if present\n\n\n        if (morphAttributesPosition) {\n          for (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n            var morphAttribute = morphAttributesPosition[i];\n\n            for (var j = 0, jl = morphAttribute.count; j < jl; j++) {\n              vector.fromBufferAttribute(morphAttribute, j);\n              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\n            }\n          }\n        }\n\n        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n        if (isNaN(this.boundingSphere.radius)) {\n          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n        }\n      }\n    };\n  }(),\n  computeFaceNormals: function computeFaceNormals() {// backwards compatibility\n  },\n  computeVertexNormals: function computeVertexNormals() {\n    var index = this.index;\n    var attributes = this.attributes;\n\n    if (attributes.position) {\n      var positions = attributes.position.array;\n\n      if (attributes.normal === undefined) {\n        this.addAttribute('normal', new BufferAttribute(new Float32Array(positions.length), 3));\n      } else {\n        // reset existing normals to zero\n        var array = attributes.normal.array;\n\n        for (var i = 0, il = array.length; i < il; i++) {\n          array[i] = 0;\n        }\n      }\n\n      var normals = attributes.normal.array;\n      var vA, vB, vC;\n      var pA = new Vector3(),\n          pB = new Vector3(),\n          pC = new Vector3();\n      var cb = new Vector3(),\n          ab = new Vector3(); // indexed elements\n\n      if (index) {\n        var indices = index.array;\n\n        for (var i = 0, il = index.count; i < il; i += 3) {\n          vA = indices[i + 0] * 3;\n          vB = indices[i + 1] * 3;\n          vC = indices[i + 2] * 3;\n          pA.fromArray(positions, vA);\n          pB.fromArray(positions, vB);\n          pC.fromArray(positions, vC);\n          cb.subVectors(pC, pB);\n          ab.subVectors(pA, pB);\n          cb.cross(ab);\n          normals[vA] += cb.x;\n          normals[vA + 1] += cb.y;\n          normals[vA + 2] += cb.z;\n          normals[vB] += cb.x;\n          normals[vB + 1] += cb.y;\n          normals[vB + 2] += cb.z;\n          normals[vC] += cb.x;\n          normals[vC + 1] += cb.y;\n          normals[vC + 2] += cb.z;\n        }\n      } else {\n        // non-indexed elements (unconnected triangle soup)\n        for (var i = 0, il = positions.length; i < il; i += 9) {\n          pA.fromArray(positions, i);\n          pB.fromArray(positions, i + 3);\n          pC.fromArray(positions, i + 6);\n          cb.subVectors(pC, pB);\n          ab.subVectors(pA, pB);\n          cb.cross(ab);\n          normals[i] = cb.x;\n          normals[i + 1] = cb.y;\n          normals[i + 2] = cb.z;\n          normals[i + 3] = cb.x;\n          normals[i + 4] = cb.y;\n          normals[i + 5] = cb.z;\n          normals[i + 6] = cb.x;\n          normals[i + 7] = cb.y;\n          normals[i + 8] = cb.z;\n        }\n      }\n\n      this.normalizeNormals();\n      attributes.normal.needsUpdate = true;\n    }\n  },\n  merge: function merge(geometry, offset) {\n    if (!(geometry && geometry.isBufferGeometry)) {\n      console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n      return;\n    }\n\n    if (offset === undefined) {\n      offset = 0;\n      console.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n    }\n\n    var attributes = this.attributes;\n\n    for (var key in attributes) {\n      if (geometry.attributes[key] === undefined) continue;\n      var attribute1 = attributes[key];\n      var attributeArray1 = attribute1.array;\n      var attribute2 = geometry.attributes[key];\n      var attributeArray2 = attribute2.array;\n      var attributeOffset = attribute2.itemSize * offset;\n      var length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n      for (var i = 0, j = attributeOffset; i < length; i++, j++) {\n        attributeArray1[j] = attributeArray2[i];\n      }\n    }\n\n    return this;\n  },\n  normalizeNormals: function () {\n    var vector = new Vector3();\n    return function normalizeNormals() {\n      var normals = this.attributes.normal;\n\n      for (var i = 0, il = normals.count; i < il; i++) {\n        vector.x = normals.getX(i);\n        vector.y = normals.getY(i);\n        vector.z = normals.getZ(i);\n        vector.normalize();\n        normals.setXYZ(i, vector.x, vector.y, vector.z);\n      }\n    };\n  }(),\n  toNonIndexed: function toNonIndexed() {\n    function convertBufferAttribute(attribute, indices) {\n      var array = attribute.array;\n      var itemSize = attribute.itemSize;\n      var array2 = new array.constructor(indices.length * itemSize);\n      var index = 0,\n          index2 = 0;\n\n      for (var i = 0, l = indices.length; i < l; i++) {\n        index = indices[i] * itemSize;\n\n        for (var j = 0; j < itemSize; j++) {\n          array2[index2++] = array[index++];\n        }\n      }\n\n      return new BufferAttribute(array2, itemSize);\n    } //\n\n\n    if (this.index === null) {\n      console.warn('THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.');\n      return this;\n    }\n\n    var geometry2 = new BufferGeometry();\n    var indices = this.index.array;\n    var attributes = this.attributes; // attributes\n\n    for (var name in attributes) {\n      var attribute = attributes[name];\n      var newAttribute = convertBufferAttribute(attribute, indices);\n      geometry2.addAttribute(name, newAttribute);\n    } // morph attributes\n\n\n    var morphAttributes = this.morphAttributes;\n\n    for (name in morphAttributes) {\n      var morphArray = [];\n      var morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n      for (var i = 0, il = morphAttribute.length; i < il; i++) {\n        var attribute = morphAttribute[i];\n        var newAttribute = convertBufferAttribute(attribute, indices);\n        morphArray.push(newAttribute);\n      }\n\n      geometry2.morphAttributes[name] = morphArray;\n    } // groups\n\n\n    var groups = this.groups;\n\n    for (var i = 0, l = groups.length; i < l; i++) {\n      var group = groups[i];\n      geometry2.addGroup(group.start, group.count, group.materialIndex);\n    }\n\n    return geometry2;\n  },\n  toJSON: function toJSON() {\n    var data = {\n      metadata: {\n        version: 4.5,\n        type: 'BufferGeometry',\n        generator: 'BufferGeometry.toJSON'\n      }\n    }; // standard BufferGeometry serialization\n\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n    if (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n    if (this.parameters !== undefined) {\n      var parameters = this.parameters;\n\n      for (var key in parameters) {\n        if (parameters[key] !== undefined) data[key] = parameters[key];\n      }\n\n      return data;\n    }\n\n    data.data = {\n      attributes: {}\n    };\n    var index = this.index;\n\n    if (index !== null) {\n      data.data.index = {\n        type: index.array.constructor.name,\n        array: Array.prototype.slice.call(index.array)\n      };\n    }\n\n    var attributes = this.attributes;\n\n    for (var key in attributes) {\n      var attribute = attributes[key];\n      var attributeData = attribute.toJSON();\n      if (attribute.name !== '') attributeData.name = attribute.name;\n      data.data.attributes[key] = attributeData;\n    }\n\n    var morphAttributes = {};\n    var hasMorphAttributes = false;\n\n    for (var key in this.morphAttributes) {\n      var attributeArray = this.morphAttributes[key];\n      var array = [];\n\n      for (var i = 0, il = attributeArray.length; i < il; i++) {\n        var attribute = attributeArray[i];\n        var attributeData = attribute.toJSON();\n        if (attribute.name !== '') attributeData.name = attribute.name;\n        array.push(attributeData);\n      }\n\n      if (array.length > 0) {\n        morphAttributes[key] = array;\n        hasMorphAttributes = true;\n      }\n    }\n\n    if (hasMorphAttributes) data.data.morphAttributes = morphAttributes;\n    var groups = this.groups;\n\n    if (groups.length > 0) {\n      data.data.groups = JSON.parse(JSON.stringify(groups));\n    }\n\n    var boundingSphere = this.boundingSphere;\n\n    if (boundingSphere !== null) {\n      data.data.boundingSphere = {\n        center: boundingSphere.center.toArray(),\n        radius: boundingSphere.radius\n      };\n    }\n\n    return data;\n  },\n  clone: function clone() {\n    /*\n     // Handle primitives\n    \t var parameters = this.parameters;\n    \t if ( parameters !== undefined ) {\n    \t var values = [];\n    \t for ( var key in parameters ) {\n    \t values.push( parameters[ key ] );\n    \t }\n    \t var geometry = Object.create( this.constructor.prototype );\n     this.constructor.apply( geometry, values );\n     return geometry;\n    \t }\n    \t return new this.constructor().copy( this );\n     */\n    return new BufferGeometry().copy(this);\n  },\n  copy: function copy(source) {\n    var name, i, l; // reset\n\n    this.index = null;\n    this.attributes = {};\n    this.morphAttributes = {};\n    this.groups = [];\n    this.boundingBox = null;\n    this.boundingSphere = null; // name\n\n    this.name = source.name; // index\n\n    var index = source.index;\n\n    if (index !== null) {\n      this.setIndex(index.clone());\n    } // attributes\n\n\n    var attributes = source.attributes;\n\n    for (name in attributes) {\n      var attribute = attributes[name];\n      this.addAttribute(name, attribute.clone());\n    } // morph attributes\n\n\n    var morphAttributes = source.morphAttributes;\n\n    for (name in morphAttributes) {\n      var array = [];\n      var morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n      for (i = 0, l = morphAttribute.length; i < l; i++) {\n        array.push(morphAttribute[i].clone());\n      }\n\n      this.morphAttributes[name] = array;\n    } // groups\n\n\n    var groups = source.groups;\n\n    for (i = 0, l = groups.length; i < l; i++) {\n      var group = groups[i];\n      this.addGroup(group.start, group.count, group.materialIndex);\n    } // bounding box\n\n\n    var boundingBox = source.boundingBox;\n\n    if (boundingBox !== null) {\n      this.boundingBox = boundingBox.clone();\n    } // bounding sphere\n\n\n    var boundingSphere = source.boundingSphere;\n\n    if (boundingSphere !== null) {\n      this.boundingSphere = boundingSphere.clone();\n    } // draw range\n\n\n    this.drawRange.start = source.drawRange.start;\n    this.drawRange.count = source.drawRange.count; // user data\n\n    this.userData = source.userData;\n    return this;\n  },\n  dispose: function dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n});\nexport { BufferGeometry };","/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction arrayMin(array) {\n  if (array.length === 0) return Infinity;\n  var min = array[0];\n\n  for (var i = 1, l = array.length; i < l; ++i) {\n    if (array[i] < min) min = array[i];\n  }\n\n  return min;\n}\n\nfunction arrayMax(array) {\n  if (array.length === 0) return -Infinity;\n  var max = array[0];\n\n  for (var i = 1, l = array.length; i < l; ++i) {\n    if (array[i] > max) max = array[i];\n  }\n\n  return max;\n}\n\nexport { arrayMin, arrayMax };","/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com\n * @author chaht01 / http://hyuntak.com\n * Port of http://webglsamples.org/blob/blob.html\n */\nimport { BufferAttribute, BufferGeometry, Color, ImmediateRenderObject, NoColors } from \"../../../build/three.module.js\";\n\nvar MarchingCubes = function MarchingCubes(resolution, material, enableUvs, enableColors) {\n  ImmediateRenderObject.call(this, material);\n  var scope = this; // temp buffers used in polygonize\n\n  var vlist = new Float32Array(12 * 3);\n  var nlist = new Float32Array(12 * 3);\n  var clist = new Float32Array(12 * 3);\n  this.enableUvs = enableUvs !== undefined ? enableUvs : false;\n  this.enableColors = enableColors !== undefined ? enableColors : false; // functions have to be object properties\n  // prototype functions kill performance\n  // (tested and it was 4x slower !!!)\n\n  this.init = function (resolution) {\n    this.resolution = resolution; // parameters\n\n    this.isolation = 80.0; // size of field, 32 is pushing it in Javascript :)\n\n    this.size = resolution;\n    this.size2 = this.size * this.size;\n    this.size3 = this.size2 * this.size;\n    this.halfsize = this.size / 2.0; // deltas\n\n    this.delta = 2.0 / this.size;\n    this.yd = this.size;\n    this.zd = this.size2;\n    this.field = new Float32Array(this.size3);\n    this.normal_cache = new Float32Array(this.size3 * 3);\n    this.palette = new Float32Array(this.size3 * 3); // immediate render mode simulator\n\n    this.maxCount = 4096; // TODO: find the fastest size for this buffer\n\n    this.count = 0;\n    this.hasPositions = false;\n    this.hasNormals = false;\n    this.hasColors = false;\n    this.hasUvs = false;\n    this.positionArray = new Float32Array(this.maxCount * 3);\n    this.normalArray = new Float32Array(this.maxCount * 3);\n\n    if (this.enableUvs) {\n      this.uvArray = new Float32Array(this.maxCount * 2);\n    }\n\n    if (this.enableColors) {\n      this.colorArray = new Float32Array(this.maxCount * 3);\n    }\n  }; ///////////////////////\n  // Polygonization\n  ///////////////////////\n\n\n  function lerp(a, b, t) {\n    return a + (b - a) * t;\n  }\n\n  function VIntX(q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2) {\n    var mu = (isol - valp1) / (valp2 - valp1),\n        nc = scope.normal_cache;\n    vlist[offset + 0] = x + mu * scope.delta;\n    vlist[offset + 1] = y;\n    vlist[offset + 2] = z;\n    nlist[offset + 0] = lerp(nc[q + 0], nc[q + 3], mu);\n    nlist[offset + 1] = lerp(nc[q + 1], nc[q + 4], mu);\n    nlist[offset + 2] = lerp(nc[q + 2], nc[q + 5], mu);\n    clist[offset + 0] = lerp(scope.palette[c_offset1 * 3 + 0], scope.palette[c_offset2 * 3 + 0], mu);\n    clist[offset + 1] = lerp(scope.palette[c_offset1 * 3 + 1], scope.palette[c_offset2 * 3 + 1], mu);\n    clist[offset + 2] = lerp(scope.palette[c_offset1 * 3 + 2], scope.palette[c_offset2 * 3 + 2], mu);\n  }\n\n  function VIntY(q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2) {\n    var mu = (isol - valp1) / (valp2 - valp1),\n        nc = scope.normal_cache;\n    vlist[offset + 0] = x;\n    vlist[offset + 1] = y + mu * scope.delta;\n    vlist[offset + 2] = z;\n    var q2 = q + scope.yd * 3;\n    nlist[offset + 0] = lerp(nc[q + 0], nc[q2 + 0], mu);\n    nlist[offset + 1] = lerp(nc[q + 1], nc[q2 + 1], mu);\n    nlist[offset + 2] = lerp(nc[q + 2], nc[q2 + 2], mu);\n    clist[offset + 0] = lerp(scope.palette[c_offset1 * 3 + 0], scope.palette[c_offset2 * 3 + 0], mu);\n    clist[offset + 1] = lerp(scope.palette[c_offset1 * 3 + 1], scope.palette[c_offset2 * 3 + 1], mu);\n    clist[offset + 2] = lerp(scope.palette[c_offset1 * 3 + 2], scope.palette[c_offset2 * 3 + 2], mu);\n  }\n\n  function VIntZ(q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2) {\n    var mu = (isol - valp1) / (valp2 - valp1),\n        nc = scope.normal_cache;\n    vlist[offset + 0] = x;\n    vlist[offset + 1] = y;\n    vlist[offset + 2] = z + mu * scope.delta;\n    var q2 = q + scope.zd * 3;\n    nlist[offset + 0] = lerp(nc[q + 0], nc[q2 + 0], mu);\n    nlist[offset + 1] = lerp(nc[q + 1], nc[q2 + 1], mu);\n    nlist[offset + 2] = lerp(nc[q + 2], nc[q2 + 2], mu);\n    clist[offset + 0] = lerp(scope.palette[c_offset1 * 3 + 0], scope.palette[c_offset2 * 3 + 0], mu);\n    clist[offset + 1] = lerp(scope.palette[c_offset1 * 3 + 1], scope.palette[c_offset2 * 3 + 1], mu);\n    clist[offset + 2] = lerp(scope.palette[c_offset1 * 3 + 2], scope.palette[c_offset2 * 3 + 2], mu);\n  }\n\n  function compNorm(q) {\n    var q3 = q * 3;\n\n    if (scope.normal_cache[q3] === 0.0) {\n      scope.normal_cache[q3 + 0] = scope.field[q - 1] - scope.field[q + 1];\n      scope.normal_cache[q3 + 1] = scope.field[q - scope.yd] - scope.field[q + scope.yd];\n      scope.normal_cache[q3 + 2] = scope.field[q - scope.zd] - scope.field[q + scope.zd];\n    }\n  } // Returns total number of triangles. Fills triangles.\n  // (this is where most of time is spent - it's inner work of O(n3) loop )\n\n\n  function polygonize(fx, fy, fz, q, isol, renderCallback) {\n    // cache indices\n    var q1 = q + 1,\n        qy = q + scope.yd,\n        qz = q + scope.zd,\n        q1y = q1 + scope.yd,\n        q1z = q1 + scope.zd,\n        qyz = q + scope.yd + scope.zd,\n        q1yz = q1 + scope.yd + scope.zd;\n    var cubeindex = 0,\n        field0 = scope.field[q],\n        field1 = scope.field[q1],\n        field2 = scope.field[qy],\n        field3 = scope.field[q1y],\n        field4 = scope.field[qz],\n        field5 = scope.field[q1z],\n        field6 = scope.field[qyz],\n        field7 = scope.field[q1yz];\n    if (field0 < isol) cubeindex |= 1;\n    if (field1 < isol) cubeindex |= 2;\n    if (field2 < isol) cubeindex |= 8;\n    if (field3 < isol) cubeindex |= 4;\n    if (field4 < isol) cubeindex |= 16;\n    if (field5 < isol) cubeindex |= 32;\n    if (field6 < isol) cubeindex |= 128;\n    if (field7 < isol) cubeindex |= 64; // if cube is entirely in/out of the surface - bail, nothing to draw\n\n    var bits = edgeTable[cubeindex];\n    if (bits === 0) return 0;\n    var d = scope.delta,\n        fx2 = fx + d,\n        fy2 = fy + d,\n        fz2 = fz + d; // top of the cube\n\n    if (bits & 1) {\n      compNorm(q);\n      compNorm(q1);\n      VIntX(q * 3, 0, isol, fx, fy, fz, field0, field1, q, q1);\n    }\n\n    if (bits & 2) {\n      compNorm(q1);\n      compNorm(q1y);\n      VIntY(q1 * 3, 3, isol, fx2, fy, fz, field1, field3, q1, q1y);\n    }\n\n    if (bits & 4) {\n      compNorm(qy);\n      compNorm(q1y);\n      VIntX(qy * 3, 6, isol, fx, fy2, fz, field2, field3, qy, q1y);\n    }\n\n    if (bits & 8) {\n      compNorm(q);\n      compNorm(qy);\n      VIntY(q * 3, 9, isol, fx, fy, fz, field0, field2, q, qy);\n    } // bottom of the cube\n\n\n    if (bits & 16) {\n      compNorm(qz);\n      compNorm(q1z);\n      VIntX(qz * 3, 12, isol, fx, fy, fz2, field4, field5, qz, q1z);\n    }\n\n    if (bits & 32) {\n      compNorm(q1z);\n      compNorm(q1yz);\n      VIntY(q1z * 3, 15, isol, fx2, fy, fz2, field5, field7, q1z, q1yz);\n    }\n\n    if (bits & 64) {\n      compNorm(qyz);\n      compNorm(q1yz);\n      VIntX(qyz * 3, 18, isol, fx, fy2, fz2, field6, field7, qyz, q1yz);\n    }\n\n    if (bits & 128) {\n      compNorm(qz);\n      compNorm(qyz);\n      VIntY(qz * 3, 21, isol, fx, fy, fz2, field4, field6, qz, qyz);\n    } // vertical lines of the cube\n\n\n    if (bits & 256) {\n      compNorm(q);\n      compNorm(qz);\n      VIntZ(q * 3, 24, isol, fx, fy, fz, field0, field4, q, qz);\n    }\n\n    if (bits & 512) {\n      compNorm(q1);\n      compNorm(q1z);\n      VIntZ(q1 * 3, 27, isol, fx2, fy, fz, field1, field5, q1, q1z);\n    }\n\n    if (bits & 1024) {\n      compNorm(q1y);\n      compNorm(q1yz);\n      VIntZ(q1y * 3, 30, isol, fx2, fy2, fz, field3, field7, q1y, q1yz);\n    }\n\n    if (bits & 2048) {\n      compNorm(qy);\n      compNorm(qyz);\n      VIntZ(qy * 3, 33, isol, fx, fy2, fz, field2, field6, qy, qyz);\n    }\n\n    cubeindex <<= 4; // re-purpose cubeindex into an offset into triTable\n\n    var o1,\n        o2,\n        o3,\n        numtris = 0,\n        i = 0; // here is where triangles are created\n\n    while (triTable[cubeindex + i] != -1) {\n      o1 = cubeindex + i;\n      o2 = o1 + 1;\n      o3 = o1 + 2;\n      posnormtriv(vlist, nlist, clist, 3 * triTable[o1], 3 * triTable[o2], 3 * triTable[o3], renderCallback);\n      i += 3;\n      numtris++;\n    }\n\n    return numtris;\n  } /////////////////////////////////////\n  // Immediate render mode simulator\n  /////////////////////////////////////\n\n\n  function posnormtriv(pos, norm, colors, o1, o2, o3, renderCallback) {\n    var c = scope.count * 3; // positions\n\n    scope.positionArray[c + 0] = pos[o1];\n    scope.positionArray[c + 1] = pos[o1 + 1];\n    scope.positionArray[c + 2] = pos[o1 + 2];\n    scope.positionArray[c + 3] = pos[o2];\n    scope.positionArray[c + 4] = pos[o2 + 1];\n    scope.positionArray[c + 5] = pos[o2 + 2];\n    scope.positionArray[c + 6] = pos[o3];\n    scope.positionArray[c + 7] = pos[o3 + 1];\n    scope.positionArray[c + 8] = pos[o3 + 2]; // normals\n\n    if (scope.material.flatShading === true) {\n      var nx = (norm[o1 + 0] + norm[o2 + 0] + norm[o3 + 0]) / 3;\n      var ny = (norm[o1 + 1] + norm[o2 + 1] + norm[o3 + 1]) / 3;\n      var nz = (norm[o1 + 2] + norm[o2 + 2] + norm[o3 + 2]) / 3;\n      scope.normalArray[c + 0] = nx;\n      scope.normalArray[c + 1] = ny;\n      scope.normalArray[c + 2] = nz;\n      scope.normalArray[c + 3] = nx;\n      scope.normalArray[c + 4] = ny;\n      scope.normalArray[c + 5] = nz;\n      scope.normalArray[c + 6] = nx;\n      scope.normalArray[c + 7] = ny;\n      scope.normalArray[c + 8] = nz;\n    } else {\n      scope.normalArray[c + 0] = norm[o1 + 0];\n      scope.normalArray[c + 1] = norm[o1 + 1];\n      scope.normalArray[c + 2] = norm[o1 + 2];\n      scope.normalArray[c + 3] = norm[o2 + 0];\n      scope.normalArray[c + 4] = norm[o2 + 1];\n      scope.normalArray[c + 5] = norm[o2 + 2];\n      scope.normalArray[c + 6] = norm[o3 + 0];\n      scope.normalArray[c + 7] = norm[o3 + 1];\n      scope.normalArray[c + 8] = norm[o3 + 2];\n    } // uvs\n\n\n    if (scope.enableUvs) {\n      var d = scope.count * 2;\n      scope.uvArray[d + 0] = pos[o1 + 0];\n      scope.uvArray[d + 1] = pos[o1 + 2];\n      scope.uvArray[d + 2] = pos[o2 + 0];\n      scope.uvArray[d + 3] = pos[o2 + 2];\n      scope.uvArray[d + 4] = pos[o3 + 0];\n      scope.uvArray[d + 5] = pos[o3 + 2];\n    } // colors\n\n\n    if (scope.enableColors) {\n      scope.colorArray[c + 0] = colors[o1 + 0];\n      scope.colorArray[c + 1] = colors[o1 + 1];\n      scope.colorArray[c + 2] = colors[o1 + 2];\n      scope.colorArray[c + 3] = colors[o2 + 0];\n      scope.colorArray[c + 4] = colors[o2 + 1];\n      scope.colorArray[c + 5] = colors[o2 + 2];\n      scope.colorArray[c + 6] = colors[o3 + 0];\n      scope.colorArray[c + 7] = colors[o3 + 1];\n      scope.colorArray[c + 8] = colors[o3 + 2];\n    }\n\n    scope.count += 3;\n\n    if (scope.count >= scope.maxCount - 3) {\n      scope.hasPositions = true;\n      scope.hasNormals = true;\n\n      if (scope.enableUvs) {\n        scope.hasUvs = true;\n      }\n\n      if (scope.enableColors) {\n        scope.hasColors = true;\n      }\n\n      renderCallback(scope);\n    }\n  }\n\n  this.begin = function () {\n    this.count = 0;\n    this.hasPositions = false;\n    this.hasNormals = false;\n    this.hasUvs = false;\n    this.hasColors = false;\n  };\n\n  this.end = function (renderCallback) {\n    if (this.count === 0) return;\n\n    for (var i = this.count * 3; i < this.positionArray.length; i++) {\n      this.positionArray[i] = 0.0;\n    }\n\n    this.hasPositions = true;\n    this.hasNormals = true;\n\n    if (this.enableUvs && this.material.map) {\n      this.hasUvs = true;\n    }\n\n    if (this.enableColors && this.material.vertexColors !== NoColors) {\n      this.hasColors = true;\n    }\n\n    renderCallback(this);\n  }; /////////////////////////////////////\n  // Metaballs\n  /////////////////////////////////////\n  // Adds a reciprocal ball (nice and blobby) that, to be fast, fades to zero after\n  // a fixed distance, determined by strength and subtract.\n\n\n  this.addBall = function (ballx, bally, ballz, strength, subtract, colors) {\n    var sign = Math.sign(strength);\n    strength = Math.abs(strength);\n    var userDefineColor = !(colors === undefined || colors === null);\n    var ballColor = new Color(ballx, bally, ballz);\n\n    if (userDefineColor) {\n      try {\n        ballColor = colors instanceof Color ? colors : Array.isArray(colors) ? new Color(Math.min(Math.abs(colors[0]), 1), Math.min(Math.abs(colors[1]), 1), Math.min(Math.abs(colors[2]), 1)) : new Color(colors);\n      } catch (err) {\n        ballColor = new Color(ballx, bally, ballz);\n      }\n    } // Let's solve the equation to find the radius:\n    // 1.0 / (0.000001 + radius^2) * strength - subtract = 0\n    // strength / (radius^2) = subtract\n    // strength = subtract * radius^2\n    // radius^2 = strength / subtract\n    // radius = sqrt(strength / subtract)\n\n\n    var radius = this.size * Math.sqrt(strength / subtract),\n        zs = ballz * this.size,\n        ys = bally * this.size,\n        xs = ballx * this.size;\n    var min_z = Math.floor(zs - radius);\n    if (min_z < 1) min_z = 1;\n    var max_z = Math.floor(zs + radius);\n    if (max_z > this.size - 1) max_z = this.size - 1;\n    var min_y = Math.floor(ys - radius);\n    if (min_y < 1) min_y = 1;\n    var max_y = Math.floor(ys + radius);\n    if (max_y > this.size - 1) max_y = this.size - 1;\n    var min_x = Math.floor(xs - radius);\n    if (min_x < 1) min_x = 1;\n    var max_x = Math.floor(xs + radius);\n    if (max_x > this.size - 1) max_x = this.size - 1; // Don't polygonize in the outer layer because normals aren't\n    // well-defined there.\n\n    var x, y, z, y_offset, z_offset, fx, fy, fz, fz2, fy2, val;\n\n    for (z = min_z; z < max_z; z++) {\n      z_offset = this.size2 * z;\n      fz = z / this.size - ballz;\n      fz2 = fz * fz;\n\n      for (y = min_y; y < max_y; y++) {\n        y_offset = z_offset + this.size * y;\n        fy = y / this.size - bally;\n        fy2 = fy * fy;\n\n        for (x = min_x; x < max_x; x++) {\n          fx = x / this.size - ballx;\n          val = strength / (0.000001 + fx * fx + fy2 + fz2) - subtract;\n\n          if (val > 0.0) {\n            this.field[y_offset + x] += val * sign; // optimization\n            // http://www.geisswerks.com/ryan/BLOBS/blobs.html\n\n            var ratio = Math.sqrt((x - xs) * (x - xs) + (y - ys) * (y - ys) + (z - zs) * (z - zs)) / radius;\n            var contrib = 1 - ratio * ratio * ratio * (ratio * (ratio * 6 - 15) + 10);\n            this.palette[(y_offset + x) * 3 + 0] += ballColor.r * contrib;\n            this.palette[(y_offset + x) * 3 + 1] += ballColor.g * contrib;\n            this.palette[(y_offset + x) * 3 + 2] += ballColor.b * contrib;\n          }\n        }\n      }\n    }\n  };\n\n  this.addPlaneX = function (strength, subtract) {\n    var x,\n        y,\n        z,\n        xx,\n        val,\n        xdiv,\n        cxy,\n        // cache attribute lookups\n    size = this.size,\n        yd = this.yd,\n        zd = this.zd,\n        field = this.field,\n        dist = size * Math.sqrt(strength / subtract);\n    if (dist > size) dist = size;\n\n    for (x = 0; x < dist; x++) {\n      xdiv = x / size;\n      xx = xdiv * xdiv;\n      val = strength / (0.0001 + xx) - subtract;\n\n      if (val > 0.0) {\n        for (y = 0; y < size; y++) {\n          cxy = x + y * yd;\n\n          for (z = 0; z < size; z++) {\n            field[zd * z + cxy] += val;\n          }\n        }\n      }\n    }\n  };\n\n  this.addPlaneY = function (strength, subtract) {\n    var x,\n        y,\n        z,\n        yy,\n        val,\n        ydiv,\n        cy,\n        cxy,\n        // cache attribute lookups\n    size = this.size,\n        yd = this.yd,\n        zd = this.zd,\n        field = this.field,\n        dist = size * Math.sqrt(strength / subtract);\n    if (dist > size) dist = size;\n\n    for (y = 0; y < dist; y++) {\n      ydiv = y / size;\n      yy = ydiv * ydiv;\n      val = strength / (0.0001 + yy) - subtract;\n\n      if (val > 0.0) {\n        cy = y * yd;\n\n        for (x = 0; x < size; x++) {\n          cxy = cy + x;\n\n          for (z = 0; z < size; z++) {\n            field[zd * z + cxy] += val;\n          }\n        }\n      }\n    }\n  };\n\n  this.addPlaneZ = function (strength, subtract) {\n    var x,\n        y,\n        z,\n        zz,\n        val,\n        zdiv,\n        cz,\n        cyz,\n        // cache attribute lookups\n    size = this.size,\n        yd = this.yd,\n        zd = this.zd,\n        field = this.field,\n        dist = size * Math.sqrt(strength / subtract);\n    if (dist > size) dist = size;\n\n    for (z = 0; z < dist; z++) {\n      zdiv = z / size;\n      zz = zdiv * zdiv;\n      val = strength / (0.0001 + zz) - subtract;\n\n      if (val > 0.0) {\n        cz = zd * z;\n\n        for (y = 0; y < size; y++) {\n          cyz = cz + y * yd;\n\n          for (x = 0; x < size; x++) {\n            field[cyz + x] += val;\n          }\n        }\n      }\n    }\n  }; /////////////////////////////////////\n  // Updates\n  /////////////////////////////////////\n\n\n  this.setCell = function (x, y, z, value) {\n    var index = this.size2 * z + this.size * y + x;\n    this.field[index] = value;\n  };\n\n  this.getCell = function (x, y, z) {\n    var index = this.size2 * z + this.size * y + x;\n    return this.field[index];\n  };\n\n  this.blur = function (intensity) {\n    if (intensity === undefined) {\n      intensity = 1;\n    }\n\n    var field = this.field;\n    var fieldCopy = field.slice();\n    var size = this.size;\n    var size2 = this.size2;\n\n    for (var x = 0; x < size; x++) {\n      for (var y = 0; y < size; y++) {\n        for (var z = 0; z < size; z++) {\n          var index = size2 * z + size * y + x;\n          var val = fieldCopy[index];\n          var count = 1;\n\n          for (var x2 = -1; x2 <= 1; x2 += 2) {\n            var x3 = x2 + x;\n            if (x3 < 0 || x3 >= size) continue;\n\n            for (var y2 = -1; y2 <= 1; y2 += 2) {\n              var y3 = y2 + y;\n              if (y3 < 0 || y3 >= size) continue;\n\n              for (var z2 = -1; z2 <= 1; z2 += 2) {\n                var z3 = z2 + z;\n                if (z3 < 0 || z3 >= size) continue;\n                var index2 = size2 * z3 + size * y3 + x3;\n                var val2 = fieldCopy[index2];\n                count++;\n                val += intensity * (val2 - val) / count;\n              }\n            }\n          }\n\n          field[index] = val;\n        }\n      }\n    }\n  };\n\n  this.reset = function () {\n    var i; // wipe the normal cache\n\n    for (i = 0; i < this.size3; i++) {\n      this.normal_cache[i * 3] = 0.0;\n      this.field[i] = 0.0;\n      this.palette[i * 3] = this.palette[i * 3 + 1] = this.palette[i * 3 + 2] = 0.0;\n    }\n  };\n\n  this.render = function (renderCallback) {\n    this.begin(); // Triangulate. Yeah, this is slow.\n\n    var smin2 = this.size - 2;\n\n    for (var z = 1; z < smin2; z++) {\n      var z_offset = this.size2 * z;\n      var fz = (z - this.halfsize) / this.halfsize; //+ 1\n\n      for (var y = 1; y < smin2; y++) {\n        var y_offset = z_offset + this.size * y;\n        var fy = (y - this.halfsize) / this.halfsize; //+ 1\n\n        for (var x = 1; x < smin2; x++) {\n          var fx = (x - this.halfsize) / this.halfsize; //+ 1\n\n          var q = y_offset + x;\n          polygonize(fx, fy, fz, q, this.isolation, renderCallback);\n        }\n      }\n    }\n\n    this.end(renderCallback);\n  };\n\n  this.generateGeometry = function () {\n    console.warn(\"MarchingCubes: generateGeometry() now returns BufferGeometry\");\n    return this.generateBufferGeometry();\n  };\n\n  function concatenate(a, b, length) {\n    var result = new Float32Array(a.length + length);\n    result.set(a, 0);\n    result.set(b.slice(0, length), a.length);\n    return result;\n  }\n\n  this.generateBufferGeometry = function () {\n    var geo = new BufferGeometry();\n    var posArray = new Float32Array();\n    var normArray = new Float32Array();\n    var colorArray = new Float32Array();\n    var uvArray = new Float32Array();\n    var scope = this;\n\n    var geo_callback = function geo_callback(object) {\n      if (scope.hasPositions) posArray = concatenate(posArray, object.positionArray, object.count * 3);\n      if (scope.hasNormals) normArray = concatenate(normArray, object.normalArray, object.count * 3);\n      if (scope.hasColors) colorArray = concatenate(colorArray, object.colorArray, object.count * 3);\n      if (scope.hasUvs) uvArray = concatenate(uvArray, object.uvArray, object.count * 2);\n      object.count = 0;\n    };\n\n    this.render(geo_callback);\n    if (this.hasPositions) geo.addAttribute(\"position\", new BufferAttribute(posArray, 3));\n    if (this.hasNormals) geo.addAttribute(\"normal\", new BufferAttribute(normArray, 3));\n    if (this.hasColors) geo.addAttribute(\"color\", new BufferAttribute(colorArray, 3));\n    if (this.hasUvs) geo.addAttribute(\"uv\", new BufferAttribute(uvArray, 2));\n    return geo;\n  };\n\n  this.init(resolution);\n};\n\nMarchingCubes.prototype = Object.create(ImmediateRenderObject.prototype);\nMarchingCubes.prototype.constructor = MarchingCubes; /////////////////////////////////////\n// Marching cubes lookup tables\n/////////////////////////////////////\n// These tables are straight from Paul Bourke's page:\n// http://local.wasp.uwa.edu.au/~pbourke/geometry/polygonise/\n// who in turn got them from Cory Gene Bloyd.\n\nvar edgeTable = new Int32Array([0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c, 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00, 0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c, 0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90, 0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c, 0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30, 0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac, 0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0, 0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c, 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60, 0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc, 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0, 0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c, 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950, 0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc, 0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0, 0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc, 0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0, 0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c, 0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650, 0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc, 0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0, 0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c, 0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460, 0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac, 0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0, 0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, 0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230, 0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, 0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190, 0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, 0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0]);\nvar triTable = new Int32Array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1, 3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1, 3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1, 9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, 2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1, 8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1, 9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, 4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1, 3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1, 1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1, 4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1, 4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1, 5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1, 2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1, 9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, 2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1, 10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, 4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1, 5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1, 5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, 9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1, 0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1, 1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1, 10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1, 8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1, 2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, 7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, 9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1, 2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1, 11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1, 9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1, 5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1, 11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1, 11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1, 9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1, 5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1, 2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1, 6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1, 0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1, 3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1, 6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, 10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1, 6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, 1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1, 8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1, 7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1, 3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1, 0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, 9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1, 8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1, 5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1, 0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1, 6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1, 10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, 10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1, 8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1, 1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1, 0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, 10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1, 0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1, 3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1, 6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1, 9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1, 8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1, 3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, 6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1, 0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1, 10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1, 10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1, 1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1, 2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1, 7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1, 7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1, 2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1, 1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1, 11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1, 8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1, 0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1, 7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, 10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, 2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, 6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1, 7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1, 2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, 1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1, 10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1, 10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1, 0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1, 7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1, 6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, 8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1, 9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1, 6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1, 4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1, 10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1, 8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, 0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1, 1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1, 8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1, 10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1, 4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1, 10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, 5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, 11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1, 9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, 6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1, 7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1, 3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1, 7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1, 3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1, 6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1, 9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1, 1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1, 4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1, 7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1, 6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1, 3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1, 0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1, 6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1, 0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1, 11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1, 6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1, 5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1, 9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1, 1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1, 1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1, 10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1, 0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1, 5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1, 10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1, 11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1, 9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1, 7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1, 2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, 8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1, 9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1, 9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1, 1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1, 9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1, 9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, 5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1, 0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1, 10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1, 2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1, 0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1, 0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1, 9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1, 5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1, 3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1, 5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1, 8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1, 1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1, 3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1, 4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1, 9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1, 11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1, 11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1, 2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1, 9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1, 3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1, 1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1, 4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1, 4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1, 0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1, 3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1, 0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1, 9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1, 1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);\nexport { MarchingCubes, edgeTable, triTable };","/*\n *\t@author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog\n *\n *\tSimplification Geometry Modifier\n *    - based on code and technique\n *\t  - by Stan Melax in 1998\n *\t  - Progressive Mesh type Polygon Reduction Algorithm\n *    - http://www.melax.com/polychop/\n */\nimport { BufferGeometry, Float32BufferAttribute, Geometry, Vector3 } from \"../../../build/three.module.js\";\n\nvar SimplifyModifier = function SimplifyModifier() {};\n\n(function () {\n  var cb = new Vector3(),\n      ab = new Vector3();\n\n  function pushIfUnique(array, object) {\n    if (array.indexOf(object) === -1) array.push(object);\n  }\n\n  function removeFromArray(array, object) {\n    var k = array.indexOf(object);\n    if (k > -1) array.splice(k, 1);\n  }\n\n  function computeEdgeCollapseCost(u, v) {\n    // if we collapse edge uv by moving u to v then how\n    // much different will the model change, i.e. the \"error\".\n    var edgelength = v.position.distanceTo(u.position);\n    var curvature = 0;\n    var sideFaces = [];\n    var i,\n        il = u.faces.length,\n        face,\n        sideFace; // find the \"sides\" triangles that are on the edge uv\n\n    for (i = 0; i < il; i++) {\n      face = u.faces[i];\n\n      if (face.hasVertex(v)) {\n        sideFaces.push(face);\n      }\n    } // use the triangle facing most away from the sides\n    // to determine our curvature term\n\n\n    for (i = 0; i < il; i++) {\n      var minCurvature = 1;\n      face = u.faces[i];\n\n      for (var j = 0; j < sideFaces.length; j++) {\n        sideFace = sideFaces[j]; // use dot product of face normals.\n\n        var dotProd = face.normal.dot(sideFace.normal);\n        minCurvature = Math.min(minCurvature, (1.001 - dotProd) / 2);\n      }\n\n      curvature = Math.max(curvature, minCurvature);\n    } // crude approach in attempt to preserve borders\n    // though it seems not to be totally correct\n\n\n    var borders = 0;\n\n    if (sideFaces.length < 2) {\n      // we add some arbitrary cost for borders,\n      // borders += 10;\n      curvature = 1;\n    }\n\n    var amt = edgelength * curvature + borders;\n    return amt;\n  }\n\n  function computeEdgeCostAtVertex(v) {\n    // compute the edge collapse cost for all edges that start\n    // from vertex v.  Since we are only interested in reducing\n    // the object by selecting the min cost edge at each step, we\n    // only cache the cost of the least cost edge at this vertex\n    // (in member variable collapse) as well as the value of the\n    // cost (in member variable collapseCost).\n    if (v.neighbors.length === 0) {\n      // collapse if no neighbors.\n      v.collapseNeighbor = null;\n      v.collapseCost = -0.01;\n      return;\n    }\n\n    v.collapseCost = 100000;\n    v.collapseNeighbor = null; // search all neighboring edges for \"least cost\" edge\n\n    for (var i = 0; i < v.neighbors.length; i++) {\n      var collapseCost = computeEdgeCollapseCost(v, v.neighbors[i]);\n\n      if (!v.collapseNeighbor) {\n        v.collapseNeighbor = v.neighbors[i];\n        v.collapseCost = collapseCost;\n        v.minCost = collapseCost;\n        v.totalCost = 0;\n        v.costCount = 0;\n      }\n\n      v.costCount++;\n      v.totalCost += collapseCost;\n\n      if (collapseCost < v.minCost) {\n        v.collapseNeighbor = v.neighbors[i];\n        v.minCost = collapseCost;\n      }\n    } // we average the cost of collapsing at this vertex\n\n\n    v.collapseCost = v.totalCost / v.costCount; // v.collapseCost = v.minCost;\n  }\n\n  function removeVertex(v, vertices) {\n    console.assert(v.faces.length === 0);\n\n    while (v.neighbors.length) {\n      var n = v.neighbors.pop();\n      removeFromArray(n.neighbors, v);\n    }\n\n    removeFromArray(vertices, v);\n  }\n\n  function removeFace(f, faces) {\n    removeFromArray(faces, f);\n    if (f.v1) removeFromArray(f.v1.faces, f);\n    if (f.v2) removeFromArray(f.v2.faces, f);\n    if (f.v3) removeFromArray(f.v3.faces, f); // TODO optimize this!\n\n    var vs = [f.v1, f.v2, f.v3];\n    var v1, v2;\n\n    for (var i = 0; i < 3; i++) {\n      v1 = vs[i];\n      v2 = vs[(i + 1) % 3];\n      if (!v1 || !v2) continue;\n      v1.removeIfNonNeighbor(v2);\n      v2.removeIfNonNeighbor(v1);\n    }\n  }\n\n  function collapse(vertices, faces, u, v) {\n    // u and v are pointers to vertices of an edge\n    // Collapse the edge uv by moving vertex u onto v\n    if (!v) {\n      // u is a vertex all by itself so just delete it..\n      removeVertex(u, vertices);\n      return;\n    }\n\n    var i;\n    var tmpVertices = [];\n\n    for (i = 0; i < u.neighbors.length; i++) {\n      tmpVertices.push(u.neighbors[i]);\n    } // delete triangles on edge uv:\n\n\n    for (i = u.faces.length - 1; i >= 0; i--) {\n      if (u.faces[i].hasVertex(v)) {\n        removeFace(u.faces[i], faces);\n      }\n    } // update remaining triangles to have v instead of u\n\n\n    for (i = u.faces.length - 1; i >= 0; i--) {\n      u.faces[i].replaceVertex(u, v);\n    }\n\n    removeVertex(u, vertices); // recompute the edge collapse costs in neighborhood\n\n    for (i = 0; i < tmpVertices.length; i++) {\n      computeEdgeCostAtVertex(tmpVertices[i]);\n    }\n  }\n\n  function minimumCostEdge(vertices) {\n    // O(n * n) approach. TODO optimize this\n    var least = vertices[0];\n\n    for (var i = 0; i < vertices.length; i++) {\n      if (vertices[i].collapseCost < least.collapseCost) {\n        least = vertices[i];\n      }\n    }\n\n    return least;\n  } // we use a triangle class to represent structure of face slightly differently\n\n\n  function Triangle(v1, v2, v3, a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.v1 = v1;\n    this.v2 = v2;\n    this.v3 = v3;\n    this.normal = new Vector3();\n    this.computeNormal();\n    v1.faces.push(this);\n    v1.addUniqueNeighbor(v2);\n    v1.addUniqueNeighbor(v3);\n    v2.faces.push(this);\n    v2.addUniqueNeighbor(v1);\n    v2.addUniqueNeighbor(v3);\n    v3.faces.push(this);\n    v3.addUniqueNeighbor(v1);\n    v3.addUniqueNeighbor(v2);\n  }\n\n  Triangle.prototype.computeNormal = function () {\n    var vA = this.v1.position;\n    var vB = this.v2.position;\n    var vC = this.v3.position;\n    cb.subVectors(vC, vB);\n    ab.subVectors(vA, vB);\n    cb.cross(ab).normalize();\n    this.normal.copy(cb);\n  };\n\n  Triangle.prototype.hasVertex = function (v) {\n    return v === this.v1 || v === this.v2 || v === this.v3;\n  };\n\n  Triangle.prototype.replaceVertex = function (oldv, newv) {\n    if (oldv === this.v1) this.v1 = newv;else if (oldv === this.v2) this.v2 = newv;else if (oldv === this.v3) this.v3 = newv;\n    removeFromArray(oldv.faces, this);\n    newv.faces.push(this);\n    oldv.removeIfNonNeighbor(this.v1);\n    this.v1.removeIfNonNeighbor(oldv);\n    oldv.removeIfNonNeighbor(this.v2);\n    this.v2.removeIfNonNeighbor(oldv);\n    oldv.removeIfNonNeighbor(this.v3);\n    this.v3.removeIfNonNeighbor(oldv);\n    this.v1.addUniqueNeighbor(this.v2);\n    this.v1.addUniqueNeighbor(this.v3);\n    this.v2.addUniqueNeighbor(this.v1);\n    this.v2.addUniqueNeighbor(this.v3);\n    this.v3.addUniqueNeighbor(this.v1);\n    this.v3.addUniqueNeighbor(this.v2);\n    this.computeNormal();\n  };\n\n  function Vertex(v, id) {\n    this.position = v;\n    this.id = id; // old index id\n\n    this.faces = []; // faces vertex is connected\n\n    this.neighbors = []; // neighbouring vertices aka \"adjacentVertices\"\n    // these will be computed in computeEdgeCostAtVertex()\n\n    this.collapseCost = 0; // cost of collapsing this vertex, the less the better. aka objdist\n\n    this.collapseNeighbor = null; // best candinate for collapsing\n  }\n\n  Vertex.prototype.addUniqueNeighbor = function (vertex) {\n    pushIfUnique(this.neighbors, vertex);\n  };\n\n  Vertex.prototype.removeIfNonNeighbor = function (n) {\n    var neighbors = this.neighbors;\n    var faces = this.faces;\n    var offset = neighbors.indexOf(n);\n    if (offset === -1) return;\n\n    for (var i = 0; i < faces.length; i++) {\n      if (faces[i].hasVertex(n)) return;\n    }\n\n    neighbors.splice(offset, 1);\n  };\n\n  SimplifyModifier.prototype.modify = function (geometry, count) {\n    if (geometry.isBufferGeometry) {\n      geometry = new Geometry().fromBufferGeometry(geometry);\n    }\n\n    geometry.mergeVertices();\n    var oldVertices = geometry.vertices; // Three Position\n\n    var oldFaces = geometry.faces; // Three Face\n    // conversion\n\n    var vertices = [];\n    var faces = [];\n    var i, il; //\n    // put data of original geometry in different data structures\n    //\n    // add vertices\n\n    for (i = 0, il = oldVertices.length; i < il; i++) {\n      var vertex = new Vertex(oldVertices[i], i);\n      vertices.push(vertex);\n    } // add faces\n\n\n    for (i = 0, il = oldFaces.length; i < il; i++) {\n      var face = oldFaces[i];\n      var a = face.a;\n      var b = face.b;\n      var c = face.c;\n      var triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n      faces.push(triangle);\n    } // compute all edge collapse costs\n\n\n    for (i = 0, il = vertices.length; i < il; i++) {\n      computeEdgeCostAtVertex(vertices[i]);\n    }\n\n    var nextVertex;\n    var z = count;\n\n    while (z--) {\n      nextVertex = minimumCostEdge(vertices);\n\n      if (!nextVertex) {\n        console.log('THREE.SimplifyModifier: No next vertex');\n        break;\n      }\n\n      collapse(vertices, faces, nextVertex, nextVertex.collapseNeighbor);\n    } //\n\n\n    var simplifiedGeometry = new BufferGeometry();\n    var position = [];\n    var index = []; //\n\n    for (i = 0; i < vertices.length; i++) {\n      var vertex = vertices[i].position;\n      position.push(vertex.x, vertex.y, vertex.z);\n    } //\n\n\n    for (i = 0; i < faces.length; i++) {\n      var face = faces[i];\n      var a = vertices.indexOf(face.v1);\n      var b = vertices.indexOf(face.v2);\n      var c = vertices.indexOf(face.v3);\n      index.push(a, b, c);\n    } //\n\n\n    simplifiedGeometry.addAttribute('position', new Float32BufferAttribute(position, 3));\n    simplifiedGeometry.setIndex(index);\n    return simplifiedGeometry;\n  };\n})();\n\nexport { SimplifyModifier };","const voxelSize = 500\nconst voxelLayers = 2\nconst voxelNumber = 3\nconst voxelOffset = {\n  x: 0, y: 0, z: -175\n}\n\nexport {\n  voxelSize,\n  voxelLayers,\n  voxelNumber,\n  voxelOffset\n}\n","/* eslint-env worker */\n\nimport SimplexNoise from 'simplex-noise'\nimport { Geometry } from 'three/src/core/Geometry'\nimport { MeshNormalMaterial } from 'three/src/materials/MeshNormalMaterial'\nimport { MarchingCubes } from 'three/examples/jsm/objects/MarchingCubes.js'\nimport { SimplifyModifier } from 'three/examples/jsm/modifiers/SimplifyModifier.js'\nimport { voxelSize } from './constants'\n\nconst simple = new SimplifyModifier()\nconst noise = new SimplexNoise('123')\n\nconst generateVoxels = (i, j, k, zMax) => {\n  console.time([i, j, k].toString())\n  let n = 0\n  let noGeometry = true\n  let noiseValue\n  let geometry\n  let dim = 32\n  const positions = new Float32Array(dim * dim * dim)\n  const effect = new MarchingCubes(dim, new MeshNormalMaterial(), false, false)\n  effect.isolation = 0\n\n  let n128, n64, n32, n16, n8, n4\n  const fbm = (x, y, z) => {\n    n128 = noise.noise3D(x / 128, y / 128, z / 128)\n    n64 = noise.noise3D(x / 64, y / 64, z / 64)\n    n32 = noise.noise3D(x / 32, y / 32, z / 32)\n    n16 = noise.noise3D(x / 16, y / 16, z / 16)\n    n8 = noise.noise3D(x / 8, y / 8, z / 8)\n    n4 = noise.noise3D(x / 4, y / 4, z / 4)\n    let value = 2 * (0.5 - Math.abs(n128)) * 0.5\n    value += 2 * (0.5 - Math.abs(n64)) * 0.25\n    value += 2 * (0.5 - Math.abs(n32)) * 0.125\n    value += 2 * (0.5 - Math.abs(n16)) * 0.0625 * n128\n    value += 2 * (0.5 - Math.abs(n8)) * 0.03125 * n64\n    value += 2 * (0.5 - Math.abs(n4)) * 0.015625 * n32\n    return value\n  }\n  let x1, y1, z1, x2, y2, z2\n  for (let z = k * (dim - 3); z < k * (dim - 3) + dim; z++) {\n    for (let y = j * (dim - 3); y < j * (dim - 3) + dim; y++) {\n      for (let x = i * (dim - 3); x < i * (dim - 3) + dim; x++, n++) {\n        x1 = x + 16 * fbm(x, y, z)\n        y1 = y + 16 * fbm(x + 333.33, y + 333.33, z + 333.33)\n        z1 = z + 16 * fbm(x + 666.66, y + 666.66, z + 666.66)\n        x2 = x + 16 * fbm(x1, y1, z1)\n        y2 = y + 16 * fbm(x1 + 111.11, y1 + 111.11, z1 + 111.11)\n        z2 = z + 16 * fbm(x1 + 222.22, y1 + 222.22, z1 + 222.22)\n        noiseValue = fbm(x2, y2, z2)\n\n        let density = 0\n        density += noiseValue * 0.5\n\n        let zinfluence = 0.5 - z / (zMax * (dim - 3))\n        density += zinfluence\n\n        positions[n] = density\n\n        if (n === 0) continue\n        noGeometry = noGeometry ? Math.sign(positions[n]) === Math.sign(positions[n - 1]) : false\n      }\n    }\n  }\n  if (noGeometry) {\n    postMessage({\n      hasGeometry: false,\n      i,\n      j,\n      k\n    })\n    return\n  }\n  // generate geometry\n  effect.field = positions\n  geometry = effect.generateBufferGeometry()\n\n  if (!geometry.attributes.position) {\n    postMessage({\n      hasGeometry: false,\n      i,\n      j,\n      k\n    })\n    return\n  }\n\n  geometry.computeBoundingBox()\n  let scaleFactor = voxelSize / 1.8125\n  geometry.scale(scaleFactor, scaleFactor, scaleFactor)\n\n  geometry = new Geometry().fromBufferGeometry(geometry)\n  geometry.mergeVertices()\n  const geometry1 = simple.modify(\n    geometry,\n    Math.floor(geometry.vertices.length * (geometry.vertices.length > 200 ? 0.4 : 0.1))\n  )\n  // const geometry2 = simple.modify(geometry, Math.floor(geometry.vertices.length * 0.7))\n  geometry1.computeVertexNormals()\n  // geometry2.computeVertexNormals()\n  // geometry.computeFaceNormals()\n  // geometry = new BufferGeometry().fromGeometry(geometry)\n\n  // geometry.computeVertexNormals()\n  const pos1 = geometry1.attributes.position.array.buffer\n  // const pos2 = geometry2.attributes.position.array.buffer\n  const normals1 = geometry1.attributes.normal.array.buffer\n  // const normals2 = geometry2.attributes.normal.array.buffer\n  const index1 = geometry1.index.array.buffer\n  // const index2 = geometry2.index.array.buffer\n  console.timeEnd([i, j, k].toString())\n  postMessage({\n    hasGeometry: true,\n    i,\n    j,\n    k,\n    pos1,\n    normals1,\n    index1\n    // pos2,\n    // normals2,\n    // index2\n  }, [pos1, normals1, index1]) //, pos2, normals2, index2])\n}\n\nonmessage = function (args) {\n  const [i, j, k, zMax] = args.data\n  generateVoxels(i, j, k, zMax)\n}\n"],"sourceRoot":""}