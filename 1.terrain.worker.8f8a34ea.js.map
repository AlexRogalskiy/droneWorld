{"version":3,"sources":["terrain/dem2mesh/pkg/index.js"],"names":["cachegetUint8Memory","getUint8Memory","buffer","wasm","Uint8Array","WASM_VECTOR_LEN","passArray8ToWasm","arg","ptr","length","set","cachegetInt32Memory","getInt32Memory","Int32Array","cachegetFloat32Memory","getArrayF32FromWasm","len","Float32Array","subarray","png2elevation","png_bytes","memi32","v0","retptr","slice","_Znwm","arg0","_ZdlPv","__assert_fail","a","b","c","d","heap","Array","getObject","idx","fill","undefined","push","heap_next","takeObject","ret","dropObject","png2mesh","size","segments","init","cachedTextDecoder","TextDecoder","getStringFromWasm","decode","addHeapObject","obj","passStringToWasm","cachedTextEncoder","TextEncoder","encodeInto","offset","mem","code","charCodeAt","view","written","buf","encode","__wbg_log_db2a6fddbe33ea55","arg1","console","log","__wbindgen_object_drop_ref","__wbg_new_59cb74e423758ede","Error","__wbg_stack_558ba5917b466edd","stack","ret0","ret1","__wbg_error_4bb6c2a97407129a","error","__wbg_new_f802c5ff9d449d95","__wbg_push_4ba6b2636acd5f79","__wbg_buffer_d31feadf69cb45fc","__wbg_newwithbyteoffsetandlength_1012637c6ea0e9b5","arg2","Uint32Array","__wbg_newwithbyteoffsetandlength_a5176866b4bc401c","__wbindgen_throw","__wbindgen_memory"],"mappings":"uDAAA,i/BAEA,IAAIA,EAAsB,KAC1B,SAASC,IAIL,OAH4B,OAAxBD,GAAgCA,EAAoBE,SAAWC,IAAYD,SAC3EF,EAAsB,IAAII,WAAWD,IAAYD,SAE9CF,EAGX,IAAIK,EAAkB,EAEtB,SAASC,EAAiBC,GACtB,MAAMC,EAAML,IAAoC,EAAbI,EAAIE,QAGvC,OAFAR,IAAiBS,IAAIH,EAAKC,EAAM,GAChCH,EAAkBE,EAAIE,OACfD,EAGX,IAAIG,EAAsB,KAC1B,SAASC,IAIL,OAH4B,OAAxBD,GAAgCA,EAAoBT,SAAWC,IAAYD,SAC3ES,EAAsB,IAAIE,WAAWV,IAAYD,SAE9CS,EAGX,IAAIG,EAAwB,KAQ5B,SAASC,EAAoBP,EAAKQ,GAC9B,OAP8B,OAA1BF,GAAkCA,EAAsBZ,SAAWC,IAAYD,SAC/EY,EAAwB,IAAIG,aAAad,IAAYD,SAElDY,GAImBI,SAASV,EAAM,EAAGA,EAAM,EAAIQ,GAMnD,SAASG,EAAcC,GAEdjB,IADG,EACwBG,EAAiBc,GAAYf,GADpE,MAEMgB,EAAST,IACTU,EAAKP,EAAoBM,EAAOE,GAAiBF,EAAOE,IAAiBC,QAE/E,OADArB,IAAqBkB,EAAOE,GAA0C,EAAzBF,EAAOE,IAC7CD,EAOJ,SAASG,EAAMC,GAElB,OADYvB,IAAWuB,GAOpB,SAASC,EAAOD,GACnBvB,IAAYuB,GAST,SAASE,EAAcC,EAAGC,EAAGC,EAAGC,GACnC7B,IAAmB0B,EAAGC,EAAGC,EAAGC,GAGhC,MAAMC,EAAO,IAAIC,MAAM,IAMvB,SAASC,EAAUC,GAAO,OAAOH,EAAKG,GAJtCH,EAAKI,UAAKC,GAEVL,EAAKM,UAAKD,EAAW,MAAM,GAAM,GAIjC,IAAIE,EAAYP,EAAKxB,OAQrB,SAASgC,EAAWL,GAChB,MAAMM,EAAMP,EAAUC,GAEtB,OATJ,SAAoBA,GACZA,EAAM,KACVH,EAAKG,GAAOI,EACZA,EAAYJ,GAKZO,CAAWP,GACJM,EAQJ,SAASE,EAASxB,EAAWyB,EAAMC,GAEtC,OAAOL,EADKtC,IAAcG,EAAiBc,GAAYf,EAAiBwC,EAAMC,IAM3E,SAASC,IACZ5C,MAGJ,IAAI6C,EAAoB,IAAIC,YAAY,SAExC,SAASC,EAAkB1C,EAAKQ,GAC5B,OAAOgC,EAAkBG,OAAOlD,IAAiBiB,SAASV,EAAKA,EAAMQ,IAGzE,SAASoC,EAAcC,GACfb,IAAcP,EAAKxB,QAAQwB,EAAKM,KAAKN,EAAKxB,OAAS,GACvD,MAAM2B,EAAMI,EAIZ,OAHAA,EAAYP,EAAKG,GAEjBH,EAAKG,GAAOiB,EACLjB,EAGX,IAEIkB,EAFAC,EAAoB,IAAIC,YAAY,SAIpCF,EADwC,oBAAjCC,EAAkBE,WACN,SAASlD,GAGxB,IAAIsC,EAAOtC,EAAIE,OACXD,EAAML,IAAuB0C,GAC7Ba,EAAS,EACb,CACI,MAAMC,EAAM1D,IACZ,KAAOyD,EAASnD,EAAIE,OAAQiD,IAAU,CAClC,MAAME,EAAOrD,EAAIsD,WAAWH,GAC5B,GAAIE,EAAO,IAAM,MACjBD,EAAInD,EAAMkD,GAAUE,GAI5B,GAAIF,IAAWnD,EAAIE,OAAQ,CACvBF,EAAMA,EAAIiB,MAAMkC,GAChBlD,EAAML,IAAwBK,EAAKqC,EAAMA,EAAOa,EAAsB,EAAbnD,EAAIE,QAC7D,MAAMqD,EAAO7D,IAAiBiB,SAASV,EAAMkD,EAAQlD,EAAMqC,GAG3Da,GAFYH,EAAkBE,WAAWlD,EAAKuD,GAEhCC,QAGlB,OADA1D,EAAkBqD,EACXlD,GAGQ,SAASD,GAGxB,IAAIsC,EAAOtC,EAAIE,OACXD,EAAML,IAAuB0C,GAC7Ba,EAAS,EACb,CACI,MAAMC,EAAM1D,IACZ,KAAOyD,EAASnD,EAAIE,OAAQiD,IAAU,CAClC,MAAME,EAAOrD,EAAIsD,WAAWH,GAC5B,GAAIE,EAAO,IAAM,MACjBD,EAAInD,EAAMkD,GAAUE,GAI5B,GAAIF,IAAWnD,EAAIE,OAAQ,CACvB,MAAMuD,EAAMT,EAAkBU,OAAO1D,EAAIiB,MAAMkC,IAC/ClD,EAAML,IAAwBK,EAAKqC,EAAMA,EAAOa,EAASM,EAAIvD,QAC7DR,IAAiBS,IAAIsD,EAAKxD,EAAMkD,GAChCA,GAAUM,EAAIvD,OAGlB,OADAJ,EAAkBqD,EACXlD,GAIR,MAAM0D,EAA6B,SAASxC,EAAMyC,GACrD,MAAM7C,EAAK4B,EAAkBxB,EAAMyC,GAAM3C,QACzCrB,IAAqBuB,EAAa,EAAPyC,GAC3BC,QAAQC,IAAI/C,IAGHgD,EAA6B,SAAS5C,GAC/Ce,EAAWf,IAGF6C,EAA6B,WAEtC,OAAOnB,EADK,IAAIoB,QAIPC,EAA+B,SAAS/C,EAAMyC,GACvD,MAAMzB,EAAMP,EAAUgC,GAAMO,MACtBC,EAAOrB,EAAiBZ,GACxBkC,EAAOvE,EACbO,IAAiBc,EAAO,EAAI,GAAKiD,EACjC/D,IAAiBc,EAAO,EAAI,GAAKkD,GAGxBC,EAA+B,SAASnD,EAAMyC,GACvD,MAAM7C,EAAK4B,EAAkBxB,EAAMyC,GAAM3C,QACzCrB,IAAqBuB,EAAa,EAAPyC,GAC3BC,QAAQU,MAAMxD,IAGLyD,EAA6B,WAEtC,OAAO3B,EADK,IAAIlB,QAIP8C,EAA8B,SAAStD,EAAMyC,GAEtD,OADYhC,EAAUT,GAAMa,KAAKJ,EAAUgC,KAIlCc,EAAgC,SAASvD,GAElD,OAAO0B,EADKjB,EAAUT,GAAMxB,SAInBgF,EAAoD,SAASxD,EAAMyC,EAAMgB,GAElF,OAAO/B,EADK,IAAIgC,YAAYjD,EAAUT,GAAOyC,IAAS,EAAGgB,IAAS,KAIzDE,EAAoD,SAAS3D,EAAMyC,EAAMgB,GAElF,OAAO/B,EADK,IAAInC,aAAakB,EAAUT,GAAOyC,IAAS,EAAGgB,IAAS,KAI1DG,EAAmB,SAAS5D,EAAMyC,GAC3C,MAAM,IAAIK,MAAMtB,EAAkBxB,EAAMyC,KAG/BoB,EAAoB,WAE7B,OAAOnC,EADKjD,O","file":"1.terrain.worker.8f8a34ea.js","sourcesContent":["import * as wasm from './index_bg.wasm';\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n    getUint8Memory().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory = null;\nfunction getInt32Memory() {\n    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory;\n}\n\nlet cachegetFloat32Memory = null;\nfunction getFloat32Memory() {\n    if (cachegetFloat32Memory === null || cachegetFloat32Memory.buffer !== wasm.memory.buffer) {\n        cachegetFloat32Memory = new Float32Array(wasm.memory.buffer);\n    }\n    return cachegetFloat32Memory;\n}\n\nfunction getArrayF32FromWasm(ptr, len) {\n    return getFloat32Memory().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* @param {Uint8Array} png_bytes\n* @returns {Float32Array}\n*/\nexport function png2elevation(png_bytes) {\n    const retptr = 8;\n    const ret = wasm.png2elevation(retptr, passArray8ToWasm(png_bytes), WASM_VECTOR_LEN);\n    const memi32 = getInt32Memory();\n    const v0 = getArrayF32FromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n    wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 4);\n    return v0;\n}\n\n/**\n* @param {number} arg0\n* @returns {number}\n*/\nexport function _Znwm(arg0) {\n    const ret = wasm._Znwm(arg0);\n    return ret;\n}\n\n/**\n* @param {number} arg0\n*/\nexport function _ZdlPv(arg0) {\n    wasm._ZdlPv(arg0);\n}\n\n/**\n* @param {number} a\n* @param {number} b\n* @param {number} c\n* @param {number} d\n*/\nexport function __assert_fail(a, b, c, d) {\n    wasm.__assert_fail(a, b, c, d);\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @param {Uint8Array} png_bytes\n* @param {number} size\n* @param {number} segments\n* @returns {any}\n*/\nexport function png2mesh(png_bytes, size, segments) {\n    const ret = wasm.png2mesh(passArray8ToWasm(png_bytes), WASM_VECTOR_LEN, size, segments);\n    return takeObject(ret);\n}\n\n/**\n*/\nexport function init() {\n    wasm.init();\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            arg = arg.slice(offset);\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + arg.length * 3);\n            const view = getUint8Memory().subarray(ptr + offset, ptr + size);\n            const ret = cachedTextEncoder.encodeInto(arg, view);\n\n            offset += ret.written;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            const buf = cachedTextEncoder.encode(arg.slice(offset));\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + buf.length);\n            getUint8Memory().set(buf, ptr + offset);\n            offset += buf.length;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n}\n\nexport const __wbg_log_db2a6fddbe33ea55 = function(arg0, arg1) {\n    const v0 = getStringFromWasm(arg0, arg1).slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n    console.log(v0);\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ret0 = passStringToWasm(ret);\n    const ret1 = WASM_VECTOR_LEN;\n    getInt32Memory()[arg0 / 4 + 0] = ret0;\n    getInt32Memory()[arg0 / 4 + 1] = ret1;\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    const v0 = getStringFromWasm(arg0, arg1).slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n    console.error(v0);\n};\n\nexport const __wbg_new_f802c5ff9d449d95 = function() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_push_4ba6b2636acd5f79 = function(arg0, arg1) {\n    const ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nexport const __wbg_buffer_d31feadf69cb45fc = function(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_newwithbyteoffsetandlength_1012637c6ea0e9b5 = function(arg0, arg1, arg2) {\n    const ret = new Uint32Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_newwithbyteoffsetandlength_a5176866b4bc401c = function(arg0, arg1, arg2) {\n    const ret = new Float32Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm(arg0, arg1));\n};\n\nexport const __wbindgen_memory = function() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\n"],"sourceRoot":""}